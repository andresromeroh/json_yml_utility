{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json",
    "dbt_version": "1.0.4",
    "generated_at": "2022-04-18T20:07:21.633370Z",
    "invocation_id": "8a14194d-3639-4a8a-8f50-37316c11faa0",
    "env": {},
    "project_id": "5cc9194d63641d7d754afc71985ece99",
    "user_id": "ab2c70ed-2486-47ed-8a4e-e20ce1238fbb",
    "send_anonymous_usage_stats": true,
    "adapter_type": "snowflake"
  },
  "nodes": {
    "model.hrdm_ingest.submittal": {
      "raw_sql": "{{\n  config(\n    materialized = \"table\",\n    tags=['icims_raw2source']\n  )\n}}\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'submittal') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'sourceperson' then flatten_value:id::INTEGER end) AS sourceperson\n    , max(case when flatten_name = 'baseprofile' then flatten_value:id::INTEGER end) AS baseprofile\n    , max(case when flatten_name = 'field57146' then flatten_value::STRING end) AS field57146\n    , max(case when flatten_name = 'field31565' then flatten_value:defaultAttributes:Label::STRING end) AS field31565\n    , max(case when flatten_name = 'field31541' then flatten_value::STRING end) AS field31541\n    , max(case when flatten_name = 'field28057' then flatten_value::VARIANT end) AS field28057\n    , max(case when flatten_name = 'field31605' then flatten_value::VARIANT end) AS field31605\n    , max(case when flatten_name = 'field31536' then flatten_value::VARIANT end) AS field31536\n    , max(case when flatten_name = 'field29359' then flatten_value::VARIANT end) AS field29359\n    , max(case when flatten_name = 'field29324' then flatten_value:defaultAttributes:Label::STRING end) AS field29324\n    , max(case when flatten_name = 'field31532' then flatten_value:id::INTEGER end) AS field31532\n    , max(case when flatten_name = 'field28014' then flatten_value:defaultAttributes:Label::STRING end) AS field28014\n    , max(case when flatten_name = 'field31538' then flatten_value::STRING end) AS field31538\n    , max(case when flatten_name = 'field72067' then flatten_value:defaultAttributes:Label::STRING end) AS field72067\n    , max(case when flatten_name = 'sourceexternalid' then flatten_value::STRING end) AS sourceexternalid\n    , max(case when flatten_name = 'field59292' then flatten_value:defaultAttributes:Label::STRING end) AS field59292\n    , max(case when flatten_name = 'sourcename' then flatten_value::STRING end) AS sourcename\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'field57213' then flatten_value:defaultAttributes:Label::STRING end) AS field57213\n    , max(case when flatten_name = 'field57201' then flatten_value::STRING end) AS field57201\n    , max(case when flatten_name = 'assessmentresults' then flatten_value::VARIANT end) AS assessmentresults\n    , max(case when flatten_name = 'field31529' then flatten_value:defaultAttributes:Label::STRING end) AS field31529\n    , max(case when flatten_name = 'field31141' then flatten_value:defaultAttributes:Label::STRING end) AS field31141\n    , max(case when flatten_name = 'field29330' then flatten_value::STRING end) AS field29330\n    , max(case when flatten_name = 'field58091' then flatten_value::VARIANT end) AS field58091\n    , max(case when flatten_name = 'field31057' then flatten_value::VARIANT end) AS field31057\n    , max(case when flatten_name = 'field71367' then flatten_value::NUMBER end) AS field71367\n    , max(case when flatten_name = 'field56940' then flatten_value:defaultAttributes:Label::STRING end) AS field56940\n    , max(case when flatten_name = 'field57396' then flatten_value:defaultAttributes:Label::STRING end) AS field57396\n    , max(case when flatten_name = 'field56942' then flatten_value:defaultAttributes:Label::STRING end) AS field56942\n    , max(case when flatten_name = 'field57608' then flatten_value::VARIANT end) AS field57608\n    , max(case when flatten_name = 'field58722' then flatten_value::VARIANT end) AS field58722\n    , max(case when flatten_name = 'field57204' then flatten_value:defaultAttributes:Label::STRING end) AS field57204\n    , max(case when flatten_name = 'field57197' then flatten_value:defaultAttributes:Label::STRING end) AS field57197\n    , max(case when flatten_name = 'field30649' then flatten_value::VARIANT end) AS field30649\n    , max(case when flatten_name = 'field28067' then flatten_value::STRING end) AS field28067\n    , max(case when flatten_name = 'field61655' then flatten_value:defaultAttributes:Label::STRING end) AS field61655\n    , max(case when flatten_name = 'field30330' then flatten_value::VARIANT end) AS field30330\n    , max(case when flatten_name = 'acceptdeclinedate' then flatten_value::TIMESTAMP end) AS acceptdeclinedate\n    , max(case when flatten_name = 'field71087' then flatten_value:defaultAttributes:Label::STRING end) AS field71087\n    , max(case when flatten_name = 'field57304' then flatten_value::NUMBER end) AS field57304\n    , max(case when flatten_name = 'associatedprofile' then flatten_value:id::INTEGER end) AS associatedprofile\n    , max(case when flatten_name = 'field57145' then flatten_value:defaultAttributes:Label::STRING end) AS field57145\n    , max(case when flatten_name = 'field57147' then flatten_value::STRING end) AS field57147\n    , max(case when flatten_name = 'field57286' then flatten_value::STRING end) AS field57286\n    , max(case when flatten_name = 'field31717' then flatten_value:defaultAttributes:Label::STRING end) AS field31717\n    , max(case when flatten_name = 'field31567' then flatten_value:defaultAttributes:Label::STRING end) AS field31567\n    , max(case when flatten_name = 'field31117' then flatten_value::STRING end) AS field31117\n    , max(case when flatten_name = 'proposedstartdate' then flatten_value::TIMESTAMP end) AS proposedstartdate\n    , max(case when flatten_name = 'field62705' then flatten_value::STRING end) AS field62705\n    , max(case when flatten_name = 'field69194' then flatten_value:defaultAttributes:Label::STRING end) AS field69194\n    , max(case when flatten_name = 'counteroffer' then flatten_value::VARIANT end) AS counteroffer\n    , max(case when flatten_name = 'field31850' then flatten_value:defaultAttributes:Label::STRING end) AS field31850\n    , max(case when flatten_name = 'field59293' then flatten_value:defaultAttributes:Label::STRING end) AS field59293\n    , max(case when flatten_name = 'field31530' then flatten_value::STRING end) AS field31530\n    , max(case when flatten_name = 'field62125' then flatten_value::STRING end) AS field62125\n    , max(case when flatten_name = 'status' then flatten_value:defaultAttributes:Label::STRING end) AS status\n    , max(case when flatten_name = 'source' then flatten_value::STRING end) AS source\n    , max(case when flatten_name = 'field28017' then flatten_value:defaultAttributes:Label::STRING end) AS field28017\n    , max(case when flatten_name = 'field31528' then flatten_value:defaultAttributes:Label::STRING end) AS field31528\n    , max(case when flatten_name = 'field31601' then flatten_value::STRING end) AS field31601\n    , max(case when flatten_name = 'field69127' then flatten_value:defaultAttributes:Label::STRING end) AS field69127\n    , max(case when flatten_name = 'field62706' then flatten_value:defaultAttributes:Label::STRING end) AS field62706\n    , max(case when flatten_name = 'field57200' then flatten_value::TIMESTAMP end) AS field57200\n    , max(case when flatten_name = 'field69188' then flatten_value::VARIANT end) AS field69188\n    , max(case when flatten_name = 'field58265' then flatten_value:defaultAttributes:Label::STRING end) AS field58265\n    , max(case when flatten_name = 'field69189' then flatten_value:defaultAttributes:Label::STRING end) AS field69189\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'field57209' then flatten_value:defaultAttributes:Label::STRING end) AS field57209\n    , max(case when flatten_name = 'field31531' then flatten_value:defaultAttributes:Label::STRING end) AS field31531\n    , max(case when flatten_name = 'field31762' then flatten_value:defaultAttributes:Label::STRING end) AS field31762\n    , max(case when flatten_name = 'field30316' then flatten_value:defaultAttributes:Label::STRING end) AS field30316\n    , max(case when flatten_name = 'field29363' then flatten_value::VARIANT end) AS field29363\n    , max(case when flatten_name = 'field29365' then flatten_value::STRING end) AS field29365\n    , max(case when flatten_name = 'field58187' then flatten_value::NUMBER end) AS field58187\n    , max(case when flatten_name = 'field56513' then flatten_value::NUMBER end) AS field56513\n    , max(case when flatten_name = 'field31159' then flatten_value:defaultAttributes:Label::STRING end) AS field31159\n    , max(case when flatten_name = 'bonus' then flatten_value:defaultAttributes:Label::STRING end) AS bonus\n    , max(case when flatten_name = 'field31533' then flatten_value::STRING end) AS field31533\n    , max(case when flatten_name = 'field56871' then flatten_value::NUMBER end) AS field56871\n    , max(case when flatten_name = 'sourcechannel' then flatten_value::STRING end) AS sourcechannel\n    , max(case when flatten_name = 'field57207' then flatten_value:defaultAttributes:Label::STRING end) AS field57207\n    , max(case when flatten_name = 'field57194' then flatten_value::TIMESTAMP end) AS field57194\n    , max(case when flatten_name = 'field31527' then flatten_value:id::INTEGER end) AS field31527\n    , max(case when flatten_name = 'field28064' then flatten_value:defaultAttributes:Label::STRING end) AS field28064\n    , max(case when flatten_name = 'field31607' then flatten_value::STRING end) AS field31607\n    , max(case when flatten_name = 'field69937' then flatten_value:defaultAttributes:Label::STRING end) AS field69937\n    , max(case when flatten_name = 'field31138' then flatten_value::STRING end) AS field31138\n    , max(case when flatten_name = 'field29261' then flatten_value:defaultAttributes:Label::STRING end) AS field29261\n    , max(case when flatten_name = 'field31853' then flatten_value:defaultAttributes:Label::STRING end) AS field31853\n    , max(case when flatten_name = 'field59706' then flatten_value::TIMESTAMP end) AS field59706\n    , max(case when flatten_name = 'sourceorigin' then flatten_value:defaultAttributes:Label::STRING end) AS sourceorigin\n    , max(case when flatten_name = 'portal' then flatten_value::STRING end) AS portal\n    , max(case when flatten_name = 'sourcedevice' then flatten_value::STRING end) AS sourcedevice\n    , max(case when flatten_name = 'jibesessionid' then flatten_value::STRING end) AS jibesessionid\n    , max(case when flatten_name = 'field57148' then flatten_value::STRING end) AS field57148\n    , max(case when flatten_name = 'field30323' then flatten_value:defaultAttributes:Label::STRING end) AS field30323\n    , max(case when flatten_name = 'field29361' then flatten_value:id::INTEGER end) AS field29361\n    , max(case when flatten_name = 'field72013' then flatten_value::NUMBER end) AS field72013\n    , max(case when flatten_name = 'field29318' then flatten_value:defaultAttributes:Label::STRING end) AS field29318\n    , max(case when flatten_name = 'field31707' then flatten_value:defaultAttributes:Label::STRING end) AS field31707\n    , max(case when flatten_name = 'field31606' then flatten_value:defaultAttributes:Label::STRING end) AS field31606\n    , max(case when flatten_name = 'field56868' then flatten_value::NUMBER end) AS field56868\n    , max(case when flatten_name = 'field28025' then flatten_value:id::INTEGER end) AS field28025\n    , max(case when flatten_name = 'offerexpiration' then flatten_value::TIMESTAMP end) AS offerexpiration\n    , max(case when flatten_name = 'offeramount' then flatten_value::VARIANT end) AS offeramount\n    , max(case when flatten_name = 'field69190' then flatten_value:defaultAttributes:Label::STRING end) AS field69190\n    , max(case when flatten_name = 'field31539' then flatten_value::STRING end) AS field31539\n    , max(case when flatten_name = 'field63660' then flatten_value::STRING end) AS field63660\n    , max(case when flatten_name = 'field57211' then flatten_value:defaultAttributes:Label::STRING end) AS field57211\n    , max(case when flatten_name = 'field31534' then flatten_value:defaultAttributes:Label::STRING end) AS field31534\n    , max(case when flatten_name = 'field31604' then flatten_value::VARIANT end) AS field31604\n    , max(case when flatten_name = 'field31120' then flatten_value:defaultAttributes:Label::STRING end) AS field31120\n    , max(case when flatten_name = 'field61347' then flatten_value::STRING end) AS field61347\n    , max(case when flatten_name = 'field31562' then flatten_value:defaultAttributes:Label::STRING end) AS field31562\n    , max(case when flatten_name = 'field31711' then flatten_value::TIMESTAMP end) AS field31711\n    , max(case when flatten_name = 'field31526' then flatten_value:defaultAttributes:Label::STRING end) AS field31526\n    , max(case when flatten_name = 'field71676' then flatten_value:defaultAttributes:Label::STRING end) AS field71676\n    , max(case when flatten_name = 'relocationamount' then flatten_value:defaultAttributes:Label::STRING end) AS relocationamount\n    , max(case when flatten_name = 'field31190' then flatten_value::NUMBER end) AS field31190\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'field57198' then flatten_value::STRING end) AS field57198\n    , max(case when flatten_name = 'field61071' then flatten_value::STRING end) AS field61071\n    , max(case when flatten_name = 'field58039' then flatten_value:id::INTEGER end) AS field58039\n    , max(case when flatten_name = 'field28063' then flatten_value:defaultAttributes:Label::STRING end) AS field28063\n    , max(case when flatten_name = 'field58092' then flatten_value::VARIANT end) AS field58092\n    , max(case when flatten_name = 'field31603' then flatten_value::STRING end) AS field31603\n    , max(case when flatten_name = 'field28065' then flatten_value:defaultAttributes:Label::STRING end) AS field28065\n    , max(case when flatten_name = 'field31130' then flatten_value:defaultAttributes:Label::STRING end) AS field31130\n    , max(case when flatten_name = 'field31578' then flatten_value::VARIANT end) AS field31578\n    , max(case when flatten_name = 'field62704' then flatten_value::STRING end) AS field62704\n    , max(case when flatten_name = 'field56941' then flatten_value::STRING end) AS field56941\n    , max(case when flatten_name = 'field29265' then flatten_value:defaultAttributes:Label::STRING end) AS field29265\n    , max(case when flatten_name = 'field57203' then flatten_value::STRING end) AS field57203\n    , max(case when flatten_name = 'field31196' then flatten_value:defaultAttributes:Label::STRING end) AS field31196\n    , max(case when flatten_name = 'field31158' then flatten_value:defaultAttributes:Label::STRING end) AS field31158\n    , max(case when flatten_name = 'field58192' then flatten_value:defaultAttributes:Label::STRING end) AS field58192\n    , max(case when flatten_name = 'field29369' then flatten_value:defaultAttributes:Label::STRING end) AS field29369\n    , max(case when flatten_name = 'field31566' then flatten_value::TIMESTAMP end) AS field31566\n    , max(case when flatten_name = 'field69186' then flatten_value::STRING end) AS field69186\n    , max(case when flatten_name = 'field31580' then flatten_value::STRING end) AS field31580\n    , max(case when flatten_name = 'field31602' then flatten_value:defaultAttributes:Label::STRING end) AS field31602\n    , max(case when flatten_name = 'field31540' then flatten_value:defaultAttributes:Label::STRING end) AS field31540\n    , max(case when flatten_name = 'field57212' then flatten_value:defaultAttributes:Label::STRING end) AS field57212\n    , max(case when flatten_name = 'field57196' then flatten_value::STRING end) AS field57196\n    , max(case when flatten_name = 'field57205' then flatten_value::TIMESTAMP end) AS field57205\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'field57509' then flatten_value::VARIANT end) AS field57509\n    , max(case when flatten_name = 'field69163' then flatten_value:defaultAttributes:Label::STRING end) AS field69163\n    , max(case when flatten_name = 'field31134' then flatten_value:defaultAttributes:Label::STRING end) AS field31134\n    , max(case when flatten_name = 'field62007' then flatten_value::STRING end) AS field62007\n    , max(case when flatten_name = 'field31599' then flatten_value:id::INTEGER end) AS field31599\n    , max(case when flatten_name = 'field31155' then flatten_value:defaultAttributes:Label::STRING end) AS field31155\n    , max(case when flatten_name = 'field31187' then flatten_value::STRING end) AS field31187\n    , max(case when flatten_name = 'field57908' then flatten_value:defaultAttributes:Label::STRING end) AS field57908\n    , max(case when flatten_name = 'field57195' then flatten_value::TIMESTAMP end) AS field57195\n    , max(case when flatten_name = 'field57210' then flatten_value:defaultAttributes:Label::STRING end) AS field57210\n    , max(case when flatten_name = 'field63765' then flatten_value:defaultAttributes:Label::STRING end) AS field63765\n    , max(case when flatten_name = 'field28066' then flatten_value::TIMESTAMP end) AS field28066\n    , max(case when flatten_name = 'field32036' then flatten_value:id::INTEGER end) AS field32036\n    , max(case when flatten_name = 'field28062' then flatten_value::STRING end) AS field28062\n    , max(case when flatten_name = 'field57536' then flatten_value::VARIANT end) AS field57536\n    , max(case when flatten_name = 'field57214' then flatten_value::TIMESTAMP end) AS field57214\n    , max(case when flatten_name = 'field69187' then flatten_value::STRING end) AS field69187\n    , max(case when flatten_name = 'field29303' then flatten_value:defaultAttributes:Label::STRING end) AS field29303\n    , max(case when flatten_name = 'field29304' then flatten_value:defaultAttributes:Label::STRING end) AS field29304\n    , max(case when flatten_name = 'field56945' then flatten_value:defaultAttributes:Label::STRING end) AS field56945\n    , max(case when flatten_name = 'field57609' then flatten_value::TIMESTAMP end) AS field57609\n    , max(case when flatten_name = 'field57199' then flatten_value:defaultAttributes:Label::STRING end) AS field57199\n    , max(case when flatten_name = 'field57430' then flatten_value:id::INTEGER end) AS field57430\n    , max(case when flatten_name = 'field31600' then flatten_value::NUMBER end) AS field31600\n    , max(case when flatten_name = 'field31490' then flatten_value:defaultAttributes:Label::STRING end) AS field31490\n    , max(case when flatten_name = 'field31537' then flatten_value::STRING end) AS field31537\n    , max(case when flatten_name = 'field56943' then flatten_value:defaultAttributes:Label::STRING end) AS field56943\n    , max(case when flatten_name = 'field56944' then flatten_value:defaultAttributes:Label::STRING end) AS field56944\n    , max(case when flatten_name = 'field31183' then flatten_value::NUMBER end) AS field31183\n    , max(case when flatten_name = 'field57208' then flatten_value::STRING end) AS field57208\n    , max(case when flatten_name = 'field63728' then flatten_value:defaultAttributes:Label::STRING end) AS field63728\n    , max(case when flatten_name = 'jibeuserid' then flatten_value::STRING end) AS jibeuserid\n    , max(case when flatten_name = 'field31563' then flatten_value:id::INTEGER end) AS field31563\n    , max(case when flatten_name = 'field31535' then flatten_value:defaultAttributes:Label::STRING end) AS field31535\n    , max(case when flatten_name = 'field28015' then flatten_value::STRING end) AS field28015\n    , max(case when flatten_name = 'field63931' then flatten_value:defaultAttributes:Label::STRING end) AS field63931\n    , max(case when flatten_name = 'field31851' then flatten_value:defaultAttributes:Label::STRING end) AS field31851\n    , max(case when flatten_name = 'field31704' then flatten_value::TIMESTAMP end) AS field31704\n    , max(case when flatten_name = 'field61436' then flatten_value::STRING end) AS field61436\n    , max(case when flatten_name = 'field57542' then flatten_value::TIMESTAMP end) AS field57542\n    , max(case when flatten_name = 'field57202' then flatten_value:defaultAttributes:Label::STRING end) AS field57202\n    , max(case when flatten_name = 'field31564' then flatten_value::STRING end) AS field31564\n    , max(case when flatten_name = 'field31761' then flatten_value:defaultAttributes:Label::STRING end) AS field31761\n    , max(case when flatten_name = 'field31483' then flatten_value:defaultAttributes:Label::STRING end) AS field31483\n    , max(case when flatten_name = 'field29331' then flatten_value::STRING end) AS field29331\n    , max(case when flatten_name = 'sourceemail' then flatten_value::STRING end) AS sourceemail\n    , max(case when flatten_name = 'field60871' then flatten_value::STRING end) AS field60871\n    , max(case when flatten_name = 'field29360' then flatten_value:id::INTEGER end) AS field29360\n    , max(case when flatten_name = 'field31849' then flatten_value:defaultAttributes:Label::STRING end) AS field31849\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.submittal"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "submittal"
      ],
      "unique_id": "model.hrdm_ingest.submittal",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/submittal.sql",
      "original_file_path": "models/raw2source/icims/submittal.sql",
      "name": "submittal",
      "alias": "submittal",
      "checksum": {
        "name": "sha256",
        "checksum": "f74c3997303a9a68f8d38a850bdd5133d2708bd44e01188c8c43424b8467efd9"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "submittal"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/submittal.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/submittal.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.7531335,
      "compiled_sql": "\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.submittal d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'sourceperson' then flatten_value:id::INTEGER end) AS sourceperson\n    , max(case when flatten_name = 'baseprofile' then flatten_value:id::INTEGER end) AS baseprofile\n    , max(case when flatten_name = 'field57146' then flatten_value::STRING end) AS field57146\n    , max(case when flatten_name = 'field31565' then flatten_value:defaultAttributes:Label::STRING end) AS field31565\n    , max(case when flatten_name = 'field31541' then flatten_value::STRING end) AS field31541\n    , max(case when flatten_name = 'field28057' then flatten_value::VARIANT end) AS field28057\n    , max(case when flatten_name = 'field31605' then flatten_value::VARIANT end) AS field31605\n    , max(case when flatten_name = 'field31536' then flatten_value::VARIANT end) AS field31536\n    , max(case when flatten_name = 'field29359' then flatten_value::VARIANT end) AS field29359\n    , max(case when flatten_name = 'field29324' then flatten_value:defaultAttributes:Label::STRING end) AS field29324\n    , max(case when flatten_name = 'field31532' then flatten_value:id::INTEGER end) AS field31532\n    , max(case when flatten_name = 'field28014' then flatten_value:defaultAttributes:Label::STRING end) AS field28014\n    , max(case when flatten_name = 'field31538' then flatten_value::STRING end) AS field31538\n    , max(case when flatten_name = 'field72067' then flatten_value:defaultAttributes:Label::STRING end) AS field72067\n    , max(case when flatten_name = 'sourceexternalid' then flatten_value::STRING end) AS sourceexternalid\n    , max(case when flatten_name = 'field59292' then flatten_value:defaultAttributes:Label::STRING end) AS field59292\n    , max(case when flatten_name = 'sourcename' then flatten_value::STRING end) AS sourcename\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'field57213' then flatten_value:defaultAttributes:Label::STRING end) AS field57213\n    , max(case when flatten_name = 'field57201' then flatten_value::STRING end) AS field57201\n    , max(case when flatten_name = 'assessmentresults' then flatten_value::VARIANT end) AS assessmentresults\n    , max(case when flatten_name = 'field31529' then flatten_value:defaultAttributes:Label::STRING end) AS field31529\n    , max(case when flatten_name = 'field31141' then flatten_value:defaultAttributes:Label::STRING end) AS field31141\n    , max(case when flatten_name = 'field29330' then flatten_value::STRING end) AS field29330\n    , max(case when flatten_name = 'field58091' then flatten_value::VARIANT end) AS field58091\n    , max(case when flatten_name = 'field31057' then flatten_value::VARIANT end) AS field31057\n    , max(case when flatten_name = 'field71367' then flatten_value::NUMBER end) AS field71367\n    , max(case when flatten_name = 'field56940' then flatten_value:defaultAttributes:Label::STRING end) AS field56940\n    , max(case when flatten_name = 'field57396' then flatten_value:defaultAttributes:Label::STRING end) AS field57396\n    , max(case when flatten_name = 'field56942' then flatten_value:defaultAttributes:Label::STRING end) AS field56942\n    , max(case when flatten_name = 'field57608' then flatten_value::VARIANT end) AS field57608\n    , max(case when flatten_name = 'field58722' then flatten_value::VARIANT end) AS field58722\n    , max(case when flatten_name = 'field57204' then flatten_value:defaultAttributes:Label::STRING end) AS field57204\n    , max(case when flatten_name = 'field57197' then flatten_value:defaultAttributes:Label::STRING end) AS field57197\n    , max(case when flatten_name = 'field30649' then flatten_value::VARIANT end) AS field30649\n    , max(case when flatten_name = 'field28067' then flatten_value::STRING end) AS field28067\n    , max(case when flatten_name = 'field61655' then flatten_value:defaultAttributes:Label::STRING end) AS field61655\n    , max(case when flatten_name = 'field30330' then flatten_value::VARIANT end) AS field30330\n    , max(case when flatten_name = 'acceptdeclinedate' then flatten_value::TIMESTAMP end) AS acceptdeclinedate\n    , max(case when flatten_name = 'field71087' then flatten_value:defaultAttributes:Label::STRING end) AS field71087\n    , max(case when flatten_name = 'field57304' then flatten_value::NUMBER end) AS field57304\n    , max(case when flatten_name = 'associatedprofile' then flatten_value:id::INTEGER end) AS associatedprofile\n    , max(case when flatten_name = 'field57145' then flatten_value:defaultAttributes:Label::STRING end) AS field57145\n    , max(case when flatten_name = 'field57147' then flatten_value::STRING end) AS field57147\n    , max(case when flatten_name = 'field57286' then flatten_value::STRING end) AS field57286\n    , max(case when flatten_name = 'field31717' then flatten_value:defaultAttributes:Label::STRING end) AS field31717\n    , max(case when flatten_name = 'field31567' then flatten_value:defaultAttributes:Label::STRING end) AS field31567\n    , max(case when flatten_name = 'field31117' then flatten_value::STRING end) AS field31117\n    , max(case when flatten_name = 'proposedstartdate' then flatten_value::TIMESTAMP end) AS proposedstartdate\n    , max(case when flatten_name = 'field62705' then flatten_value::STRING end) AS field62705\n    , max(case when flatten_name = 'field69194' then flatten_value:defaultAttributes:Label::STRING end) AS field69194\n    , max(case when flatten_name = 'counteroffer' then flatten_value::VARIANT end) AS counteroffer\n    , max(case when flatten_name = 'field31850' then flatten_value:defaultAttributes:Label::STRING end) AS field31850\n    , max(case when flatten_name = 'field59293' then flatten_value:defaultAttributes:Label::STRING end) AS field59293\n    , max(case when flatten_name = 'field31530' then flatten_value::STRING end) AS field31530\n    , max(case when flatten_name = 'field62125' then flatten_value::STRING end) AS field62125\n    , max(case when flatten_name = 'status' then flatten_value:defaultAttributes:Label::STRING end) AS status\n    , max(case when flatten_name = 'source' then flatten_value::STRING end) AS source\n    , max(case when flatten_name = 'field28017' then flatten_value:defaultAttributes:Label::STRING end) AS field28017\n    , max(case when flatten_name = 'field31528' then flatten_value:defaultAttributes:Label::STRING end) AS field31528\n    , max(case when flatten_name = 'field31601' then flatten_value::STRING end) AS field31601\n    , max(case when flatten_name = 'field69127' then flatten_value:defaultAttributes:Label::STRING end) AS field69127\n    , max(case when flatten_name = 'field62706' then flatten_value:defaultAttributes:Label::STRING end) AS field62706\n    , max(case when flatten_name = 'field57200' then flatten_value::TIMESTAMP end) AS field57200\n    , max(case when flatten_name = 'field69188' then flatten_value::VARIANT end) AS field69188\n    , max(case when flatten_name = 'field58265' then flatten_value:defaultAttributes:Label::STRING end) AS field58265\n    , max(case when flatten_name = 'field69189' then flatten_value:defaultAttributes:Label::STRING end) AS field69189\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'field57209' then flatten_value:defaultAttributes:Label::STRING end) AS field57209\n    , max(case when flatten_name = 'field31531' then flatten_value:defaultAttributes:Label::STRING end) AS field31531\n    , max(case when flatten_name = 'field31762' then flatten_value:defaultAttributes:Label::STRING end) AS field31762\n    , max(case when flatten_name = 'field30316' then flatten_value:defaultAttributes:Label::STRING end) AS field30316\n    , max(case when flatten_name = 'field29363' then flatten_value::VARIANT end) AS field29363\n    , max(case when flatten_name = 'field29365' then flatten_value::STRING end) AS field29365\n    , max(case when flatten_name = 'field58187' then flatten_value::NUMBER end) AS field58187\n    , max(case when flatten_name = 'field56513' then flatten_value::NUMBER end) AS field56513\n    , max(case when flatten_name = 'field31159' then flatten_value:defaultAttributes:Label::STRING end) AS field31159\n    , max(case when flatten_name = 'bonus' then flatten_value:defaultAttributes:Label::STRING end) AS bonus\n    , max(case when flatten_name = 'field31533' then flatten_value::STRING end) AS field31533\n    , max(case when flatten_name = 'field56871' then flatten_value::NUMBER end) AS field56871\n    , max(case when flatten_name = 'sourcechannel' then flatten_value::STRING end) AS sourcechannel\n    , max(case when flatten_name = 'field57207' then flatten_value:defaultAttributes:Label::STRING end) AS field57207\n    , max(case when flatten_name = 'field57194' then flatten_value::TIMESTAMP end) AS field57194\n    , max(case when flatten_name = 'field31527' then flatten_value:id::INTEGER end) AS field31527\n    , max(case when flatten_name = 'field28064' then flatten_value:defaultAttributes:Label::STRING end) AS field28064\n    , max(case when flatten_name = 'field31607' then flatten_value::STRING end) AS field31607\n    , max(case when flatten_name = 'field69937' then flatten_value:defaultAttributes:Label::STRING end) AS field69937\n    , max(case when flatten_name = 'field31138' then flatten_value::STRING end) AS field31138\n    , max(case when flatten_name = 'field29261' then flatten_value:defaultAttributes:Label::STRING end) AS field29261\n    , max(case when flatten_name = 'field31853' then flatten_value:defaultAttributes:Label::STRING end) AS field31853\n    , max(case when flatten_name = 'field59706' then flatten_value::TIMESTAMP end) AS field59706\n    , max(case when flatten_name = 'sourceorigin' then flatten_value:defaultAttributes:Label::STRING end) AS sourceorigin\n    , max(case when flatten_name = 'portal' then flatten_value::STRING end) AS portal\n    , max(case when flatten_name = 'sourcedevice' then flatten_value::STRING end) AS sourcedevice\n    , max(case when flatten_name = 'jibesessionid' then flatten_value::STRING end) AS jibesessionid\n    , max(case when flatten_name = 'field57148' then flatten_value::STRING end) AS field57148\n    , max(case when flatten_name = 'field30323' then flatten_value:defaultAttributes:Label::STRING end) AS field30323\n    , max(case when flatten_name = 'field29361' then flatten_value:id::INTEGER end) AS field29361\n    , max(case when flatten_name = 'field72013' then flatten_value::NUMBER end) AS field72013\n    , max(case when flatten_name = 'field29318' then flatten_value:defaultAttributes:Label::STRING end) AS field29318\n    , max(case when flatten_name = 'field31707' then flatten_value:defaultAttributes:Label::STRING end) AS field31707\n    , max(case when flatten_name = 'field31606' then flatten_value:defaultAttributes:Label::STRING end) AS field31606\n    , max(case when flatten_name = 'field56868' then flatten_value::NUMBER end) AS field56868\n    , max(case when flatten_name = 'field28025' then flatten_value:id::INTEGER end) AS field28025\n    , max(case when flatten_name = 'offerexpiration' then flatten_value::TIMESTAMP end) AS offerexpiration\n    , max(case when flatten_name = 'offeramount' then flatten_value::VARIANT end) AS offeramount\n    , max(case when flatten_name = 'field69190' then flatten_value:defaultAttributes:Label::STRING end) AS field69190\n    , max(case when flatten_name = 'field31539' then flatten_value::STRING end) AS field31539\n    , max(case when flatten_name = 'field63660' then flatten_value::STRING end) AS field63660\n    , max(case when flatten_name = 'field57211' then flatten_value:defaultAttributes:Label::STRING end) AS field57211\n    , max(case when flatten_name = 'field31534' then flatten_value:defaultAttributes:Label::STRING end) AS field31534\n    , max(case when flatten_name = 'field31604' then flatten_value::VARIANT end) AS field31604\n    , max(case when flatten_name = 'field31120' then flatten_value:defaultAttributes:Label::STRING end) AS field31120\n    , max(case when flatten_name = 'field61347' then flatten_value::STRING end) AS field61347\n    , max(case when flatten_name = 'field31562' then flatten_value:defaultAttributes:Label::STRING end) AS field31562\n    , max(case when flatten_name = 'field31711' then flatten_value::TIMESTAMP end) AS field31711\n    , max(case when flatten_name = 'field31526' then flatten_value:defaultAttributes:Label::STRING end) AS field31526\n    , max(case when flatten_name = 'field71676' then flatten_value:defaultAttributes:Label::STRING end) AS field71676\n    , max(case when flatten_name = 'relocationamount' then flatten_value:defaultAttributes:Label::STRING end) AS relocationamount\n    , max(case when flatten_name = 'field31190' then flatten_value::NUMBER end) AS field31190\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'field57198' then flatten_value::STRING end) AS field57198\n    , max(case when flatten_name = 'field61071' then flatten_value::STRING end) AS field61071\n    , max(case when flatten_name = 'field58039' then flatten_value:id::INTEGER end) AS field58039\n    , max(case when flatten_name = 'field28063' then flatten_value:defaultAttributes:Label::STRING end) AS field28063\n    , max(case when flatten_name = 'field58092' then flatten_value::VARIANT end) AS field58092\n    , max(case when flatten_name = 'field31603' then flatten_value::STRING end) AS field31603\n    , max(case when flatten_name = 'field28065' then flatten_value:defaultAttributes:Label::STRING end) AS field28065\n    , max(case when flatten_name = 'field31130' then flatten_value:defaultAttributes:Label::STRING end) AS field31130\n    , max(case when flatten_name = 'field31578' then flatten_value::VARIANT end) AS field31578\n    , max(case when flatten_name = 'field62704' then flatten_value::STRING end) AS field62704\n    , max(case when flatten_name = 'field56941' then flatten_value::STRING end) AS field56941\n    , max(case when flatten_name = 'field29265' then flatten_value:defaultAttributes:Label::STRING end) AS field29265\n    , max(case when flatten_name = 'field57203' then flatten_value::STRING end) AS field57203\n    , max(case when flatten_name = 'field31196' then flatten_value:defaultAttributes:Label::STRING end) AS field31196\n    , max(case when flatten_name = 'field31158' then flatten_value:defaultAttributes:Label::STRING end) AS field31158\n    , max(case when flatten_name = 'field58192' then flatten_value:defaultAttributes:Label::STRING end) AS field58192\n    , max(case when flatten_name = 'field29369' then flatten_value:defaultAttributes:Label::STRING end) AS field29369\n    , max(case when flatten_name = 'field31566' then flatten_value::TIMESTAMP end) AS field31566\n    , max(case when flatten_name = 'field69186' then flatten_value::STRING end) AS field69186\n    , max(case when flatten_name = 'field31580' then flatten_value::STRING end) AS field31580\n    , max(case when flatten_name = 'field31602' then flatten_value:defaultAttributes:Label::STRING end) AS field31602\n    , max(case when flatten_name = 'field31540' then flatten_value:defaultAttributes:Label::STRING end) AS field31540\n    , max(case when flatten_name = 'field57212' then flatten_value:defaultAttributes:Label::STRING end) AS field57212\n    , max(case when flatten_name = 'field57196' then flatten_value::STRING end) AS field57196\n    , max(case when flatten_name = 'field57205' then flatten_value::TIMESTAMP end) AS field57205\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'field57509' then flatten_value::VARIANT end) AS field57509\n    , max(case when flatten_name = 'field69163' then flatten_value:defaultAttributes:Label::STRING end) AS field69163\n    , max(case when flatten_name = 'field31134' then flatten_value:defaultAttributes:Label::STRING end) AS field31134\n    , max(case when flatten_name = 'field62007' then flatten_value::STRING end) AS field62007\n    , max(case when flatten_name = 'field31599' then flatten_value:id::INTEGER end) AS field31599\n    , max(case when flatten_name = 'field31155' then flatten_value:defaultAttributes:Label::STRING end) AS field31155\n    , max(case when flatten_name = 'field31187' then flatten_value::STRING end) AS field31187\n    , max(case when flatten_name = 'field57908' then flatten_value:defaultAttributes:Label::STRING end) AS field57908\n    , max(case when flatten_name = 'field57195' then flatten_value::TIMESTAMP end) AS field57195\n    , max(case when flatten_name = 'field57210' then flatten_value:defaultAttributes:Label::STRING end) AS field57210\n    , max(case when flatten_name = 'field63765' then flatten_value:defaultAttributes:Label::STRING end) AS field63765\n    , max(case when flatten_name = 'field28066' then flatten_value::TIMESTAMP end) AS field28066\n    , max(case when flatten_name = 'field32036' then flatten_value:id::INTEGER end) AS field32036\n    , max(case when flatten_name = 'field28062' then flatten_value::STRING end) AS field28062\n    , max(case when flatten_name = 'field57536' then flatten_value::VARIANT end) AS field57536\n    , max(case when flatten_name = 'field57214' then flatten_value::TIMESTAMP end) AS field57214\n    , max(case when flatten_name = 'field69187' then flatten_value::STRING end) AS field69187\n    , max(case when flatten_name = 'field29303' then flatten_value:defaultAttributes:Label::STRING end) AS field29303\n    , max(case when flatten_name = 'field29304' then flatten_value:defaultAttributes:Label::STRING end) AS field29304\n    , max(case when flatten_name = 'field56945' then flatten_value:defaultAttributes:Label::STRING end) AS field56945\n    , max(case when flatten_name = 'field57609' then flatten_value::TIMESTAMP end) AS field57609\n    , max(case when flatten_name = 'field57199' then flatten_value:defaultAttributes:Label::STRING end) AS field57199\n    , max(case when flatten_name = 'field57430' then flatten_value:id::INTEGER end) AS field57430\n    , max(case when flatten_name = 'field31600' then flatten_value::NUMBER end) AS field31600\n    , max(case when flatten_name = 'field31490' then flatten_value:defaultAttributes:Label::STRING end) AS field31490\n    , max(case when flatten_name = 'field31537' then flatten_value::STRING end) AS field31537\n    , max(case when flatten_name = 'field56943' then flatten_value:defaultAttributes:Label::STRING end) AS field56943\n    , max(case when flatten_name = 'field56944' then flatten_value:defaultAttributes:Label::STRING end) AS field56944\n    , max(case when flatten_name = 'field31183' then flatten_value::NUMBER end) AS field31183\n    , max(case when flatten_name = 'field57208' then flatten_value::STRING end) AS field57208\n    , max(case when flatten_name = 'field63728' then flatten_value:defaultAttributes:Label::STRING end) AS field63728\n    , max(case when flatten_name = 'jibeuserid' then flatten_value::STRING end) AS jibeuserid\n    , max(case when flatten_name = 'field31563' then flatten_value:id::INTEGER end) AS field31563\n    , max(case when flatten_name = 'field31535' then flatten_value:defaultAttributes:Label::STRING end) AS field31535\n    , max(case when flatten_name = 'field28015' then flatten_value::STRING end) AS field28015\n    , max(case when flatten_name = 'field63931' then flatten_value:defaultAttributes:Label::STRING end) AS field63931\n    , max(case when flatten_name = 'field31851' then flatten_value:defaultAttributes:Label::STRING end) AS field31851\n    , max(case when flatten_name = 'field31704' then flatten_value::TIMESTAMP end) AS field31704\n    , max(case when flatten_name = 'field61436' then flatten_value::STRING end) AS field61436\n    , max(case when flatten_name = 'field57542' then flatten_value::TIMESTAMP end) AS field57542\n    , max(case when flatten_name = 'field57202' then flatten_value:defaultAttributes:Label::STRING end) AS field57202\n    , max(case when flatten_name = 'field31564' then flatten_value::STRING end) AS field31564\n    , max(case when flatten_name = 'field31761' then flatten_value:defaultAttributes:Label::STRING end) AS field31761\n    , max(case when flatten_name = 'field31483' then flatten_value:defaultAttributes:Label::STRING end) AS field31483\n    , max(case when flatten_name = 'field29331' then flatten_value::STRING end) AS field29331\n    , max(case when flatten_name = 'sourceemail' then flatten_value::STRING end) AS sourceemail\n    , max(case when flatten_name = 'field60871' then flatten_value::STRING end) AS field60871\n    , max(case when flatten_name = 'field29360' then flatten_value:id::INTEGER end) AS field29360\n    , max(case when flatten_name = 'field31849' then flatten_value:defaultAttributes:Label::STRING end) AS field31849\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.submittal"
    },
    "model.hrdm_ingest.sourceworkflow": {
      "raw_sql": "{{\n  config(\n    materialized = \"table\",\n    tags=['icims_raw2source']\n  )\n}}\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'sourceworkflow') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'sourcename' then flatten_value:defaultAttributes:Label::STRING end) AS sourcename\n    , max(case when flatten_name = 'baseprofile' then flatten_value:id::INTEGER end) AS baseprofile\n    , max(case when flatten_name = 'sourceperson' then flatten_value:id::INTEGER end) AS sourceperson\n    , max(case when flatten_name = 'status' then flatten_value:defaultAttributes:Label::STRING end) AS status\n    , max(case when flatten_name = 'source' then flatten_value:defaultAttributes:Label::STRING end) AS source\n    , max(case when flatten_name = 'field61046' then flatten_value:id::INTEGER end) AS field61046\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'sourceorigin' then flatten_value:defaultAttributes:Label::STRING end) AS sourceorigin\n    , max(case when flatten_name = 'vendorname' then flatten_value::STRING end) AS vendorname\n    , max(case when flatten_name = 'associatedprofile' then flatten_value:id::INTEGER end) AS associatedprofile\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.sourceworkflow"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "sourceworkflow"
      ],
      "unique_id": "model.hrdm_ingest.sourceworkflow",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/sourceworkflow.sql",
      "original_file_path": "models/raw2source/icims/sourceworkflow.sql",
      "name": "sourceworkflow",
      "alias": "sourceworkflow",
      "checksum": {
        "name": "sha256",
        "checksum": "d21cbbaf09a0c7f941fb31dfe243b564ef1af0ce4f4c4cea05a675a378988886"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "sourceworkflow"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/sourceworkflow.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/sourceworkflow.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.7937894,
      "compiled_sql": "\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.sourceworkflow d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'sourcename' then flatten_value:defaultAttributes:Label::STRING end) AS sourcename\n    , max(case when flatten_name = 'baseprofile' then flatten_value:id::INTEGER end) AS baseprofile\n    , max(case when flatten_name = 'sourceperson' then flatten_value:id::INTEGER end) AS sourceperson\n    , max(case when flatten_name = 'status' then flatten_value:defaultAttributes:Label::STRING end) AS status\n    , max(case when flatten_name = 'source' then flatten_value:defaultAttributes:Label::STRING end) AS source\n    , max(case when flatten_name = 'field61046' then flatten_value:id::INTEGER end) AS field61046\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'sourceorigin' then flatten_value:defaultAttributes:Label::STRING end) AS sourceorigin\n    , max(case when flatten_name = 'vendorname' then flatten_value::STRING end) AS vendorname\n    , max(case when flatten_name = 'associatedprofile' then flatten_value:id::INTEGER end) AS associatedprofile\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.sourceworkflow"
    },
    "model.hrdm_ingest.room": {
      "raw_sql": "{{\n  config(\n    materialized = \"table\",\n    tags=['icims_raw2source']\n  )\n}}\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'room') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'email' then flatten_value::STRING end) AS email\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'title' then flatten_value::STRING end) AS title\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.room"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "room"
      ],
      "unique_id": "model.hrdm_ingest.room",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/room.sql",
      "original_file_path": "models/raw2source/icims/room.sql",
      "name": "room",
      "alias": "room",
      "checksum": {
        "name": "sha256",
        "checksum": "908588c13ecfd9bde244cd75069f689aa98eb4a7a7562289c23ab685a9f155d9"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "room"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/room.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/room.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.8378677,
      "compiled_sql": "\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.room d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'email' then flatten_value::STRING end) AS email\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'title' then flatten_value::STRING end) AS title\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.room"
    },
    "model.hrdm_ingest.icims_code_generator": {
      "raw_sql": "##  icims_raw_to_source is a code generator for ICIMS API download.  The execution is expected to fail and do not perform any data processing.\n##  It reads the sample data from {{ raw_table_name }}.raw_data.  This macro works only for ICIMS datastream APIs.\n##\n## Parameters:\n##    raw_table_name  -   Raw table name with JSON structure eg: hr_raw_qa.icims.submittal\n##    dbt_source_name -   Source file name in models/source/icims_raw.yml eg: idw_package.dynamic_source('icims_raw', 'submittal')\n##\n## Output file: dbt_ingest/target/run/hrdm_ingest/models/raw2source/icims/icims_code_generator.sql\n##\n## Usage:\n## 1. Enter into docker by executing the follwoing command in virtual environment\n##         ./run.sh it\n## 2. Run the icims_code_generator model within docker.\n##         dbt run --project-dir /app/dbt_ingest/ --target dev -m icims_code_generator\n## 3. The execution should fail and it is expected.  However, the code is generated in the following file.\n##         cat dbt_ingest/target/run/hrdm_ingest/models/raw2source/icims/icims_code_generator.sql\n\n\n{{ icims_raw_to_source('hr_raw_qa.icims.room', \"'icims_raw', 'room'\") }}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.hrdm_ingest.icims_raw_to_source",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement"
        ],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "icims_code_generator"
      ],
      "unique_id": "model.hrdm_ingest.icims_code_generator",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/icims_code_generator.sql",
      "original_file_path": "models/raw2source/icims/icims_code_generator.sql",
      "name": "icims_code_generator",
      "alias": "icims_code_generator",
      "checksum": {
        "name": "sha256",
        "checksum": "5f3838e53580eb2d8c0b8556a33b4b42914c73a26a16320aa4e77208c0c03fb2"
      },
      "tags": [
        "SOURCE",
        "ICIMS"
      ],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/icims_code_generator.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/icims_code_generator.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": "ICIMS",
        "materialized": "incremental",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.8462417,
      "compiled_sql": "##  icims_raw_to_source is a code generator for ICIMS API download.  The execution is expected to fail and do not perform any data processing.\n##  It reads the sample data from .raw_data.  This macro works only for ICIMS datastream APIs.\n##\n## Parameters:\n##    raw_table_name  -   Raw table name with JSON structure eg: hr_raw_qa.icims.submittal\n##    dbt_source_name -   Source file name in models/source/icims_raw.yml eg: idw_package.dynamic_source('icims_raw', 'submittal')\n##\n## Output file: dbt_ingest/target/run/hrdm_ingest/models/raw2source/icims/icims_code_generator.sql\n##\n## Usage:\n## 1. Enter into docker by executing the follwoing command in virtual environment\n##         ./run.sh it\n## 2. Run the icims_code_generator model within docker.\n##         dbt run --project-dir /app/dbt_ingest/ --target dev -m icims_code_generator\n## 3. The execution should fail and it is expected.  However, the code is generated in the following file.\n##         cat dbt_ingest/target/run/hrdm_ingest/models/raw2source/icims/icims_code_generator.sql\n\n\n\n\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'room') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'email' then flatten_value::STRING end) AS email\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'title' then flatten_value::STRING end) AS title\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.icims_code_generator"
    },
    "model.hrdm_ingest.talentpool": {
      "raw_sql": "{{\n  config(\n    materialized = \"table\",\n    tags=['icims_raw2source']\n  )\n}}\n\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'talentpool') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'overview' then flatten_value::STRING end) AS overview\n    , max(case when flatten_name = 'externalid' then flatten_value::STRING end) AS externalid\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'title' then flatten_value::STRING end) AS title\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'owner' then flatten_value:id::INTEGER end) AS owner\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.talentpool"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "talentpool"
      ],
      "unique_id": "model.hrdm_ingest.talentpool",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/talentpool.sql",
      "original_file_path": "models/raw2source/icims/talentpool.sql",
      "name": "talentpool",
      "alias": "talentpool",
      "checksum": {
        "name": "sha256",
        "checksum": "a41f34450ced7ed41a81d3ecd604476368ba2c34a35ba545ad0b93a522bf0b71"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "talentpool"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/talentpool.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/talentpool.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.8627868,
      "compiled_sql": "\n\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.talentpool d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'overview' then flatten_value::STRING end) AS overview\n    , max(case when flatten_name = 'externalid' then flatten_value::STRING end) AS externalid\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'title' then flatten_value::STRING end) AS title\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'owner' then flatten_value:id::INTEGER end) AS owner\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.talentpool"
    },
    "model.hrdm_ingest.connecteventworkflow": {
      "raw_sql": "{{\n  config(\n    materialized = \"table\",\n    tags=['icims_raw2source']\n  )\n}}\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'connecteventworkflow') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'baseprofile' then flatten_value:id::INTEGER end) AS baseprofile\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'associatedprofile' then flatten_value:id::INTEGER end) AS associatedprofile\n    , max(case when flatten_name = 'status' then flatten_value:defaultAttributes:Label::STRING end) AS status\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'attendance' then flatten_value:defaultAttributes:Label::STRING end) AS attendance\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.connecteventworkflow"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "connecteventworkflow"
      ],
      "unique_id": "model.hrdm_ingest.connecteventworkflow",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/connecteventworkflow.sql",
      "original_file_path": "models/raw2source/icims/connecteventworkflow.sql",
      "name": "connecteventworkflow",
      "alias": "connecteventworkflow",
      "checksum": {
        "name": "sha256",
        "checksum": "7e56ec11f96348466ee278a9e1d93b4667d57be1f2a55d6b9234c3063d081fa0"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "connecteventworkflow"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/connecteventworkflow.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/connecteventworkflow.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.8702967,
      "compiled_sql": "\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.connecteventworkflow d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'baseprofile' then flatten_value:id::INTEGER end) AS baseprofile\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'associatedprofile' then flatten_value:id::INTEGER end) AS associatedprofile\n    , max(case when flatten_name = 'status' then flatten_value:defaultAttributes:Label::STRING end) AS status\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'attendance' then flatten_value:defaultAttributes:Label::STRING end) AS attendance\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.connecteventworkflow"
    },
    "model.hrdm_ingest.company": {
      "raw_sql": "{{\n  config(\n    materialized = \"table\",\n    tags=['icims_raw2source']\n  )\n}}\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'company') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'name' then flatten_value::STRING end) AS name\n    , max(case when flatten_name = 'externalid' then flatten_value::STRING end) AS externalid\n    , max(case when flatten_name = 'field61991' then flatten_value:defaultAttributes:Label::STRING end) AS field61991\n    , max(case when flatten_name = 'field30416' then flatten_value::STRING end) AS field30416\n    , max(case when flatten_name = 'field30415' then flatten_value::STRING end) AS field30415\n    , max(case when flatten_name = 'field62851' then flatten_value::STRING end) AS field62851\n    , max(case when flatten_name = 'field27655' then flatten_value:defaultAttributes:Label::STRING end) AS field27655\n    , max(case when flatten_name = 'field30414' then flatten_value::STRING end) AS field30414\n    , max(case when flatten_name = 'field30410' then flatten_value::STRING end) AS field30410\n    , max(case when flatten_name = 'field30412' then flatten_value::STRING end) AS field30412\n    , max(case when flatten_name = 'field30413' then flatten_value::STRING end) AS field30413\n    , max(case when flatten_name = 'synopsis' then flatten_value::STRING end) AS synopsis\n    , max(case when flatten_name = 'i9classification' then flatten_value:defaultAttributes:Label::STRING end) AS i9classification\n    , max(case when flatten_name = 'field62979' then flatten_value::STRING end) AS field62979\n    , max(case when flatten_name = 'field62978' then flatten_value::STRING end) AS field62978\n    , max(case when flatten_name = 'field68748' then flatten_value::STRING end) AS field68748\n    , max(case when flatten_name = 'field30411' then flatten_value::STRING end) AS field30411\n    , max(case when flatten_name = 'field63187' then flatten_value::STRING end) AS field63187\n    , max(case when flatten_name = 'field58047' then flatten_value::STRING end) AS field58047\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'field30426' then flatten_value:id::INTEGER end) AS field30426\n    , max(case when flatten_name = 'fulltext' then flatten_value::STRING end) AS fulltext\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'field30389' then flatten_value::STRING end) AS field30389\n    , max(case when flatten_name = 'addresses' then flatten_value::STRING end) AS addresses\n    , max(case when flatten_name = 'field27846' then flatten_value:defaultAttributes:Label::STRING end) AS field27846\n    , max(case when flatten_name = 'field68934' then flatten_value::STRING end) AS field68934\n    , max(case when flatten_name = 'field61990' then flatten_value:defaultAttributes:Label::STRING end) AS field61990\n    , max(case when flatten_name = 'field27823' then flatten_value::STRING end) AS field27823\n    , max(case when flatten_name = 'field61992' then flatten_value:defaultAttributes:Label::STRING end) AS field61992\n    , max(case when flatten_name = 'field63938' then flatten_value::STRING end) AS field63938\n    , max(case when flatten_name = 'field30425' then flatten_value:id::INTEGER end) AS field30425\n    , max(case when flatten_name = 'field63937' then flatten_value::STRING end) AS field63937\n    , max(case when flatten_name = 'field27845' then flatten_value:defaultAttributes:Label::STRING end) AS field27845\n    , max(case when flatten_name = 'field68749' then flatten_value::STRING end) AS field68749\n    , max(case when flatten_name = 'field30417' then flatten_value::STRING end) AS field30417\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.company"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "company"
      ],
      "unique_id": "model.hrdm_ingest.company",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/company.sql",
      "original_file_path": "models/raw2source/icims/company.sql",
      "name": "company",
      "alias": "company",
      "checksum": {
        "name": "sha256",
        "checksum": "37095ed2924430c5dbe779cf63bdf770c4114cba172a0761de81dc4d976beb37"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "company"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/company.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/company.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.8783567,
      "compiled_sql": "\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.company d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'name' then flatten_value::STRING end) AS name\n    , max(case when flatten_name = 'externalid' then flatten_value::STRING end) AS externalid\n    , max(case when flatten_name = 'field61991' then flatten_value:defaultAttributes:Label::STRING end) AS field61991\n    , max(case when flatten_name = 'field30416' then flatten_value::STRING end) AS field30416\n    , max(case when flatten_name = 'field30415' then flatten_value::STRING end) AS field30415\n    , max(case when flatten_name = 'field62851' then flatten_value::STRING end) AS field62851\n    , max(case when flatten_name = 'field27655' then flatten_value:defaultAttributes:Label::STRING end) AS field27655\n    , max(case when flatten_name = 'field30414' then flatten_value::STRING end) AS field30414\n    , max(case when flatten_name = 'field30410' then flatten_value::STRING end) AS field30410\n    , max(case when flatten_name = 'field30412' then flatten_value::STRING end) AS field30412\n    , max(case when flatten_name = 'field30413' then flatten_value::STRING end) AS field30413\n    , max(case when flatten_name = 'synopsis' then flatten_value::STRING end) AS synopsis\n    , max(case when flatten_name = 'i9classification' then flatten_value:defaultAttributes:Label::STRING end) AS i9classification\n    , max(case when flatten_name = 'field62979' then flatten_value::STRING end) AS field62979\n    , max(case when flatten_name = 'field62978' then flatten_value::STRING end) AS field62978\n    , max(case when flatten_name = 'field68748' then flatten_value::STRING end) AS field68748\n    , max(case when flatten_name = 'field30411' then flatten_value::STRING end) AS field30411\n    , max(case when flatten_name = 'field63187' then flatten_value::STRING end) AS field63187\n    , max(case when flatten_name = 'field58047' then flatten_value::STRING end) AS field58047\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'field30426' then flatten_value:id::INTEGER end) AS field30426\n    , max(case when flatten_name = 'fulltext' then flatten_value::STRING end) AS fulltext\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'field30389' then flatten_value::STRING end) AS field30389\n    , max(case when flatten_name = 'addresses' then flatten_value::STRING end) AS addresses\n    , max(case when flatten_name = 'field27846' then flatten_value:defaultAttributes:Label::STRING end) AS field27846\n    , max(case when flatten_name = 'field68934' then flatten_value::STRING end) AS field68934\n    , max(case when flatten_name = 'field61990' then flatten_value:defaultAttributes:Label::STRING end) AS field61990\n    , max(case when flatten_name = 'field27823' then flatten_value::STRING end) AS field27823\n    , max(case when flatten_name = 'field61992' then flatten_value:defaultAttributes:Label::STRING end) AS field61992\n    , max(case when flatten_name = 'field63938' then flatten_value::STRING end) AS field63938\n    , max(case when flatten_name = 'field30425' then flatten_value:id::INTEGER end) AS field30425\n    , max(case when flatten_name = 'field63937' then flatten_value::STRING end) AS field63937\n    , max(case when flatten_name = 'field27845' then flatten_value:defaultAttributes:Label::STRING end) AS field27845\n    , max(case when flatten_name = 'field68749' then flatten_value::STRING end) AS field68749\n    , max(case when flatten_name = 'field30417' then flatten_value::STRING end) AS field30417\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.company"
    },
    "model.hrdm_ingest.connecteventworkflowsource": {
      "raw_sql": "{{\n  config(\n    materialized = \"table\",\n    tags=['icims_raw2source']\n  )\n}}\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'connecteventworkflowsource') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'talentpool' then flatten_value:id::INTEGER end) AS talentpool\n    , max(case when flatten_name = 'eventattendee' then flatten_value:id::INTEGER end) AS eventattendee\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.connecteventworkflowsource"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "connecteventworkflowsource"
      ],
      "unique_id": "model.hrdm_ingest.connecteventworkflowsource",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/connecteventworkflowsource.sql",
      "original_file_path": "models/raw2source/icims/connecteventworkflowsource.sql",
      "name": "connecteventworkflowsource",
      "alias": "connecteventworkflowsource",
      "checksum": {
        "name": "sha256",
        "checksum": "3a256b24d87a331eb8ed0819a17189ff578061d91b5cb9e17b46540aedc7d58b"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "connecteventworkflowsource"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/connecteventworkflowsource.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/connecteventworkflowsource.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.8862252,
      "compiled_sql": "\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.connecteventworkflowsource d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'talentpool' then flatten_value:id::INTEGER end) AS talentpool\n    , max(case when flatten_name = 'eventattendee' then flatten_value:id::INTEGER end) AS eventattendee\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.connecteventworkflowsource"
    },
    "model.hrdm_ingest.connectevent": {
      "raw_sql": "{{\n    config(\n            materialized=\"table\",\n            tags=['icims_raw2source']\n    )\n}}\n\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source('icims_raw', 'connectevent') }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'startdate' then flatten_value::TIMESTAMP end) AS startdate\n    , max(case when flatten_name = 'host' then flatten_value:defaultAttributes:Label::STRING end) AS host\n    , max(case when flatten_name = 'externalmessages' then flatten_value::STRING end) AS externalmessages\n    , max(case when flatten_name = 'additionaldetails' then flatten_value::STRING end) AS additionaldetails\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'category' then flatten_value:defaultAttributes:Label::STRING end) AS category\n    , max(case when flatten_name = 'enddate' then flatten_value::TIMESTAMP end) AS enddate\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'title' then flatten_value::STRING end) AS title\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'cost' then flatten_value:defaultAttributes:Label::STRING end) AS cost\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.icims_raw.connectevent"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "ICIMS",
        "database": null,
        "tags": [
          "SOURCE",
          "ICIMS",
          "icims_raw2source"
        ],
        "meta": {},
        "materialized": "table",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_ICIMS",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "icims",
        "connectevent"
      ],
      "unique_id": "model.hrdm_ingest.connectevent",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/icims/connectevent.sql",
      "original_file_path": "models/raw2source/icims/connectevent.sql",
      "name": "connectevent",
      "alias": "connectevent",
      "checksum": {
        "name": "sha256",
        "checksum": "5d87d15f160c0f1d2aab4b2ec43281757ac35ce09b533591de8824c0bde379d7"
      },
      "tags": [
        "SOURCE",
        "ICIMS",
        "icims_raw2source"
      ],
      "refs": [],
      "sources": [
        [
          "icims_raw",
          "connectevent"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/icims/connectevent.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/icims/connectevent.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "icims_raw2source"
        ],
        "materialized": "table",
        "schema": "ICIMS"
      },
      "created_at": 1650312442.893706,
      "compiled_sql": "\n\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM HR_RAW_QA.icims.connectevent d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated, max(case when flatten_name = 'startdate' then flatten_value::TIMESTAMP end) AS startdate\n    , max(case when flatten_name = 'host' then flatten_value:defaultAttributes:Label::STRING end) AS host\n    , max(case when flatten_name = 'externalmessages' then flatten_value::STRING end) AS externalmessages\n    , max(case when flatten_name = 'additionaldetails' then flatten_value::STRING end) AS additionaldetails\n    , max(case when flatten_name = 'updateddate' then flatten_value::TIMESTAMP end) AS updateddate\n    , max(case when flatten_name = 'updatedby' then flatten_value:id::INTEGER end) AS updatedby\n    , max(case when flatten_name = 'folder' then flatten_value:defaultAttributes:Label::STRING end) AS folder\n    , max(case when flatten_name = 'category' then flatten_value:defaultAttributes:Label::STRING end) AS category\n    , max(case when flatten_name = 'enddate' then flatten_value::TIMESTAMP end) AS enddate\n    , max(case when flatten_name = 'quicksearch' then flatten_value::STRING end) AS quicksearch\n    , max(case when flatten_name = 'title' then flatten_value::STRING end) AS title\n    , max(case when flatten_name = 'createddate' then flatten_value::TIMESTAMP end) AS createddate\n    , max(case when flatten_name = 'createdby' then flatten_value:id::INTEGER end) AS createdby\n    , max(case when flatten_name = 'cost' then flatten_value:defaultAttributes:Label::STRING end) AS cost\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_ICIMS.connectevent"
    },
    "model.hrdm_ingest.feedback_dimension": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'dimension_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.DESCRIPTION,\n                x.RUBRIC_ID,\n                x.SEQ,\n                x.IS_RATING_FIELD,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM {{ idw_package.dynamic_source('feedback_raw', 'ckapp_dimension_history') }} x\n        {% if is_incremental() %}\n                WHERE x._H2_SF_INSERTED >= (SELECT MAX(s.ETL_UPDATED_TIMESTAMP)::DATE FROM {{ this }} AS s)\n        {% endif %}\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.DESCRIPTION::string                  AS \"DESCRIPTION\"\n                ,x.RUBRIC_ID::integer                   AS RUBRIC_ID\n                ,x.SEQ::integer                         AS SEQ\n                ,x.IS_RATING_FIELD::boolean             AS IS_RATING_FIELD\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,\"DESCRIPTION\"\n                        ,RUBRIC_ID\n                        ,SEQ\n                        ,IS_RATING_FIELD  \n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n{% if is_incremental() %}\n,dimension_history_last_record AS(\n        SELECT\n                x.ID\n                ,x.NAME\n                ,x.DESCRIPTION\n                ,x.RUBRIC_ID\n                ,x.SEQ\n                ,x.IS_RATING_FIELD\n                ,x.ETL_UPDATED_TIMESTAMP\n                ,x.IS_DELETED_IN_SOURCE\n                ,x.TIMESTAMP_EFFECTIVE\n                ,x.ROW_HASH\n        FROM    {{ this }} AS x\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x.TIMESTAMP_EFFECTIVE ORDER BY x.TIMESTAMP_EFFECTIVE ASC) = 1\n)\n{% endif %}\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_RATING_FIELD\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n{% if is_incremental() %}\n        UNION\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_RATING_FIELD\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_last_record l\n        WHERE NOT EXISTS (\n                SELECT 1 FROM dimension_history_hash h\n                WHERE l.ID = h.ID\n                        AND l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_RATING_FIELD\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} AS dimension_key\n        ,ID\n        ,\"NAME\"\n        ,\"DESCRIPTION\"\n        ,RUBRIC_ID\n        ,SEQ\n        ,IS_RATING_FIELD\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.ckapp_dimension_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "dimension_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_dimension"
      ],
      "unique_id": "model.hrdm_ingest.feedback_dimension",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_dimension.sql",
      "original_file_path": "models/raw2source/feedback/feedback_dimension.sql",
      "name": "feedback_dimension",
      "alias": "feedback_dimension",
      "checksum": {
        "name": "sha256",
        "checksum": "fe0ea9bc54be14625ed4ff6e2ab43a8323a3340f3da87477049733a0a5474226"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "ckapp_dimension_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_dimension.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_dimension.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "dimension_key"
      },
      "created_at": 1650312442.9013197,
      "compiled_sql": "\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.DESCRIPTION,\n                x.RUBRIC_ID,\n                x.SEQ,\n                x.IS_RATING_FIELD,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM HR_RAW.feedback.ckapp_dimension_history x\n        \n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.DESCRIPTION::string                  AS \"DESCRIPTION\"\n                ,x.RUBRIC_ID::integer                   AS RUBRIC_ID\n                ,x.SEQ::integer                         AS SEQ\n                ,x.IS_RATING_FIELD::boolean             AS IS_RATING_FIELD\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,\"DESCRIPTION\"\n                        ,RUBRIC_ID\n                        ,SEQ\n                        ,IS_RATING_FIELD  \n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_RATING_FIELD\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_RATING_FIELD\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) AS dimension_key\n        ,ID\n        ,\"NAME\"\n        ,\"DESCRIPTION\"\n        ,RUBRIC_ID\n        ,SEQ\n        ,IS_RATING_FIELD\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_dimension"
    },
    "model.hrdm_ingest.feedback_rubric": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'rubric_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM {{ idw_package.dynamic_source('feedback_raw', 'ckapp_rubric_history') }} x\n        {% if is_incremental() %}\n                WHERE x._H2_SF_INSERTED >= (SELECT MAX(s.ETL_UPDATED_TIMESTAMP)::DATE FROM {{ this }} AS s)\n        {% endif %}\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n{% if is_incremental() %}\n,dimension_history_last_record AS(\n        SELECT\n                x.ID\n                ,x.NAME\n                ,x.ETL_UPDATED_TIMESTAMP\n                ,x.IS_DELETED_IN_SOURCE\n                ,x.TIMESTAMP_EFFECTIVE\n                ,x.ROW_HASH\n        FROM    {{ this }} AS x\n        QUALIFY row_number() OVER (PARTITION BY x.ID ORDER BY x.TIMESTAMP_EFFECTIVE ASC) = 1\n)\n{% endif %}\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n{% if is_incremental() %}\n        UNION\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_last_record l\n        WHERE NOT EXISTS (\n                SELECT 1 FROM dimension_history_hash h\n                WHERE l.ID = h.ID\n                        AND l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} AS rubric_key\n        ,ID\n        ,\"NAME\"\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.ckapp_rubric_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "rubric_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_rubric"
      ],
      "unique_id": "model.hrdm_ingest.feedback_rubric",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_rubric.sql",
      "original_file_path": "models/raw2source/feedback/feedback_rubric.sql",
      "name": "feedback_rubric",
      "alias": "feedback_rubric",
      "checksum": {
        "name": "sha256",
        "checksum": "756471de09c9bc19da1a57af0e455b89f661453d9681722b341265701015aa1a"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "ckapp_rubric_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_rubric.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_rubric.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "rubric_key"
      },
      "created_at": 1650312442.92071,
      "compiled_sql": "\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM HR_RAW.feedback.ckapp_rubric_history x\n        \n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) AS rubric_key\n        ,ID\n        ,\"NAME\"\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_rubric"
    },
    "model.hrdm_ingest.feedback_form_builder_form": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'form_builder_form_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.TYPE,\n                x.STATUS,\n                x.CREATED_ON,\n                x.IS_DELETED,\n                PARSE_JSON(x.FORM_STRUCTURE) AS FORM_STRUCTURE,\n                PARSE_JSON(x.META)           AS META,\n                PARSE_JSON(x.META):lastModifiedBy::string as LAST_MODIFIED_BY,\n                x.CREATED_BY_ID,\n                x.IS_ARCHIVED,\n                x.MODIFIED_BY_ID,\n                x.MODIFIED_ON,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM {{ idw_package.dynamic_source('feedback_raw', 'form_builder_form_history') }} x\n        {% if is_incremental() %}\n                WHERE x._H2_SF_INSERTED >= (SELECT MAX(s.ETL_UPDATED_TIMESTAMP)::DATE FROM {{ this }} AS s)\n        {% endif %}\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.TYPE::integer                        AS \"TYPE\"\n                ,x.STATUS::integer                      AS \"STATUS\"\n                ,x.CREATED_ON::timestamp_tz             AS CREATED_ON\n                ,x.IS_DELETED::boolean                  AS IS_DELETED\n                ,x.FORM_STRUCTURE::variant              AS FORM_STRUCTURE\n                ,x.META::variant                        AS META\n                ,x.LAST_MODIFIED_BY::string             AS LAST_MODIFIED_BY\n                ,x.CREATED_BY_ID::integer               AS CREATED_BY_ID\n                ,x.IS_ARCHIVED::boolean                 AS IS_ARCHIVED\n                ,x.MODIFIED_BY_ID::integer              AS MODIFIED_BY_ID\n                ,x.MODIFIED_ON::timestamp_tz            AS MODIFIED_ON\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,\"TYPE\"\n                        ,\"STATUS\"\n                        ,CREATED_ON\n                        ,IS_DELETED\n                        ,FORM_STRUCTURE\n                        ,META\n                        ,LAST_MODIFIED_BY\n                        ,CREATED_BY_ID\n                        ,IS_ARCHIVED\n                        ,MODIFIED_BY_ID\n                        ,MODIFIED_ON \n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n{% if is_incremental() %}\n,dimension_history_last_record AS(\n        SELECT\n                x.ID\n                ,x.NAME\n                ,x.TYPE\n                ,x.STATUS\n                ,x.CREATED_ON\n                ,x.IS_DELETED\n                ,x.FORM_STRUCTURE\n                ,x.META\n                ,x.LAST_MODIFIED_BY\n                ,x.CREATED_BY_ID\n                ,x.IS_ARCHIVED\n                ,x.MODIFIED_BY_ID\n                ,x.MODIFIED_ON\n                ,x.ETL_UPDATED_TIMESTAMP\n                ,x.IS_DELETED_IN_SOURCE\n                ,x.TIMESTAMP_EFFECTIVE\n                ,x.ROW_HASH\n        FROM    {{ this }} AS x\n        QUALIFY row_number() OVER (PARTITION BY x.ID ORDER BY x.TIMESTAMP_EFFECTIVE DESC) = 1\n)\n{% endif %}\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"TYPE\"\n                ,\"STATUS\"\n                ,CREATED_ON\n                ,IS_DELETED\n                ,FORM_STRUCTURE\n                ,META\n                ,LAST_MODIFIED_BY\n                ,CREATED_BY_ID\n                ,IS_ARCHIVED\n                ,MODIFIED_BY_ID\n                ,MODIFIED_ON \n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n{% if is_incremental() %}\n        UNION\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"TYPE\"\n                ,\"STATUS\"\n                ,CREATED_ON\n                ,IS_DELETED\n                ,FORM_STRUCTURE\n                ,META\n                ,LAST_MODIFIED_BY\n                ,CREATED_BY_ID\n                ,IS_ARCHIVED\n                ,MODIFIED_BY_ID\n                ,MODIFIED_ON \n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_last_record l\n        WHERE NOT EXISTS (\n                SELECT 1 FROM dimension_history_hash h\n                WHERE l.ID = h.ID\n                        AND l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"TYPE\"\n                ,\"STATUS\"\n                ,CREATED_ON\n                ,IS_DELETED\n                ,FORM_STRUCTURE\n                ,META\n                ,LAST_MODIFIED_BY\n                ,CREATED_BY_ID\n                ,IS_ARCHIVED\n                ,MODIFIED_BY_ID\n                ,MODIFIED_ON\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} AS form_builder_form_key\n        ,ID\n        ,\"NAME\"\n        ,\"TYPE\"\n        ,\"STATUS\"\n        ,CREATED_ON\n        ,IS_DELETED\n        ,FORM_STRUCTURE\n        ,META\n        ,LAST_MODIFIED_BY\n        ,CREATED_BY_ID\n        ,IS_ARCHIVED\n        ,MODIFIED_BY_ID\n        ,MODIFIED_ON \n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.form_builder_form_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "form_builder_form_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_form_builder_form"
      ],
      "unique_id": "model.hrdm_ingest.feedback_form_builder_form",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_form_builder_form.sql",
      "original_file_path": "models/raw2source/feedback/feedback_form_builder_form.sql",
      "name": "feedback_form_builder_form",
      "alias": "feedback_form_builder_form",
      "checksum": {
        "name": "sha256",
        "checksum": "6872845d9ec6a030cfcb5b86506bf2a876a1c48c586458d2e852441be5b0db3e"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "form_builder_form_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_form_builder_form.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_form_builder_form.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "form_builder_form_key"
      },
      "created_at": 1650312442.9295294,
      "compiled_sql": "\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.TYPE,\n                x.STATUS,\n                x.CREATED_ON,\n                x.IS_DELETED,\n                PARSE_JSON(x.FORM_STRUCTURE) AS FORM_STRUCTURE,\n                PARSE_JSON(x.META)           AS META,\n                PARSE_JSON(x.META):lastModifiedBy::string as LAST_MODIFIED_BY,\n                x.CREATED_BY_ID,\n                x.IS_ARCHIVED,\n                x.MODIFIED_BY_ID,\n                x.MODIFIED_ON,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM HR_RAW.feedback.form_builder_form_history x\n        \n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.TYPE::integer                        AS \"TYPE\"\n                ,x.STATUS::integer                      AS \"STATUS\"\n                ,x.CREATED_ON::timestamp_tz             AS CREATED_ON\n                ,x.IS_DELETED::boolean                  AS IS_DELETED\n                ,x.FORM_STRUCTURE::variant              AS FORM_STRUCTURE\n                ,x.META::variant                        AS META\n                ,x.LAST_MODIFIED_BY::string             AS LAST_MODIFIED_BY\n                ,x.CREATED_BY_ID::integer               AS CREATED_BY_ID\n                ,x.IS_ARCHIVED::boolean                 AS IS_ARCHIVED\n                ,x.MODIFIED_BY_ID::integer              AS MODIFIED_BY_ID\n                ,x.MODIFIED_ON::timestamp_tz            AS MODIFIED_ON\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,\"TYPE\"\n                        ,\"STATUS\"\n                        ,CREATED_ON\n                        ,IS_DELETED\n                        ,FORM_STRUCTURE\n                        ,META\n                        ,LAST_MODIFIED_BY\n                        ,CREATED_BY_ID\n                        ,IS_ARCHIVED\n                        ,MODIFIED_BY_ID\n                        ,MODIFIED_ON \n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"TYPE\"\n                ,\"STATUS\"\n                ,CREATED_ON\n                ,IS_DELETED\n                ,FORM_STRUCTURE\n                ,META\n                ,LAST_MODIFIED_BY\n                ,CREATED_BY_ID\n                ,IS_ARCHIVED\n                ,MODIFIED_BY_ID\n                ,MODIFIED_ON \n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,\"TYPE\"\n                ,\"STATUS\"\n                ,CREATED_ON\n                ,IS_DELETED\n                ,FORM_STRUCTURE\n                ,META\n                ,LAST_MODIFIED_BY\n                ,CREATED_BY_ID\n                ,IS_ARCHIVED\n                ,MODIFIED_BY_ID\n                ,MODIFIED_ON\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) AS form_builder_form_key\n        ,ID\n        ,\"NAME\"\n        ,\"TYPE\"\n        ,\"STATUS\"\n        ,CREATED_ON\n        ,IS_DELETED\n        ,FORM_STRUCTURE\n        ,META\n        ,LAST_MODIFIED_BY\n        ,CREATED_BY_ID\n        ,IS_ARCHIVED\n        ,MODIFIED_BY_ID\n        ,MODIFIED_ON \n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_form_builder_form"
    },
    "model.hrdm_ingest.feedback_function": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'function_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.ORGANIZATION_ID,\n                x.IS_ARCHIVED,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM {{ idw_package.dynamic_source('feedback_raw', 'ckapp_function_history') }} x\n        {% if is_incremental() %}\n                WHERE x._H2_SF_INSERTED >= (SELECT MAX(s.ETL_UPDATED_TIMESTAMP)::DATE FROM {{ this }} AS s)\n        {% endif %}\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.ORGANIZATION_ID::integer             AS ORGANIZATION_ID\n                ,x.IS_ARCHIVED::boolean                 AS IS_ARCHIVED\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,ORGANIZATION_ID\n                        ,IS_ARCHIVED  \n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n{% if is_incremental() %}\n,dimension_history_last_record AS(\n        SELECT\n                x.ID\n                ,x.NAME\n                ,x.ORGANIZATION_ID\n                ,x.IS_ARCHIVED\n                ,x.ETL_UPDATED_TIMESTAMP\n                ,x.IS_DELETED_IN_SOURCE\n                ,x.TIMESTAMP_EFFECTIVE\n                ,x.ROW_HASH\n        FROM    {{ this }} AS x\n        QUALIFY row_number() OVER (PARTITION BY x.ID ORDER BY x.TIMESTAMP_EFFECTIVE ASC) = 1\n)\n{% endif %}\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ORGANIZATION_ID\n                ,IS_ARCHIVED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n{% if is_incremental() %}\n        UNION\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ORGANIZATION_ID\n                ,IS_ARCHIVED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_last_record l\n        WHERE NOT EXISTS (\n                SELECT 1 FROM dimension_history_hash h\n                WHERE l.ID = h.ID\n                        AND l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ORGANIZATION_ID\n                ,IS_ARCHIVED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} AS function_key\n        ,ID\n        ,\"NAME\"\n        ,ORGANIZATION_ID\n        ,IS_ARCHIVED\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.ckapp_function_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "function_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_function"
      ],
      "unique_id": "model.hrdm_ingest.feedback_function",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_function.sql",
      "original_file_path": "models/raw2source/feedback/feedback_function.sql",
      "name": "feedback_function",
      "alias": "feedback_function",
      "checksum": {
        "name": "sha256",
        "checksum": "77569dbb95585eb4c2198ed00f8cda822dc19a8fdd8397af55e23dd6c222205c"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "ckapp_function_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_function.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_function.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "function_key"
      },
      "created_at": 1650312442.9387152,
      "compiled_sql": "\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.ORGANIZATION_ID,\n                x.IS_ARCHIVED,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM HR_RAW.feedback.ckapp_function_history x\n        \n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.ORGANIZATION_ID::integer             AS ORGANIZATION_ID\n                ,x.IS_ARCHIVED::boolean                 AS IS_ARCHIVED\n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,ORGANIZATION_ID\n                        ,IS_ARCHIVED  \n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ORGANIZATION_ID\n                ,IS_ARCHIVED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,ORGANIZATION_ID\n                ,IS_ARCHIVED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) AS function_key\n        ,ID\n        ,\"NAME\"\n        ,ORGANIZATION_ID\n        ,IS_ARCHIVED\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_function"
    },
    "model.hrdm_ingest.feedback_round": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'round_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nwith source_data as(\n        select\n                x.ID,\n                x.NAME,\n                x.SLUG,\n                x.CREATED,\n                x.LAST_UPDATED,\n                x.PEER_FEEDBACK_DUE,\n                x.REVIEWS_DUE,\n                x.SELF_EVALS_DUE,\n                x.LOCKED,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        from {{ idw_package.dynamic_source('feedback_raw', 'feedback_round_history') }} x\n        {% if is_incremental() %}\n                where x._H2_SF_INSERTED >= (select max(s.ETL_UPDATED_TIMESTAMP)::date from {{ this }} as s )\n        {% endif %}\n        qualify row_number() over (partition by x.ID, x._H2_BINLOG_TS_MS order by x._H2_BINLOG_TS_MS asc) = 1\n)\n\n,round_history_hash as (\n        select\n                x.ID::integer                               as ID\n                ,x.NAME::string                             as \"NAME\"\n                ,x.SLUG::string                             as SLUG\n                ,x.CREATED::timestamp_tz                    as CREATED_DATE\n                ,x.LAST_UPDATED::timestamp_tz               as LAST_UPDATED_DATE\n                ,x.PEER_FEEDBACK_DUE::timestamp_tz          as PEER_FEEDBACK_DUE_DATE\n                ,x.REVIEWS_DUE::timestamp_tz                as REVIEWS_DUE_DATE\n                ,x.SELF_EVALS_DUE::timestamp_tz             as SELF_EVALS_DUE_DATE\n                ,x.LOCKED::integer                          as IS_LOCKED\n                ,x._H2_SF_INSERTED::timestamp_tz            as ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean                  as IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz           as TIMESTAMP_EFFECTIVE\n                ,hash(\n                    ID,\n                    \"NAME\",\n                    SLUG,\n                    CREATED_DATE,\n                    LAST_UPDATED_DATE,\n                    PEER_FEEDBACK_DUE_DATE,\n                    REVIEWS_DUE_DATE,\n                    SELF_EVALS_DUE_DATE,\n                    IS_LOCKED\n                )                               as ROW_HASH\n        from source_data as x\n)\n\n{% if is_incremental() %}\n,round_history_last_record as(\n        select\n                x.ID,\n                x.NAME,\n                x.SLUG,\n                x.CREATED_DATE,\n                x.LAST_UPDATED_DATE,\n                x.PEER_FEEDBACK_DUE_DATE,\n                x.REVIEWS_DUE_DATE,\n                x.SELF_EVALS_DUE_DATE,\n                x.IS_LOCKED,\n                x.ETL_UPDATED_TIMESTAMP,\n                x.IS_DELETED_IN_SOURCE,\n                x.TIMESTAMP_EFFECTIVE,\n                x.ROW_HASH\n        from    {{ this }} as x\n        qualify row_number() over (partition by x.ID order by x.TIMESTAMP_EFFECTIVE desc) = 1\n)\n{% endif %}\n\n,final_new_records as (\n        select\n                ID,\n                \"NAME\",\n                SLUG,\n                CREATED_DATE,\n                LAST_UPDATED_DATE,\n                PEER_FEEDBACK_DUE_DATE,\n                REVIEWS_DUE_DATE,\n                SELF_EVALS_DUE_DATE,\n                IS_LOCKED,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH\n        from    round_history_hash\n{% if is_incremental() %}\n        union\n        select\n                ID,\n                \"NAME\",\n                SLUG,\n                CREATED_DATE,\n                LAST_UPDATED_DATE,\n                PEER_FEEDBACK_DUE_DATE,\n                REVIEWS_DUE_DATE,\n                SELF_EVALS_DUE_DATE,\n                IS_LOCKED,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH\n        from    round_history_last_record l\n        where not exists (\n                select 1 from round_history_hash h\n                where l.ID = h.ID\n                        and l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final as (\n        select\n                ID,\n                \"NAME\",\n                SLUG,\n                CREATED_DATE,\n                LAST_UPDATED_DATE,\n                PEER_FEEDBACK_DUE_DATE,\n                REVIEWS_DUE_DATE,\n                SELF_EVALS_DUE_DATE,\n                IS_LOCKED,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH,\n                case when lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        or lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE) is null\n                        then 1\n                end as ROW_CHANGE_FILTER\n        from final_new_records\n        qualify ROW_CHANGE_FILTER = 1\n)\n\nselect\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} as round_key,\n        ID,\n        \"NAME\",\n        SLUG,\n        CREATED_DATE,\n        LAST_UPDATED_DATE,\n        PEER_FEEDBACK_DUE_DATE,\n        REVIEWS_DUE_DATE,\n        SELF_EVALS_DUE_DATE,\n        IS_LOCKED,\n        ETL_UPDATED_TIMESTAMP,\n        IS_DELETED_IN_SOURCE,\n        TIMESTAMP_EFFECTIVE,\n        ROW_HASH\nfrom final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.feedback_round_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "round_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_round"
      ],
      "unique_id": "model.hrdm_ingest.feedback_round",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_round.sql",
      "original_file_path": "models/raw2source/feedback/feedback_round.sql",
      "name": "feedback_round",
      "alias": "feedback_round",
      "checksum": {
        "name": "sha256",
        "checksum": "daf161a15c1341406e78534f3e0c540192cf61100a8cb5034d419ca37f865b29"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "feedback_round_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_round.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_round.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "round_key"
      },
      "created_at": 1650312442.9483836,
      "compiled_sql": "\n\n\nwith source_data as(\n        select\n                x.ID,\n                x.NAME,\n                x.SLUG,\n                x.CREATED,\n                x.LAST_UPDATED,\n                x.PEER_FEEDBACK_DUE,\n                x.REVIEWS_DUE,\n                x.SELF_EVALS_DUE,\n                x.LOCKED,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        from HR_RAW.feedback.feedback_round_history x\n        \n        qualify row_number() over (partition by x.ID, x._H2_BINLOG_TS_MS order by x._H2_BINLOG_TS_MS asc) = 1\n)\n\n,round_history_hash as (\n        select\n                x.ID::integer                               as ID\n                ,x.NAME::string                             as \"NAME\"\n                ,x.SLUG::string                             as SLUG\n                ,x.CREATED::timestamp_tz                    as CREATED_DATE\n                ,x.LAST_UPDATED::timestamp_tz               as LAST_UPDATED_DATE\n                ,x.PEER_FEEDBACK_DUE::timestamp_tz          as PEER_FEEDBACK_DUE_DATE\n                ,x.REVIEWS_DUE::timestamp_tz                as REVIEWS_DUE_DATE\n                ,x.SELF_EVALS_DUE::timestamp_tz             as SELF_EVALS_DUE_DATE\n                ,x.LOCKED::integer                          as IS_LOCKED\n                ,x._H2_SF_INSERTED::timestamp_tz            as ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean                  as IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz           as TIMESTAMP_EFFECTIVE\n                ,hash(\n                    ID,\n                    \"NAME\",\n                    SLUG,\n                    CREATED_DATE,\n                    LAST_UPDATED_DATE,\n                    PEER_FEEDBACK_DUE_DATE,\n                    REVIEWS_DUE_DATE,\n                    SELF_EVALS_DUE_DATE,\n                    IS_LOCKED\n                )                               as ROW_HASH\n        from source_data as x\n)\n\n\n\n,final_new_records as (\n        select\n                ID,\n                \"NAME\",\n                SLUG,\n                CREATED_DATE,\n                LAST_UPDATED_DATE,\n                PEER_FEEDBACK_DUE_DATE,\n                REVIEWS_DUE_DATE,\n                SELF_EVALS_DUE_DATE,\n                IS_LOCKED,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH\n        from    round_history_hash\n        \n)\n\n,final as (\n        select\n                ID,\n                \"NAME\",\n                SLUG,\n                CREATED_DATE,\n                LAST_UPDATED_DATE,\n                PEER_FEEDBACK_DUE_DATE,\n                REVIEWS_DUE_DATE,\n                SELF_EVALS_DUE_DATE,\n                IS_LOCKED,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH,\n                case when lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        or lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE) is null\n                        then 1\n                end as ROW_CHANGE_FILTER\n        from final_new_records\n        qualify ROW_CHANGE_FILTER = 1\n)\n\nselect\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) as round_key,\n        ID,\n        \"NAME\",\n        SLUG,\n        CREATED_DATE,\n        LAST_UPDATED_DATE,\n        PEER_FEEDBACK_DUE_DATE,\n        REVIEWS_DUE_DATE,\n        SELF_EVALS_DUE_DATE,\n        IS_LOCKED,\n        ETL_UPDATED_TIMESTAMP,\n        IS_DELETED_IN_SOURCE,\n        TIMESTAMP_EFFECTIVE,\n        ROW_HASH\nfrom final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_round"
    },
    "model.hrdm_ingest.feedback_employee_ptl_snapshot": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'employee_ptl_snapshot_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nWITH source_data AS(\n        SELECT\n            x.ID,\n            x.SNAPSHOT_DATE,\n            x.PTL_SCORE,\n            x.IS_RECORDED,\n            x.AUTHOR_EMPLOYEE_ID,\n            x.CURRENT_JOB_PROFILE_ID,\n            x.EMPLOYEE_ID,\n            x.ROUND_ID,\n            x.CREATED_ON,\n            x._H2_SF_INSERTED,\n            x._H2_IS_DELETED,\n            x._H2_BINLOG_TS_MS\n        FROM {{ idw_package.dynamic_source('feedback_raw', 'feedback_employeeptlsnapshot_history') }} x\n        {% if is_incremental() %}\n                WHERE x._H2_SF_INSERTED >= (SELECT MAX(s.ETL_UPDATED_TIMESTAMP)::DATE FROM {{ this }} AS s)\n        {% endif %}\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n            x.ID::integer                           AS ID\n            ,x.SNAPSHOT_DATE::timestamp_tz          AS SNAPSHOT_DATE                        \n            ,x.PTL_SCORE::float                     AS PTL_SCORE\n            ,x.IS_RECORDED::boolean                 AS IS_RECORDED\n            ,x.AUTHOR_EMPLOYEE_ID::integer          AS AUTHOR_EMPLOYEE_ID\n            ,x.CURRENT_JOB_PROFILE_ID::integer      AS CURRENT_JOB_PROFILE_ID\n            ,x.EMPLOYEE_ID::integer                 AS EMPLOYEE_ID\n            ,x.ROUND_ID::integer                    AS ROUND_ID\n            ,x.CREATED_ON::timestamp_tz             AS CREATED_ON\n            ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n            ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n            ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n            ,HASH(\n                ID\n                ,x.SNAPSHOT_DATE                        \n                ,x.PTL_SCORE\n                ,x.IS_RECORDED\n                ,x.AUTHOR_EMPLOYEE_ID\n                ,x.CURRENT_JOB_PROFILE_ID\n                ,x.EMPLOYEE_ID\n                ,x.ROUND_ID\n                ,x.CREATED_ON\n            )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n{% if is_incremental() %}\n,dimension_history_last_record AS(\n        SELECT\n            x.ID\n            ,x.SNAPSHOT_DATE                        \n            ,x.PTL_SCORE\n            ,x.IS_RECORDED\n            ,x.AUTHOR_EMPLOYEE_ID\n            ,x.CURRENT_JOB_PROFILE_ID\n            ,x.EMPLOYEE_ID\n            ,x.ROUND_ID\n            ,x.CREATED_ON\n            ,x.ETL_UPDATED_TIMESTAMP\n            ,x.IS_DELETED_IN_SOURCE\n            ,x.TIMESTAMP_EFFECTIVE\n            ,x.ROW_HASH\n        FROM    {{ this }} AS x\n        QUALIFY row_number() OVER (PARTITION BY x.ID ORDER BY x.TIMESTAMP_EFFECTIVE DESC) = 1\n)\n{% endif %}\n\n,final_new_records AS (\n        SELECT\n            ID\n            ,SNAPSHOT_DATE                        \n            ,PTL_SCORE\n            ,IS_RECORDED\n            ,AUTHOR_EMPLOYEE_ID\n            ,CURRENT_JOB_PROFILE_ID\n            ,EMPLOYEE_ID\n            ,ROUND_ID\n            ,CREATED_ON\n            ,ETL_UPDATED_TIMESTAMP\n            ,IS_DELETED_IN_SOURCE\n            ,TIMESTAMP_EFFECTIVE\n            ,ROW_HASH\n        FROM    dimension_history_hash\n{% if is_incremental() %}\n        UNION\n        SELECT\n            ID\n            ,SNAPSHOT_DATE                        \n            ,PTL_SCORE\n            ,IS_RECORDED\n            ,AUTHOR_EMPLOYEE_ID\n            ,CURRENT_JOB_PROFILE_ID\n            ,EMPLOYEE_ID\n            ,ROUND_ID\n            ,CREATED_ON\n            ,ETL_UPDATED_TIMESTAMP\n            ,IS_DELETED_IN_SOURCE\n            ,TIMESTAMP_EFFECTIVE\n            ,ROW_HASH\n        FROM    dimension_history_last_record l\n        WHERE NOT EXISTS (\n                SELECT 1 FROM dimension_history_hash h\n                WHERE l.ID = h.ID\n                        AND l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final AS (\n        SELECT\n            ID\n            ,SNAPSHOT_DATE                        \n            ,PTL_SCORE\n            ,IS_RECORDED\n            ,AUTHOR_EMPLOYEE_ID\n            ,CURRENT_JOB_PROFILE_ID\n            ,EMPLOYEE_ID\n            ,ROUND_ID\n            ,CREATED_ON\n            ,ETL_UPDATED_TIMESTAMP\n            ,IS_DELETED_IN_SOURCE\n            ,TIMESTAMP_EFFECTIVE\n            ,ROW_HASH\n            ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                    <> ROW_HASH\n                    OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                    THEN 1\n            END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n    {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} AS employee_ptl_snapshot_key\n    ,ID\n    ,SNAPSHOT_DATE                        \n    ,PTL_SCORE\n    ,IS_RECORDED\n    ,AUTHOR_EMPLOYEE_ID\n    ,CURRENT_JOB_PROFILE_ID\n    ,EMPLOYEE_ID\n    ,ROUND_ID\n    ,CREATED_ON\n    ,ETL_UPDATED_TIMESTAMP\n    ,IS_DELETED_IN_SOURCE\n    ,TIMESTAMP_EFFECTIVE\n    ,ROW_HASH\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.feedback_employeeptlsnapshot_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "employee_ptl_snapshot_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_employee_ptl_snapshot"
      ],
      "unique_id": "model.hrdm_ingest.feedback_employee_ptl_snapshot",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_employee_ptl_snapshot.sql",
      "original_file_path": "models/raw2source/feedback/feedback_employee_ptl_snapshot.sql",
      "name": "feedback_employee_ptl_snapshot",
      "alias": "feedback_employee_ptl_snapshot",
      "checksum": {
        "name": "sha256",
        "checksum": "46d74aab68d15721840d6b1b1788b41d3a2045f5315689cda78dbd51bea70568"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "feedback_employeeptlsnapshot_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_employee_ptl_snapshot.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_employee_ptl_snapshot.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "employee_ptl_snapshot_key"
      },
      "created_at": 1650312442.957426,
      "compiled_sql": "\n\n\nWITH source_data AS(\n        SELECT\n            x.ID,\n            x.SNAPSHOT_DATE,\n            x.PTL_SCORE,\n            x.IS_RECORDED,\n            x.AUTHOR_EMPLOYEE_ID,\n            x.CURRENT_JOB_PROFILE_ID,\n            x.EMPLOYEE_ID,\n            x.ROUND_ID,\n            x.CREATED_ON,\n            x._H2_SF_INSERTED,\n            x._H2_IS_DELETED,\n            x._H2_BINLOG_TS_MS\n        FROM HR_RAW.feedback.feedback_employeeptlsnapshot_history x\n        \n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n            x.ID::integer                           AS ID\n            ,x.SNAPSHOT_DATE::timestamp_tz          AS SNAPSHOT_DATE                        \n            ,x.PTL_SCORE::float                     AS PTL_SCORE\n            ,x.IS_RECORDED::boolean                 AS IS_RECORDED\n            ,x.AUTHOR_EMPLOYEE_ID::integer          AS AUTHOR_EMPLOYEE_ID\n            ,x.CURRENT_JOB_PROFILE_ID::integer      AS CURRENT_JOB_PROFILE_ID\n            ,x.EMPLOYEE_ID::integer                 AS EMPLOYEE_ID\n            ,x.ROUND_ID::integer                    AS ROUND_ID\n            ,x.CREATED_ON::timestamp_tz             AS CREATED_ON\n            ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n            ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n            ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n            ,HASH(\n                ID\n                ,x.SNAPSHOT_DATE                        \n                ,x.PTL_SCORE\n                ,x.IS_RECORDED\n                ,x.AUTHOR_EMPLOYEE_ID\n                ,x.CURRENT_JOB_PROFILE_ID\n                ,x.EMPLOYEE_ID\n                ,x.ROUND_ID\n                ,x.CREATED_ON\n            )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n\n\n,final_new_records AS (\n        SELECT\n            ID\n            ,SNAPSHOT_DATE                        \n            ,PTL_SCORE\n            ,IS_RECORDED\n            ,AUTHOR_EMPLOYEE_ID\n            ,CURRENT_JOB_PROFILE_ID\n            ,EMPLOYEE_ID\n            ,ROUND_ID\n            ,CREATED_ON\n            ,ETL_UPDATED_TIMESTAMP\n            ,IS_DELETED_IN_SOURCE\n            ,TIMESTAMP_EFFECTIVE\n            ,ROW_HASH\n        FROM    dimension_history_hash\n        \n)\n\n,final AS (\n        SELECT\n            ID\n            ,SNAPSHOT_DATE                        \n            ,PTL_SCORE\n            ,IS_RECORDED\n            ,AUTHOR_EMPLOYEE_ID\n            ,CURRENT_JOB_PROFILE_ID\n            ,EMPLOYEE_ID\n            ,ROUND_ID\n            ,CREATED_ON\n            ,ETL_UPDATED_TIMESTAMP\n            ,IS_DELETED_IN_SOURCE\n            ,TIMESTAMP_EFFECTIVE\n            ,ROW_HASH\n            ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                    <> ROW_HASH\n                    OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                    THEN 1\n            END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n    md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) AS employee_ptl_snapshot_key\n    ,ID\n    ,SNAPSHOT_DATE                        \n    ,PTL_SCORE\n    ,IS_RECORDED\n    ,AUTHOR_EMPLOYEE_ID\n    ,CURRENT_JOB_PROFILE_ID\n    ,EMPLOYEE_ID\n    ,ROUND_ID\n    ,CREATED_ON\n    ,ETL_UPDATED_TIMESTAMP\n    ,IS_DELETED_IN_SOURCE\n    ,TIMESTAMP_EFFECTIVE\n    ,ROW_HASH\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_employee_ptl_snapshot"
    },
    "model.hrdm_ingest.feedback_level": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'level_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nwith source_data as(\n        select\n                x.ID,\n                x.NAME,\n                x.DESCRIPTION,\n                x.RUBRIC_ID,\n                x.SEQ,\n                x.IS_SPECIFIED,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        from {{ idw_package.dynamic_source('feedback_raw', 'ckapp_level_history') }} x\n        {% if is_incremental() %}\n                where x._H2_SF_INSERTED >= (select max(s.ETL_UPDATED_TIMESTAMP)::date from {{ this }} as s )\n        {% endif %}\n        qualify row_number() over (partition by x.ID, x._H2_BINLOG_TS_MS order by x._H2_BINLOG_TS_MS asc) = 1\n)\n\n,level_history_hash as (\n        select\n                x.ID::integer                           as ID\n                ,x.NAME::string                         as \"NAME\"\n                ,x.DESCRIPTION::string                  as \"DESCRIPTION\"\n                ,x.RUBRIC_ID::integer                   as RUBRIC_ID\n                ,x.SEQ::integer                         as SEQ\n                ,x.IS_SPECIFIED::boolean                as IS_SPECIFIED\n                ,x._H2_SF_INSERTED::timestamp_tz        as ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              as IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       as TIMESTAMP_EFFECTIVE\n                ,hash(\n                        ID\n                        ,\"NAME\"\n                        ,\"DESCRIPTION\"\n                        ,RUBRIC_ID\n                        ,SEQ\n                        ,IS_SPECIFIED  \n                )                               as ROW_HASH\n        from source_data as x\n)\n\n{% if is_incremental() %}\n,level_history_last_record as(\n        select\n                x.ID\n                ,x.NAME\n                ,x.DESCRIPTION\n                ,x.RUBRIC_ID\n                ,x.SEQ\n                ,x.IS_SPECIFIED\n                ,x.ETL_UPDATED_TIMESTAMP\n                ,x.IS_DELETED_IN_SOURCE\n                ,x.TIMESTAMP_EFFECTIVE\n                ,x.ROW_HASH\n        from    {{ this }} as x\n        qualify row_number() over (partition by x.ID order by x.TIMESTAMP_EFFECTIVE desc) = 1\n)\n{% endif %}\n\n,final_new_records as (\n        select\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_SPECIFIED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        from    level_history_hash\n{% if is_incremental() %}\n        union\n        select\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_SPECIFIED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        from    level_history_last_record l\n        where not exists (\n                select 1 from level_history_hash h\n                where l.ID = h.ID\n                        and l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final as (\n        select\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_SPECIFIED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,case when lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        or lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE) is null\n                        then 1\n                end as ROW_CHANGE_FILTER\n        from final_new_records\n        qualify ROW_CHANGE_FILTER = 1\n)\n\nselect\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} as level_key\n        ,ID\n        ,\"NAME\"\n        ,\"DESCRIPTION\"\n        ,RUBRIC_ID\n        ,SEQ\n        ,IS_SPECIFIED\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nfrom final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.ckapp_level_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "level_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_level"
      ],
      "unique_id": "model.hrdm_ingest.feedback_level",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_level.sql",
      "original_file_path": "models/raw2source/feedback/feedback_level.sql",
      "name": "feedback_level",
      "alias": "feedback_level",
      "checksum": {
        "name": "sha256",
        "checksum": "1cfec7a83850900d7c86fe9537d20828ccfbef269c6793670f40d771a47ff8aa"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "ckapp_level_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_level.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_level.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "level_key"
      },
      "created_at": 1650312442.9664521,
      "compiled_sql": "\n\n\nwith source_data as(\n        select\n                x.ID,\n                x.NAME,\n                x.DESCRIPTION,\n                x.RUBRIC_ID,\n                x.SEQ,\n                x.IS_SPECIFIED,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        from HR_RAW.feedback.ckapp_level_history x\n        \n        qualify row_number() over (partition by x.ID, x._H2_BINLOG_TS_MS order by x._H2_BINLOG_TS_MS asc) = 1\n)\n\n,level_history_hash as (\n        select\n                x.ID::integer                           as ID\n                ,x.NAME::string                         as \"NAME\"\n                ,x.DESCRIPTION::string                  as \"DESCRIPTION\"\n                ,x.RUBRIC_ID::integer                   as RUBRIC_ID\n                ,x.SEQ::integer                         as SEQ\n                ,x.IS_SPECIFIED::boolean                as IS_SPECIFIED\n                ,x._H2_SF_INSERTED::timestamp_tz        as ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              as IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       as TIMESTAMP_EFFECTIVE\n                ,hash(\n                        ID\n                        ,\"NAME\"\n                        ,\"DESCRIPTION\"\n                        ,RUBRIC_ID\n                        ,SEQ\n                        ,IS_SPECIFIED  \n                )                               as ROW_HASH\n        from source_data as x\n)\n\n\n\n,final_new_records as (\n        select\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_SPECIFIED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        from    level_history_hash\n        \n)\n\n,final as (\n        select\n                ID\n                ,\"NAME\"\n                ,\"DESCRIPTION\"\n                ,RUBRIC_ID\n                ,SEQ\n                ,IS_SPECIFIED\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,case when lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        or lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE) is null\n                        then 1\n                end as ROW_CHANGE_FILTER\n        from final_new_records\n        qualify ROW_CHANGE_FILTER = 1\n)\n\nselect\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) as level_key\n        ,ID\n        ,\"NAME\"\n        ,\"DESCRIPTION\"\n        ,RUBRIC_ID\n        ,SEQ\n        ,IS_SPECIFIED\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nfrom final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_level"
    },
    "model.hrdm_ingest.feedback_role": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'role_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.SEQ,\n                x.RANK,\n                x.IS_SPECIFIED,\n                x.FUNCTION_ID,\n                x.LEVEL_ID,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM {{ idw_package.dynamic_source('feedback_raw', 'ckapp_role_history') }} x\n        {% if is_incremental() %}\n                WHERE x._H2_SF_INSERTED >= (SELECT MAX(s.ETL_UPDATED_TIMESTAMP)::DATE FROM {{ this }} AS s)\n        {% endif %}\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.SEQ::integer                         AS SEQ\n                ,x.RANK::integer                        AS \"RANK\"\n                ,x.IS_SPECIFIED::boolean                AS IS_SPECIFIED\n                ,x.FUNCTION_ID::integer                 AS FUNCTION_ID\n                ,x.LEVEL_ID::integer                    AS LEVEL_ID     \n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,SEQ\n                        ,\"RANK\"\n                        ,IS_SPECIFIED\n                        ,FUNCTION_ID\n                        ,LEVEL_ID\n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n{% if is_incremental() %}\n,dimension_history_last_record AS(\n        SELECT\n                x.ID\n                ,x.NAME\n                ,x.SEQ\n                ,x.RANK\n                ,x.IS_SPECIFIED\n                ,x.FUNCTION_ID\n                ,x.LEVEL_ID\n                ,x.ETL_UPDATED_TIMESTAMP\n                ,x.IS_DELETED_IN_SOURCE\n                ,x.TIMESTAMP_EFFECTIVE\n                ,x.ROW_HASH\n        FROM    {{ this }} AS x\n        QUALIFY row_number() OVER (PARTITION BY x.ID, x.TIMESTAMP_EFFECTIVE ORDER BY x.TIMESTAMP_EFFECTIVE ASC) = 1\n)\n{% endif %}\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,SEQ\n                ,\"RANK\"\n                ,IS_SPECIFIED\n                ,FUNCTION_ID\n                ,LEVEL_ID\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n{% if is_incremental() %}\n        UNION\n        SELECT\n                ID\n                ,\"NAME\"\n                ,SEQ\n                ,\"RANK\"\n                ,IS_SPECIFIED\n                ,FUNCTION_ID\n                ,LEVEL_ID\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_last_record l\n        WHERE NOT EXISTS (\n                SELECT 1 FROM dimension_history_hash h\n                WHERE l.ID = h.ID\n                        AND l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,SEQ\n                ,\"RANK\"\n                ,IS_SPECIFIED\n                ,FUNCTION_ID\n                ,LEVEL_ID\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} AS role_key\n        ,ID\n        ,\"NAME\"\n        ,SEQ\n        ,\"RANK\"\n        ,IS_SPECIFIED\n        ,FUNCTION_ID\n        ,LEVEL_ID\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.ckapp_role_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "role_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_role"
      ],
      "unique_id": "model.hrdm_ingest.feedback_role",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_role.sql",
      "original_file_path": "models/raw2source/feedback/feedback_role.sql",
      "name": "feedback_role",
      "alias": "feedback_role",
      "checksum": {
        "name": "sha256",
        "checksum": "6d4f8d0879fb8e785affcd96cda5c01fbf0c7363b686b668f1e273d7f2fda64e"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "ckapp_role_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_role.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_role.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "role_key"
      },
      "created_at": 1650312442.9754097,
      "compiled_sql": "\n\n\nWITH source_data AS(\n        SELECT\n                x.ID,\n                x.NAME,\n                x.SEQ,\n                x.RANK,\n                x.IS_SPECIFIED,\n                x.FUNCTION_ID,\n                x.LEVEL_ID,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        FROM HR_RAW.feedback.ckapp_role_history x\n        \n        QUALIFY row_number() OVER (PARTITION BY x.ID, x._H2_BINLOG_TS_MS ORDER BY x._H2_BINLOG_TS_MS ASC) = 1\n)\n\n,dimension_history_hash AS (\n        SELECT\n                x.ID::integer                           AS ID\n                ,x.NAME::string                         AS \"NAME\"\n                ,x.SEQ::integer                         AS SEQ\n                ,x.RANK::integer                        AS \"RANK\"\n                ,x.IS_SPECIFIED::boolean                AS IS_SPECIFIED\n                ,x.FUNCTION_ID::integer                 AS FUNCTION_ID\n                ,x.LEVEL_ID::integer                    AS LEVEL_ID     \n                ,x._H2_SF_INSERTED::timestamp_tz        AS ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean              AS IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz       AS TIMESTAMP_EFFECTIVE\n                ,HASH(\n                        ID\n                        ,\"NAME\"\n                        ,SEQ\n                        ,\"RANK\"\n                        ,IS_SPECIFIED\n                        ,FUNCTION_ID\n                        ,LEVEL_ID\n                )                               AS ROW_HASH\n        FROM source_data AS x\n)\n\n\n\n,final_new_records AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,SEQ\n                ,\"RANK\"\n                ,IS_SPECIFIED\n                ,FUNCTION_ID\n                ,LEVEL_ID\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n        FROM    dimension_history_hash\n        \n)\n\n,final AS (\n        SELECT\n                ID\n                ,\"NAME\"\n                ,SEQ\n                ,\"RANK\"\n                ,IS_SPECIFIED\n                ,FUNCTION_ID\n                ,LEVEL_ID\n                ,ETL_UPDATED_TIMESTAMP\n                ,IS_DELETED_IN_SOURCE\n                ,TIMESTAMP_EFFECTIVE\n                ,ROW_HASH\n                ,CASE WHEN LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        OR LAG(ROW_HASH) OVER(PARTITION BY ID ORDER BY TIMESTAMP_EFFECTIVE) IS NULL\n                        THEN 1\n                END AS ROW_CHANGE_FILTER\n        FROM final_new_records\n        QUALIFY ROW_CHANGE_FILTER = 1\n)\n\nSELECT\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) AS role_key\n        ,ID\n        ,\"NAME\"\n        ,SEQ\n        ,\"RANK\"\n        ,IS_SPECIFIED\n        ,FUNCTION_ID\n        ,LEVEL_ID\n        ,ETL_UPDATED_TIMESTAMP\n        ,IS_DELETED_IN_SOURCE\n        ,TIMESTAMP_EFFECTIVE\n        ,ROW_HASH\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_role"
    },
    "model.hrdm_ingest.feedback_organization": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'organization_key',\n            tags=['FEEDBACK','RAW2SOURCE']\n    )\n}}\n\n\nwith source_data as(\n        select\n                x.ID,\n                x.NAME,\n                x.FEEDBACK_REQUEST_TEMPLATE_ID,\n                x.FEEDBACK_REMINDER_TEMPLATE_ID,\n                x.PEERFEEDBACK_FORM,\n                x.REVIEW_FORM,\n                x.SELFEVAL_FORM,\n                x.UPWARD_FEEDBACK_RUBRIC,\n                x.HIDE_ROLE,\n                x.HIDE_OVERALL_RATING,\n                x.HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                x.UPWARD_FEEDBACK_RUBRIC_ID,\n                x.REVEAL_RATING,\n                x.ANYTIME_FEEDBACK_RUBRIC_ID,\n                x.IS_PEER_FEEDBACK_ATTRIBUTED,\n                x.SHOW_PEER_FEEDBACK_RATINGS,\n                x.AUTO_SHARE_PEER_FEEDBACK,\n                x.HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                x.SHOW_AWARDS_PAGE,\n                x.SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                x.HIDE_PREVIOUS_QUARTER_REVIEW,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        from {{ idw_package.dynamic_source('feedback_raw', 'ckapp_organization_history') }} x\n        {% if is_incremental() %}\n                where x._H2_SF_INSERTED >= (select max(s.ETL_UPDATED_TIMESTAMP)::date from {{ this }} as s )\n        {% endif %}\n        qualify row_number() over (partition by x.ID, x._H2_BINLOG_TS_MS order by x._H2_BINLOG_TS_MS asc) = 1\n)\n\n,organization_history_hash as (\n        select\n                x.ID::integer                                              as ID\n                ,x.NAME::string                                            as \"NAME\"\n                ,x.FEEDBACK_REQUEST_TEMPLATE_ID::integer                   as FEEDBACK_REQUEST_TEMPLATE_ID\n                ,x.FEEDBACK_REMINDER_TEMPLATE_ID::integer                  as FEEDBACK_REMINDER_TEMPLATE_ID\n                ,x.PEERFEEDBACK_FORM::string                               as PEERFEEDBACK_FORM\n                ,x.REVIEW_FORM::string                                     as REVIEW_FORM\n                ,x.SELFEVAL_FORM::string                                   as SELFEVAL_FORM\n                ,x.UPWARD_FEEDBACK_RUBRIC::string                          as UPWARD_FEEDBACK_RUBRIC\n                ,x.HIDE_ROLE::boolean                                      as HIDE_ROLE\n                ,x.HIDE_OVERALL_RATING::boolean                            as HIDE_OVERALL_RATING\n                ,x.HIDE_SELFEVAL_RATING_UNTIL_LOCKED::boolean              as HIDE_SELFEVAL_RATING_UNTIL_LOCKED\n                ,x.UPWARD_FEEDBACK_RUBRIC_ID::integer                      as UPWARD_FEEDBACK_RUBRIC_ID\n                ,x.REVEAL_RATING::boolean                                  as REVEAL_RATING\n                ,x.ANYTIME_FEEDBACK_RUBRIC_ID::boolean                     as ANYTIME_FEEDBACK_RUBRIC_ID\n                ,x.IS_PEER_FEEDBACK_ATTRIBUTED::boolean                    as IS_PEER_FEEDBACK_ATTRIBUTED\n                ,x.SHOW_PEER_FEEDBACK_RATINGS::boolean                     as SHOW_PEER_FEEDBACK_RATINGS\n                ,x.AUTO_SHARE_PEER_FEEDBACK::boolean                       as AUTO_SHARE_PEER_FEEDBACK\n                ,x.HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW::boolean       as HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW\n                ,x.SHOW_AWARDS_PAGE::boolean                               as SHOW_AWARDS_PAGE\n                ,x.SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION::boolean           as SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION\n                ,x.HIDE_PREVIOUS_QUARTER_REVIEW::boolean                   as HIDE_PREVIOUS_QUARTER_REVIEW\n                ,x._H2_SF_INSERTED::timestamp_tz                           as ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean                                 as IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz                          as TIMESTAMP_EFFECTIVE\n                ,hash(\n                    ID,\n                    \"NAME\",\n                    FEEDBACK_REQUEST_TEMPLATE_ID,\n                    FEEDBACK_REMINDER_TEMPLATE_ID,\n                    PEERFEEDBACK_FORM,\n                    REVIEW_FORM,\n                    SELFEVAL_FORM,\n                    UPWARD_FEEDBACK_RUBRIC,\n                    HIDE_ROLE,\n                    HIDE_OVERALL_RATING,\n                    HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                    UPWARD_FEEDBACK_RUBRIC_ID,\n                    REVEAL_RATING,\n                    ANYTIME_FEEDBACK_RUBRIC_ID,\n                    IS_PEER_FEEDBACK_ATTRIBUTED,\n                    SHOW_PEER_FEEDBACK_RATINGS,\n                    AUTO_SHARE_PEER_FEEDBACK,\n                    HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                    SHOW_AWARDS_PAGE,\n                    SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                    HIDE_PREVIOUS_QUARTER_REVIEW\n                )                               as ROW_HASH\n        from source_data as x\n)\n\n{% if is_incremental() %}\n,organization_history_last_record as(\n        select\n                x.ID,\n                x.NAME,\n                x.FEEDBACK_REQUEST_TEMPLATE_ID,\n                x.FEEDBACK_REMINDER_TEMPLATE_ID,\n                x.PEERFEEDBACK_FORM,\n                x.REVIEW_FORM,\n                x.SELFEVAL_FORM,\n                x.UPWARD_FEEDBACK_RUBRIC,\n                x.HIDE_ROLE,\n                x.HIDE_OVERALL_RATING,\n                x.HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                x.UPWARD_FEEDBACK_RUBRIC_ID,\n                x.REVEAL_RATING,\n                x.ANYTIME_FEEDBACK_RUBRIC_ID,\n                x.IS_PEER_FEEDBACK_ATTRIBUTED,\n                x.SHOW_PEER_FEEDBACK_RATINGS,\n                x.AUTO_SHARE_PEER_FEEDBACK,\n                x.HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                x.SHOW_AWARDS_PAGE,\n                x.SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                x.HIDE_PREVIOUS_QUARTER_REVIEW,\n                x.ETL_UPDATED_TIMESTAMP,\n                x.IS_DELETED_IN_SOURCE,\n                x.TIMESTAMP_EFFECTIVE,\n                x.ROW_HASH\n        from    {{ this }} as x\n        qualify row_number() over (partition by x.ID order by x.TIMESTAMP_EFFECTIVE desc) = 1\n)\n{% endif %}\n\n,final_new_records as (\n        select\n                ID,\n                \"NAME\",\n                FEEDBACK_REQUEST_TEMPLATE_ID,\n                FEEDBACK_REMINDER_TEMPLATE_ID,\n                PEERFEEDBACK_FORM,\n                REVIEW_FORM,\n                SELFEVAL_FORM,\n                UPWARD_FEEDBACK_RUBRIC,\n                HIDE_ROLE,\n                HIDE_OVERALL_RATING,\n                HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                UPWARD_FEEDBACK_RUBRIC_ID,\n                REVEAL_RATING,\n                ANYTIME_FEEDBACK_RUBRIC_ID,\n                IS_PEER_FEEDBACK_ATTRIBUTED,\n                SHOW_PEER_FEEDBACK_RATINGS,\n                AUTO_SHARE_PEER_FEEDBACK,\n                HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                SHOW_AWARDS_PAGE,\n                SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                HIDE_PREVIOUS_QUARTER_REVIEW,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH\n        from    organization_history_hash\n{% if is_incremental() %}\n        union\n        select\n                ID,\n                \"NAME\",\n                FEEDBACK_REQUEST_TEMPLATE_ID,\n                FEEDBACK_REMINDER_TEMPLATE_ID,\n                PEERFEEDBACK_FORM,\n                REVIEW_FORM,\n                SELFEVAL_FORM,\n                UPWARD_FEEDBACK_RUBRIC,\n                HIDE_ROLE,\n                HIDE_OVERALL_RATING,\n                HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                UPWARD_FEEDBACK_RUBRIC_ID,\n                REVEAL_RATING,\n                ANYTIME_FEEDBACK_RUBRIC_ID,\n                IS_PEER_FEEDBACK_ATTRIBUTED,\n                SHOW_PEER_FEEDBACK_RATINGS,\n                AUTO_SHARE_PEER_FEEDBACK,\n                HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                SHOW_AWARDS_PAGE,\n                SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                HIDE_PREVIOUS_QUARTER_REVIEW,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH\n        from    organization_history_last_record l\n        where not exists (\n                select 1 from organization_history_hash h\n                where l.ID = h.ID\n                        and l.TIMESTAMP_EFFECTIVE = h.TIMESTAMP_EFFECTIVE\n        )\n{% endif %}        \n)\n\n,final as (\n        select\n                ID,\n                \"NAME\",\n                FEEDBACK_REQUEST_TEMPLATE_ID,\n                FEEDBACK_REMINDER_TEMPLATE_ID,\n                PEERFEEDBACK_FORM,\n                REVIEW_FORM,\n                SELFEVAL_FORM,\n                UPWARD_FEEDBACK_RUBRIC,\n                HIDE_ROLE,\n                HIDE_OVERALL_RATING,\n                HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                UPWARD_FEEDBACK_RUBRIC_ID,\n                REVEAL_RATING,\n                ANYTIME_FEEDBACK_RUBRIC_ID,\n                IS_PEER_FEEDBACK_ATTRIBUTED,\n                SHOW_PEER_FEEDBACK_RATINGS,\n                AUTO_SHARE_PEER_FEEDBACK,\n                HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                SHOW_AWARDS_PAGE,\n                SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                HIDE_PREVIOUS_QUARTER_REVIEW,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH,\n                case when lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        or lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE) is null\n                        then 1\n                end as ROW_CHANGE_FILTER\n        from final_new_records\n        qualify ROW_CHANGE_FILTER = 1\n)\n\nselect\n        {{dbt_utils.surrogate_key([ \"ID\", \"TIMESTAMP_EFFECTIVE\"]) }} as organization_key,\n        ID,\n        \"NAME\",\n        FEEDBACK_REQUEST_TEMPLATE_ID,\n        FEEDBACK_REMINDER_TEMPLATE_ID,\n        PEERFEEDBACK_FORM,\n        REVIEW_FORM,\n        SELFEVAL_FORM,\n        UPWARD_FEEDBACK_RUBRIC,\n        HIDE_ROLE,\n        HIDE_OVERALL_RATING,\n        HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n        UPWARD_FEEDBACK_RUBRIC_ID,\n        REVEAL_RATING,\n        ANYTIME_FEEDBACK_RUBRIC_ID,\n        IS_PEER_FEEDBACK_ATTRIBUTED,\n        SHOW_PEER_FEEDBACK_RATINGS,\n        AUTO_SHARE_PEER_FEEDBACK,\n        HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n        SHOW_AWARDS_PAGE,\n        SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n        HIDE_PREVIOUS_QUARTER_REVIEW,\n        ETL_UPDATED_TIMESTAMP,\n        IS_DELETED_IN_SOURCE,\n        TIMESTAMP_EFFECTIVE,\n        ROW_HASH\nfrom final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.feedback_raw.ckapp_organization_history"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "feedback",
        "database": null,
        "tags": [
          "SOURCE",
          "FEEDBACK",
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "organization_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_feedback",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "feedback",
        "feedback_organization"
      ],
      "unique_id": "model.hrdm_ingest.feedback_organization",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/feedback/feedback_organization.sql",
      "original_file_path": "models/raw2source/feedback/feedback_organization.sql",
      "name": "feedback_organization",
      "alias": "feedback_organization",
      "checksum": {
        "name": "sha256",
        "checksum": "b65fb68e1c419a481f1c0ccb8c164ff47c420ea7cd161c503d65fbc599aefa77"
      },
      "tags": [
        "SOURCE",
        "FEEDBACK",
        "RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "feedback_raw",
          "ckapp_organization_history"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/feedback/feedback_organization.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/feedback/feedback_organization.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "FEEDBACK",
          "RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "feedback",
        "unique_key": "organization_key"
      },
      "created_at": 1650312442.9921763,
      "compiled_sql": "\n\n\nwith source_data as(\n        select\n                x.ID,\n                x.NAME,\n                x.FEEDBACK_REQUEST_TEMPLATE_ID,\n                x.FEEDBACK_REMINDER_TEMPLATE_ID,\n                x.PEERFEEDBACK_FORM,\n                x.REVIEW_FORM,\n                x.SELFEVAL_FORM,\n                x.UPWARD_FEEDBACK_RUBRIC,\n                x.HIDE_ROLE,\n                x.HIDE_OVERALL_RATING,\n                x.HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                x.UPWARD_FEEDBACK_RUBRIC_ID,\n                x.REVEAL_RATING,\n                x.ANYTIME_FEEDBACK_RUBRIC_ID,\n                x.IS_PEER_FEEDBACK_ATTRIBUTED,\n                x.SHOW_PEER_FEEDBACK_RATINGS,\n                x.AUTO_SHARE_PEER_FEEDBACK,\n                x.HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                x.SHOW_AWARDS_PAGE,\n                x.SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                x.HIDE_PREVIOUS_QUARTER_REVIEW,\n                x._H2_SF_INSERTED,\n                x._H2_IS_DELETED,\n                x._H2_BINLOG_TS_MS\n        from HR_RAW.feedback.ckapp_organization_history x\n        \n        qualify row_number() over (partition by x.ID, x._H2_BINLOG_TS_MS order by x._H2_BINLOG_TS_MS asc) = 1\n)\n\n,organization_history_hash as (\n        select\n                x.ID::integer                                              as ID\n                ,x.NAME::string                                            as \"NAME\"\n                ,x.FEEDBACK_REQUEST_TEMPLATE_ID::integer                   as FEEDBACK_REQUEST_TEMPLATE_ID\n                ,x.FEEDBACK_REMINDER_TEMPLATE_ID::integer                  as FEEDBACK_REMINDER_TEMPLATE_ID\n                ,x.PEERFEEDBACK_FORM::string                               as PEERFEEDBACK_FORM\n                ,x.REVIEW_FORM::string                                     as REVIEW_FORM\n                ,x.SELFEVAL_FORM::string                                   as SELFEVAL_FORM\n                ,x.UPWARD_FEEDBACK_RUBRIC::string                          as UPWARD_FEEDBACK_RUBRIC\n                ,x.HIDE_ROLE::boolean                                      as HIDE_ROLE\n                ,x.HIDE_OVERALL_RATING::boolean                            as HIDE_OVERALL_RATING\n                ,x.HIDE_SELFEVAL_RATING_UNTIL_LOCKED::boolean              as HIDE_SELFEVAL_RATING_UNTIL_LOCKED\n                ,x.UPWARD_FEEDBACK_RUBRIC_ID::integer                      as UPWARD_FEEDBACK_RUBRIC_ID\n                ,x.REVEAL_RATING::boolean                                  as REVEAL_RATING\n                ,x.ANYTIME_FEEDBACK_RUBRIC_ID::boolean                     as ANYTIME_FEEDBACK_RUBRIC_ID\n                ,x.IS_PEER_FEEDBACK_ATTRIBUTED::boolean                    as IS_PEER_FEEDBACK_ATTRIBUTED\n                ,x.SHOW_PEER_FEEDBACK_RATINGS::boolean                     as SHOW_PEER_FEEDBACK_RATINGS\n                ,x.AUTO_SHARE_PEER_FEEDBACK::boolean                       as AUTO_SHARE_PEER_FEEDBACK\n                ,x.HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW::boolean       as HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW\n                ,x.SHOW_AWARDS_PAGE::boolean                               as SHOW_AWARDS_PAGE\n                ,x.SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION::boolean           as SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION\n                ,x.HIDE_PREVIOUS_QUARTER_REVIEW::boolean                   as HIDE_PREVIOUS_QUARTER_REVIEW\n                ,x._H2_SF_INSERTED::timestamp_tz                           as ETL_UPDATED_TIMESTAMP\n                ,x._H2_IS_DELETED::boolean                                 as IS_DELETED_IN_SOURCE\n                ,x._H2_BINLOG_TS_MS::timestamp_tz                          as TIMESTAMP_EFFECTIVE\n                ,hash(\n                    ID,\n                    \"NAME\",\n                    FEEDBACK_REQUEST_TEMPLATE_ID,\n                    FEEDBACK_REMINDER_TEMPLATE_ID,\n                    PEERFEEDBACK_FORM,\n                    REVIEW_FORM,\n                    SELFEVAL_FORM,\n                    UPWARD_FEEDBACK_RUBRIC,\n                    HIDE_ROLE,\n                    HIDE_OVERALL_RATING,\n                    HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                    UPWARD_FEEDBACK_RUBRIC_ID,\n                    REVEAL_RATING,\n                    ANYTIME_FEEDBACK_RUBRIC_ID,\n                    IS_PEER_FEEDBACK_ATTRIBUTED,\n                    SHOW_PEER_FEEDBACK_RATINGS,\n                    AUTO_SHARE_PEER_FEEDBACK,\n                    HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                    SHOW_AWARDS_PAGE,\n                    SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                    HIDE_PREVIOUS_QUARTER_REVIEW\n                )                               as ROW_HASH\n        from source_data as x\n)\n\n\n\n,final_new_records as (\n        select\n                ID,\n                \"NAME\",\n                FEEDBACK_REQUEST_TEMPLATE_ID,\n                FEEDBACK_REMINDER_TEMPLATE_ID,\n                PEERFEEDBACK_FORM,\n                REVIEW_FORM,\n                SELFEVAL_FORM,\n                UPWARD_FEEDBACK_RUBRIC,\n                HIDE_ROLE,\n                HIDE_OVERALL_RATING,\n                HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                UPWARD_FEEDBACK_RUBRIC_ID,\n                REVEAL_RATING,\n                ANYTIME_FEEDBACK_RUBRIC_ID,\n                IS_PEER_FEEDBACK_ATTRIBUTED,\n                SHOW_PEER_FEEDBACK_RATINGS,\n                AUTO_SHARE_PEER_FEEDBACK,\n                HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                SHOW_AWARDS_PAGE,\n                SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                HIDE_PREVIOUS_QUARTER_REVIEW,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH\n        from    organization_history_hash\n        \n)\n\n,final as (\n        select\n                ID,\n                \"NAME\",\n                FEEDBACK_REQUEST_TEMPLATE_ID,\n                FEEDBACK_REMINDER_TEMPLATE_ID,\n                PEERFEEDBACK_FORM,\n                REVIEW_FORM,\n                SELFEVAL_FORM,\n                UPWARD_FEEDBACK_RUBRIC,\n                HIDE_ROLE,\n                HIDE_OVERALL_RATING,\n                HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n                UPWARD_FEEDBACK_RUBRIC_ID,\n                REVEAL_RATING,\n                ANYTIME_FEEDBACK_RUBRIC_ID,\n                IS_PEER_FEEDBACK_ATTRIBUTED,\n                SHOW_PEER_FEEDBACK_RATINGS,\n                AUTO_SHARE_PEER_FEEDBACK,\n                HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n                SHOW_AWARDS_PAGE,\n                SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n                HIDE_PREVIOUS_QUARTER_REVIEW,\n                ETL_UPDATED_TIMESTAMP,\n                IS_DELETED_IN_SOURCE,\n                TIMESTAMP_EFFECTIVE,\n                ROW_HASH,\n                case when lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE)\n                        <> ROW_HASH\n                        or lag(ROW_HASH) over(partition by ID order by TIMESTAMP_EFFECTIVE) is null\n                        then 1\n                end as ROW_CHANGE_FILTER\n        from final_new_records\n        qualify ROW_CHANGE_FILTER = 1\n)\n\nselect\n        md5(cast(coalesce(cast(ID as \n    varchar\n), '') || '-' || coalesce(cast(TIMESTAMP_EFFECTIVE as \n    varchar\n), '') as \n    varchar\n)) as organization_key,\n        ID,\n        \"NAME\",\n        FEEDBACK_REQUEST_TEMPLATE_ID,\n        FEEDBACK_REMINDER_TEMPLATE_ID,\n        PEERFEEDBACK_FORM,\n        REVIEW_FORM,\n        SELFEVAL_FORM,\n        UPWARD_FEEDBACK_RUBRIC,\n        HIDE_ROLE,\n        HIDE_OVERALL_RATING,\n        HIDE_SELFEVAL_RATING_UNTIL_LOCKED,\n        UPWARD_FEEDBACK_RUBRIC_ID,\n        REVEAL_RATING,\n        ANYTIME_FEEDBACK_RUBRIC_ID,\n        IS_PEER_FEEDBACK_ATTRIBUTED,\n        SHOW_PEER_FEEDBACK_RATINGS,\n        AUTO_SHARE_PEER_FEEDBACK,\n        HIDE_SELFEVAL_AND_PEERFEEDBACK_ON_REVIEW,\n        SHOW_AWARDS_PAGE,\n        SHOW_PRIVATE_FEEDBACK_IN_CALIBRATION,\n        HIDE_PREVIOUS_QUARTER_REVIEW,\n        ETL_UPDATED_TIMESTAMP,\n        IS_DELETED_IN_SOURCE,\n        TIMESTAMP_EFFECTIVE,\n        ROW_HASH\nfrom final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_feedback.feedback_organization"
    },
    "model.hrdm_ingest.workday_companies": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'company_key',\n            tags=['WORKDAY_RAW2SOURCE']\n    )\n}}\n\nWITH\nsource_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_companies') }} AS x\n    {% if is_incremental() %}\n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Last_Updated_Date::DATE AS last_updated_date\n        , raw_json:Created_Moment::DATE AS created_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Code::STRING AS company_code\n        , raw_json:Name::STRING AS company_name\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, company_hash AS (\n    SELECT\n        workday_id\n        , last_updated_date\n        , created_date\n        , timestamp_effective\n        , reference_id\n        , inactive AS is_deleted\n        , company_code\n        , company_name\n        , HASH(workday_id\n            , last_updated_date\n            , created_date\n            , reference_id\n            , is_deleted\n            , company_code\n            , company_name\n        ) AS row_hash\n    FROM raw_parsed\n)\n\n{% if is_incremental() %}\n    , company_last_record AS (\n        SELECT\n            workday_id\n            , last_updated_date\n            , created_date\n            , reference_id\n            , is_deleted\n            , company_code\n            , company_name\n            , timestamp_effective\n            , row_hash\n        FROM {{ this }}\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) = 1\n    )\n{% endif %}\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , last_updated_date\n        , created_date\n        , reference_id\n        , is_deleted\n        , company_code\n        , company_name\n        , timestamp_effective\n        , row_hash\n    FROM company_hash\n\n    {% if is_incremental() %}\n        UNION\n        SELECT\n            workday_id\n            , last_updated_date\n            , created_date\n            , reference_id\n            , is_deleted\n            , company_code\n            , company_name\n            , timestamp_effective\n            , row_hash\n        FROM company_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM company_hash\n            WHERE company_last_record.workday_id = company_hash.workday_id\n                AND company_last_record.timestamp_effective = company_hash.timestamp_effective)\n    {% endif %}\n)\n\n, final AS (\n    SELECT\n        workday_id\n        , last_updated_date\n        , created_date\n        , reference_id\n        , is_deleted\n        , company_code\n        , company_name\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    {{ dbt_utils.surrogate_key([ \"Workday_ID\", \"timestamp_effective\"]) }} AS company_key\n    , workday_id\n    , last_updated_date\n    , created_date\n    , reference_id\n    , is_deleted\n    , company_code\n    , company_name\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_companies"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "company_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_companies"
      ],
      "unique_id": "model.hrdm_ingest.workday_companies",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_companies.sql",
      "original_file_path": "models/raw2source/workday/workday_companies.sql",
      "name": "workday_companies",
      "alias": "workday_companies",
      "checksum": {
        "name": "sha256",
        "checksum": "8b3e13945d59e11d53ffd388249a12b6d187ff732bfbb823e2a5c6c6570960fe"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_companies"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_companies.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/workday/workday_companies.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "company_key"
      },
      "created_at": 1650312443.001813,
      "compiled_sql": "\n\nWITH\nsource_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_companies AS x\n    \n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_companies )\n    \n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Last_Updated_Date::DATE AS last_updated_date\n        , raw_json:Created_Moment::DATE AS created_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Code::STRING AS company_code\n        , raw_json:Name::STRING AS company_name\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, company_hash AS (\n    SELECT\n        workday_id\n        , last_updated_date\n        , created_date\n        , timestamp_effective\n        , reference_id\n        , inactive AS is_deleted\n        , company_code\n        , company_name\n        , HASH(workday_id\n            , last_updated_date\n            , created_date\n            , reference_id\n            , is_deleted\n            , company_code\n            , company_name\n        ) AS row_hash\n    FROM raw_parsed\n)\n\n\n    , company_last_record AS (\n        SELECT\n            workday_id\n            , last_updated_date\n            , created_date\n            , reference_id\n            , is_deleted\n            , company_code\n            , company_name\n            , timestamp_effective\n            , row_hash\n        FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_companies\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) = 1\n    )\n\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , last_updated_date\n        , created_date\n        , reference_id\n        , is_deleted\n        , company_code\n        , company_name\n        , timestamp_effective\n        , row_hash\n    FROM company_hash\n\n    \n        UNION\n        SELECT\n            workday_id\n            , last_updated_date\n            , created_date\n            , reference_id\n            , is_deleted\n            , company_code\n            , company_name\n            , timestamp_effective\n            , row_hash\n        FROM company_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM company_hash\n            WHERE company_last_record.workday_id = company_hash.workday_id\n                AND company_last_record.timestamp_effective = company_hash.timestamp_effective)\n    \n)\n\n, final AS (\n    SELECT\n        workday_id\n        , last_updated_date\n        , created_date\n        , reference_id\n        , is_deleted\n        , company_code\n        , company_name\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS company_key\n    , workday_id\n    , last_updated_date\n    , created_date\n    , reference_id\n    , is_deleted\n    , company_code\n    , company_name\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_companies"
    },
    "model.hrdm_ingest.workday_supervisory_organizations": {
      "raw_sql": "{{\n  config(\n    materialized = \"incremental\",\n    unique_key='supervisory_organization_key',\n    tags=['WORKDAY_RAW2SOURCE']\n  )\n}}\n\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_supervisory_organizations') }} AS x\n    {% if is_incremental() %}\n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Name::STRING AS \"name\"\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Manager_ID::STRING AS manager_id\n        , raw_json:Superior_Organization::STRING AS superior_organization\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_date::DATE AS inactive_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n\n    FROM source_data\n    WHERE timestamp_effective IS NOT NULL\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, supervisory_organization_hash AS (\n    SELECT\n        workday_id\n        , name\n        , reference_id\n        , manager_id\n        , superior_organization\n        , inactive AS is_deleted\n        , inactive_date\n        , timestamp_effective\n        , HASH(workday_id\n            , name\n            , reference_id\n            , manager_id\n            , superior_organization\n            , is_deleted\n            , inactive_date) AS row_hash\n    FROM raw_parsed\n)\n\n{% if is_incremental() %}\n    , supervisory_organization_last_record AS (\n        SELECT\n            workday_id\n            , name\n            , reference_id\n            , manager_id\n            , superior_organization\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM {{ this }}\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) = 1\n    )\n{% endif %}\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , name\n        , reference_id\n        , manager_id\n        , superior_organization\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n    FROM supervisory_organization_hash\n\n    {% if is_incremental() %}\n        UNION\n        SELECT\n            workday_id\n            , name\n            , reference_id\n            , manager_id\n            , superior_organization\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM supervisory_organization_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM supervisory_organization_hash\n            WHERE supervisory_organization_last_record.workday_id = supervisory_organization_hash.workday_id\n                AND supervisory_organization_last_record.timestamp_effective = supervisory_organization_hash.timestamp_effective)\n    {% endif %}\n)\n\n, final AS (\n    SELECT\n        workday_id\n        , name\n        , reference_id\n        , manager_id\n        , superior_organization\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    {{ dbt_utils.surrogate_key([\"Workday_ID\", \"timestamp_effective\"]) }} AS supervisory_organization_key\n    , workday_id\n    , name\n    , reference_id\n    , manager_id\n    , superior_organization\n    , is_deleted\n    , inactive_date\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_supervisory_organizations"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "supervisory_organization_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_supervisory_organizations"
      ],
      "unique_id": "model.hrdm_ingest.workday_supervisory_organizations",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_supervisory_organizations.sql",
      "original_file_path": "models/raw2source/workday/workday_supervisory_organizations.sql",
      "name": "workday_supervisory_organizations",
      "alias": "workday_supervisory_organizations",
      "checksum": {
        "name": "sha256",
        "checksum": "0b2109293a55122f633227bfbc89a7c32aab075029914b6cc4ca25b39d3c993e"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_supervisory_organizations"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_supervisory_organizations.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "supervisory_organization_key"
      },
      "created_at": 1650312443.0107296,
      "compiled_sql": "\n\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_supervisory_organizations AS x\n    \n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_supervisory_organizations )\n    \n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Name::STRING AS \"name\"\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Manager_ID::STRING AS manager_id\n        , raw_json:Superior_Organization::STRING AS superior_organization\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_date::DATE AS inactive_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n\n    FROM source_data\n    WHERE timestamp_effective IS NOT NULL\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, supervisory_organization_hash AS (\n    SELECT\n        workday_id\n        , name\n        , reference_id\n        , manager_id\n        , superior_organization\n        , inactive AS is_deleted\n        , inactive_date\n        , timestamp_effective\n        , HASH(workday_id\n            , name\n            , reference_id\n            , manager_id\n            , superior_organization\n            , is_deleted\n            , inactive_date) AS row_hash\n    FROM raw_parsed\n)\n\n\n    , supervisory_organization_last_record AS (\n        SELECT\n            workday_id\n            , name\n            , reference_id\n            , manager_id\n            , superior_organization\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_supervisory_organizations\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) = 1\n    )\n\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , name\n        , reference_id\n        , manager_id\n        , superior_organization\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n    FROM supervisory_organization_hash\n\n    \n        UNION\n        SELECT\n            workday_id\n            , name\n            , reference_id\n            , manager_id\n            , superior_organization\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM supervisory_organization_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM supervisory_organization_hash\n            WHERE supervisory_organization_last_record.workday_id = supervisory_organization_hash.workday_id\n                AND supervisory_organization_last_record.timestamp_effective = supervisory_organization_hash.timestamp_effective)\n    \n)\n\n, final AS (\n    SELECT\n        workday_id\n        , name\n        , reference_id\n        , manager_id\n        , superior_organization\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS supervisory_organization_key\n    , workday_id\n    , name\n    , reference_id\n    , manager_id\n    , superior_organization\n    , is_deleted\n    , inactive_date\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_supervisory_organizations"
    },
    "model.hrdm_ingest.workday_custom_organizations": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'custom_organization_key',\n            tags=['WORKDAY_RAW2SOURCE']\n    )\n}}\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_custom_organizations') }} AS x\n\n    {% if is_incremental() %}\n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Type::STRING AS custom_organization_type\n        , raw_json:Subtype::STRING AS custom_organization_subtype\n        , raw_json:Code::STRING AS custom_organization_code\n        , raw_json:Last_Updated_Date::DATE AS last_updated_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_Date::DATE AS inactive_date\n        , raw_json:Name::STRING AS custom_organization_name\n        , raw_json:Superior_Organization_ID::STRING AS superior_organization_id\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, organization_hash AS (\n    SELECT\n        workday_id\n        , custom_organization_type\n        , custom_organization_subtype\n        , custom_organization_code\n        , last_updated_date\n        , timestamp_effective\n        , reference_id\n        , custom_organization_name\n        , superior_organization_id\n        , inactive AS is_deleted\n        , inactive_date\n        , HASH(workday_id\n            , custom_organization_type\n            , custom_organization_subtype\n            , custom_organization_code\n            , last_updated_date\n            , reference_id\n            , is_deleted\n            , inactive_date\n            , custom_organization_name\n            , superior_organization_id\n        ) AS row_hash\n    FROM raw_parsed\n)\n\n{% if is_incremental() %}\n    , organization_last_record AS (\n        SELECT\n            workday_id\n            , custom_organization_type\n            , custom_organization_subtype\n            , custom_organization_code\n            , last_updated_date\n            , reference_id\n            , custom_organization_name\n            , superior_organization_id\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM {{ this }}\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) = 1\n    )\n{% endif %}\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , custom_organization_type\n        , custom_organization_subtype\n        , custom_organization_code\n        , last_updated_date\n        , reference_id\n        , custom_organization_name\n        , superior_organization_id\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n    FROM organization_hash\n\n    {% if is_incremental() %}\n        UNION\n        SELECT\n            workday_id\n            , custom_organization_type\n            , custom_organization_subtype\n            , custom_organization_code\n            , last_updated_date\n            , reference_id\n            , custom_organization_name\n            , superior_organization_id\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM organization_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM organization_hash\n            WHERE organization_last_record.workday_id = organization_hash.workday_id\n                AND organization_last_record.timestamp_effective = organization_hash.timestamp_effective)\n    {% endif %}\n)\n\n, final AS (\n    SELECT\n        workday_id\n        , custom_organization_type\n        , custom_organization_subtype\n        , custom_organization_code\n        , last_updated_date\n        , reference_id\n        , custom_organization_name\n        , superior_organization_id\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    {{ dbt_utils.surrogate_key([ \"Workday_ID\", \"timestamp_effective\"]) }} AS custom_organization_key\n    , workday_id\n    , custom_organization_code\n    , custom_organization_name\n    , custom_organization_type\n    , custom_organization_subtype\n    , superior_organization_id\n    , last_updated_date\n    , reference_id\n    , is_deleted\n    , inactive_date\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_custom_organizations"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "custom_organization_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_custom_organizations"
      ],
      "unique_id": "model.hrdm_ingest.workday_custom_organizations",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_custom_organizations.sql",
      "original_file_path": "models/raw2source/workday/workday_custom_organizations.sql",
      "name": "workday_custom_organizations",
      "alias": "workday_custom_organizations",
      "checksum": {
        "name": "sha256",
        "checksum": "dbb6ae783a0fabe7b5e60fc4be0dea5ce65969ec0939f2c455e7c5e0045e41be"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_custom_organizations"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_custom_organizations.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/workday/workday_custom_organizations.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "custom_organization_key"
      },
      "created_at": 1650312443.0197418,
      "compiled_sql": "\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_custom_organizations AS x\n\n    \n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_custom_organizations )\n    \n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Type::STRING AS custom_organization_type\n        , raw_json:Subtype::STRING AS custom_organization_subtype\n        , raw_json:Code::STRING AS custom_organization_code\n        , raw_json:Last_Updated_Date::DATE AS last_updated_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_Date::DATE AS inactive_date\n        , raw_json:Name::STRING AS custom_organization_name\n        , raw_json:Superior_Organization_ID::STRING AS superior_organization_id\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, organization_hash AS (\n    SELECT\n        workday_id\n        , custom_organization_type\n        , custom_organization_subtype\n        , custom_organization_code\n        , last_updated_date\n        , timestamp_effective\n        , reference_id\n        , custom_organization_name\n        , superior_organization_id\n        , inactive AS is_deleted\n        , inactive_date\n        , HASH(workday_id\n            , custom_organization_type\n            , custom_organization_subtype\n            , custom_organization_code\n            , last_updated_date\n            , reference_id\n            , is_deleted\n            , inactive_date\n            , custom_organization_name\n            , superior_organization_id\n        ) AS row_hash\n    FROM raw_parsed\n)\n\n\n    , organization_last_record AS (\n        SELECT\n            workday_id\n            , custom_organization_type\n            , custom_organization_subtype\n            , custom_organization_code\n            , last_updated_date\n            , reference_id\n            , custom_organization_name\n            , superior_organization_id\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_custom_organizations\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) = 1\n    )\n\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , custom_organization_type\n        , custom_organization_subtype\n        , custom_organization_code\n        , last_updated_date\n        , reference_id\n        , custom_organization_name\n        , superior_organization_id\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n    FROM organization_hash\n\n    \n        UNION\n        SELECT\n            workday_id\n            , custom_organization_type\n            , custom_organization_subtype\n            , custom_organization_code\n            , last_updated_date\n            , reference_id\n            , custom_organization_name\n            , superior_organization_id\n            , is_deleted\n            , inactive_date\n            , timestamp_effective\n            , row_hash\n        FROM organization_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM organization_hash\n            WHERE organization_last_record.workday_id = organization_hash.workday_id\n                AND organization_last_record.timestamp_effective = organization_hash.timestamp_effective)\n    \n)\n\n, final AS (\n    SELECT\n        workday_id\n        , custom_organization_type\n        , custom_organization_subtype\n        , custom_organization_code\n        , last_updated_date\n        , reference_id\n        , custom_organization_name\n        , superior_organization_id\n        , is_deleted\n        , inactive_date\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS custom_organization_key\n    , workday_id\n    , custom_organization_code\n    , custom_organization_name\n    , custom_organization_type\n    , custom_organization_subtype\n    , superior_organization_id\n    , last_updated_date\n    , reference_id\n    , is_deleted\n    , inactive_date\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_custom_organizations"
    },
    "model.hrdm_ingest.workday_suppliers": {
      "raw_sql": "{{\nconfig(\n    materialized = \"incremental\",\n    unique_key = 'supplier_key',\n    tags=['WORKDAY_RAW2SOURCE']\n)\n}}\n\nwith source_data as (\n        select\n            raw_data as raw_json,\n            raw_filename,\n            x.raw_inserted_timestamp\n        from {{ idw_package.dynamic_source('workday_raw', 'workday_suppliers') }} x\n{% if is_incremental() %}\nwhere raw_inserted_timestamp >=\n    (select MAX(etl_updated_timestamp)::date from {{ this }} )\n{% endif %}\n),\n\nraw_parsed as ( \nselect\n        raw_json:Workday_ID::string as Workday_ID\n        , raw_json:Status::string as status\n        , raw_json:Last_Updated_Date::date::Timestamp_TZ as last_updated_date\n        , raw_json:Created_Moment::date as Created_date\n        , raw_json:Report_Effective_Date::date::Timestamp_TZ as timestamp_effective\n        , raw_json:Supplier_Category::string as supplier_category\n        , raw_json:Supplier_Name::string as supplier_name\n\nfrom source_data\nqualify row_number() over (partition by workday_id, timestamp_effective order by timestamp_effective asc) = 1\n),\n\nsuppliers_hash as (\nselect  Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name,\n        hash(Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,supplier_category\n        ,supplier_name\n        ) as row_hash\nfrom    raw_parsed\n)\n\n{% if is_incremental() %}\n,suppliers_last_record as\n(\nselect  Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,row_hash\n        ,row_number() over (partition by  workday_ID order by timestamp_effective desc) rn\nfrom    {{ this }} suppliers\nqualify rn = 1\n)\n{% endif %}\n\n,final_new_records as\n(\nselect  Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,row_hash\nfrom    suppliers_hash\n\n{% if is_incremental() %}\nunion\nselect Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,row_hash\nfrom  suppliers_last_record last_updated_date\nwhere not exists (select 1 from suppliers_hash h\n                    where l.workday_ID = h.workday_ID\n                    and l.timestamp_effective = h.timestamp_effective)\n{% endif %}\n)\n\n,final as (\nselect  Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,row_hash\n        , case when LAG(row_hash) over(partition by Workday_ID order by timestamp_effective)\n            <> row_hash\n            or LAG(row_hash) over(partition by Workday_ID order by timestamp_effective) is null\n            then 1\n        end as row_change_filter\nfrom    final_new_records\nqualify row_change_filter = 1\n)\n\nselect  {{dbt_utils.surrogate_key([ \"Workday_ID\", \"timestamp_effective\"]) }} as supplier_key\n        ,Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,current_timestamp() as etl_updated_timestamp\nfrom    final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_suppliers"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "supplier_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_suppliers"
      ],
      "unique_id": "model.hrdm_ingest.workday_suppliers",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_suppliers.sql",
      "original_file_path": "models/raw2source/workday/workday_suppliers.sql",
      "name": "workday_suppliers",
      "alias": "workday_suppliers",
      "checksum": {
        "name": "sha256",
        "checksum": "257ea3927944a51535047a2c993419e3cbfc72cd3d30fd5f1759f343ec6f11ae"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_suppliers"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_suppliers.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/workday/workday_suppliers.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "supplier_key"
      },
      "created_at": 1650312443.0293832,
      "compiled_sql": "\n\nwith source_data as (\n        select\n            raw_data as raw_json,\n            raw_filename,\n            x.raw_inserted_timestamp\n        from HR_RAW.workday.workday_suppliers x\n\n),\n\nraw_parsed as ( \nselect\n        raw_json:Workday_ID::string as Workday_ID\n        , raw_json:Status::string as status\n        , raw_json:Last_Updated_Date::date::Timestamp_TZ as last_updated_date\n        , raw_json:Created_Moment::date as Created_date\n        , raw_json:Report_Effective_Date::date::Timestamp_TZ as timestamp_effective\n        , raw_json:Supplier_Category::string as supplier_category\n        , raw_json:Supplier_Name::string as supplier_name\n\nfrom source_data\nqualify row_number() over (partition by workday_id, timestamp_effective order by timestamp_effective asc) = 1\n),\n\nsuppliers_hash as (\nselect  Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name,\n        hash(Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,supplier_category\n        ,supplier_name\n        ) as row_hash\nfrom    raw_parsed\n)\n\n\n\n,final_new_records as\n(\nselect  Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,row_hash\nfrom    suppliers_hash\n\n\n)\n\n,final as (\nselect  Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,row_hash\n        , case when LAG(row_hash) over(partition by Workday_ID order by timestamp_effective)\n            <> row_hash\n            or LAG(row_hash) over(partition by Workday_ID order by timestamp_effective) is null\n            then 1\n        end as row_change_filter\nfrom    final_new_records\nqualify row_change_filter = 1\n)\n\nselect  md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) as supplier_key\n        ,Workday_ID\n        ,status\n        ,last_updated_date\n        ,created_date\n        ,timestamp_effective\n        ,supplier_category\n        ,supplier_name\n        ,current_timestamp() as etl_updated_timestamp\nfrom    final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_suppliers"
    },
    "model.hrdm_ingest.workday_locations": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'location_key',\n            tags=['WORKDAY_RAW2SOURCE']\n    )\n}}\n\nWITH\nsource_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_locations') }} AS x\n    {% if is_incremental() %}\n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:City::STRING AS city\n        , raw_json:State_Code::STRING AS state_code\n        , raw_json:State_Name::STRING AS state_name\n        , raw_json:Country_Code::STRING AS country_code\n        , raw_json:Country_Name::STRING AS country_name\n        , raw_json:Region::STRING AS region\n        , raw_json:Location_Name::STRING AS location_name\n        , raw_json:Location_Type::STRING AS location_type\n        , raw_json:Location_Usage::STRING AS location_usage\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Time_Zone::STRING AS time_zone\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_Date::DATE AS inactive_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Location_Hierarchies_group::STRING AS location_hierarchies_group\n        , raw_json:Superior_Location::STRING AS superior_location\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, location_hash AS (\n    SELECT\n        workday_id\n        , city\n        , state_code\n        , state_name\n        , country_code\n        , country_name\n        , region\n        , location_name\n        , location_type\n        , location_usage\n        , reference_id\n        , time_zone\n        , inactive AS is_deleted\n        , inactive_date\n        , location_hierarchies_group\n        , superior_location\n        , timestamp_effective\n        , HASH(\n            workday_id\n            , city\n            , state_code\n            , state_name\n            , country_code\n            , country_name\n            , region\n            , location_name\n            , location_type\n            , location_usage\n            , reference_id\n            , time_zone\n            , is_deleted\n            , inactive_date\n            , location_hierarchies_group\n            , superior_location\n        ) AS row_hash\n    FROM raw_parsed\n)\n\n{% if is_incremental() %}\n    , location_last_record AS (\n        SELECT\n            locations.workday_id\n            , locations.city\n            , locations.state_code\n            , locations.state_name\n            , locations.country_code\n            , locations.country_name\n            , locations.region\n            , locations.location_name\n            , locations.location_type\n            , locations.location_usage\n            , locations.reference_id\n            , locations.time_zone\n            , locations.is_deleted\n            , locations.inactive_date\n            , locations.location_hierarchies_group\n            , locations.superior_location\n            , locations.timestamp_effective\n            , locations.row_hash\n            , ROW_NUMBER(\n            ) OVER (\n                PARTITION BY locations.workday_id ORDER BY locations.timestamp_effective DESC) AS rn\n        FROM {{ this }} AS locations\n        QUALIFY rn = 1\n    )\n{% endif %}\n, final_new_records AS (\n    SELECT\n        workday_id\n        , city\n        , state_code\n        , state_name\n        , country_code\n        , country_name\n        , region\n        , location_name\n        , location_type\n        , location_usage\n        , reference_id\n        , time_zone\n        , is_deleted\n        , inactive_date\n        , location_hierarchies_group\n        , superior_location\n        , timestamp_effective\n        , row_hash\n    FROM location_hash\n\n    {% if is_incremental() %}\n        UNION\n        SELECT\n            workday_id\n            , city\n            , state_code\n            , state_name\n            , country_code\n            , country_name\n            , region\n            , location_name\n            , location_type\n            , location_usage\n            , reference_id\n            , time_zone\n            , is_deleted\n            , inactive_date\n            , location_hierarchies_group\n            , superior_location\n            , timestamp_effective\n            , row_hash\n        FROM location_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM location_hash\n            WHERE location_last_record.workday_id = location_hash.workday_id\n                AND location_last_record.timestamp_effective = location_hash.timestamp_effective)\n    {% endif %}\n)\n\n, final AS (\n    SELECT\n        workday_id\n        , city\n        , state_code\n        , state_name\n        , country_code\n        , country_name\n        , region\n        , location_name\n        , location_type\n        , location_usage\n        , reference_id\n        , time_zone\n        , is_deleted\n        , inactive_date\n        , location_hierarchies_group\n        , superior_location\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(\n            row_hash) OVER (\n            PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(\n                row_hash) OVER (\n                PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    {{ dbt_utils.surrogate_key([ \"Workday_ID\", \"timestamp_effective\"]) }} AS location_key\n    , workday_id\n    , city\n    , state_code\n    , state_name\n    , country_code\n    , country_name\n    , region\n    , location_name\n    , location_type\n    , location_usage\n    , reference_id\n    , time_zone\n    , is_deleted\n    , inactive_date\n    , location_hierarchies_group\n    , superior_location\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP(\n    ) AS etl_updated_timestamp\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_locations"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "location_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_locations"
      ],
      "unique_id": "model.hrdm_ingest.workday_locations",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_locations.sql",
      "original_file_path": "models/raw2source/workday/workday_locations.sql",
      "name": "workday_locations",
      "alias": "workday_locations",
      "checksum": {
        "name": "sha256",
        "checksum": "37c867ee481bfa9c3a5a5b90f7fbcb0239d502ae5f6cf554f534c3519cd9ddcf"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_locations"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_locations.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/workday/workday_locations.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "location_key"
      },
      "created_at": 1650312443.038744,
      "compiled_sql": "\n\nWITH\nsource_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_locations AS x\n    \n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_locations )\n    \n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:City::STRING AS city\n        , raw_json:State_Code::STRING AS state_code\n        , raw_json:State_Name::STRING AS state_name\n        , raw_json:Country_Code::STRING AS country_code\n        , raw_json:Country_Name::STRING AS country_name\n        , raw_json:Region::STRING AS region\n        , raw_json:Location_Name::STRING AS location_name\n        , raw_json:Location_Type::STRING AS location_type\n        , raw_json:Location_Usage::STRING AS location_usage\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Time_Zone::STRING AS time_zone\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_Date::DATE AS inactive_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Location_Hierarchies_group::STRING AS location_hierarchies_group\n        , raw_json:Superior_Location::STRING AS superior_location\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, location_hash AS (\n    SELECT\n        workday_id\n        , city\n        , state_code\n        , state_name\n        , country_code\n        , country_name\n        , region\n        , location_name\n        , location_type\n        , location_usage\n        , reference_id\n        , time_zone\n        , inactive AS is_deleted\n        , inactive_date\n        , location_hierarchies_group\n        , superior_location\n        , timestamp_effective\n        , HASH(\n            workday_id\n            , city\n            , state_code\n            , state_name\n            , country_code\n            , country_name\n            , region\n            , location_name\n            , location_type\n            , location_usage\n            , reference_id\n            , time_zone\n            , is_deleted\n            , inactive_date\n            , location_hierarchies_group\n            , superior_location\n        ) AS row_hash\n    FROM raw_parsed\n)\n\n\n    , location_last_record AS (\n        SELECT\n            locations.workday_id\n            , locations.city\n            , locations.state_code\n            , locations.state_name\n            , locations.country_code\n            , locations.country_name\n            , locations.region\n            , locations.location_name\n            , locations.location_type\n            , locations.location_usage\n            , locations.reference_id\n            , locations.time_zone\n            , locations.is_deleted\n            , locations.inactive_date\n            , locations.location_hierarchies_group\n            , locations.superior_location\n            , locations.timestamp_effective\n            , locations.row_hash\n            , ROW_NUMBER(\n            ) OVER (\n                PARTITION BY locations.workday_id ORDER BY locations.timestamp_effective DESC) AS rn\n        FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_locations AS locations\n        QUALIFY rn = 1\n    )\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , city\n        , state_code\n        , state_name\n        , country_code\n        , country_name\n        , region\n        , location_name\n        , location_type\n        , location_usage\n        , reference_id\n        , time_zone\n        , is_deleted\n        , inactive_date\n        , location_hierarchies_group\n        , superior_location\n        , timestamp_effective\n        , row_hash\n    FROM location_hash\n\n    \n        UNION\n        SELECT\n            workday_id\n            , city\n            , state_code\n            , state_name\n            , country_code\n            , country_name\n            , region\n            , location_name\n            , location_type\n            , location_usage\n            , reference_id\n            , time_zone\n            , is_deleted\n            , inactive_date\n            , location_hierarchies_group\n            , superior_location\n            , timestamp_effective\n            , row_hash\n        FROM location_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM location_hash\n            WHERE location_last_record.workday_id = location_hash.workday_id\n                AND location_last_record.timestamp_effective = location_hash.timestamp_effective)\n    \n)\n\n, final AS (\n    SELECT\n        workday_id\n        , city\n        , state_code\n        , state_name\n        , country_code\n        , country_name\n        , region\n        , location_name\n        , location_type\n        , location_usage\n        , reference_id\n        , time_zone\n        , is_deleted\n        , inactive_date\n        , location_hierarchies_group\n        , superior_location\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(\n            row_hash) OVER (\n            PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(\n                row_hash) OVER (\n                PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS location_key\n    , workday_id\n    , city\n    , state_code\n    , state_name\n    , country_code\n    , country_name\n    , region\n    , location_name\n    , location_type\n    , location_usage\n    , reference_id\n    , time_zone\n    , is_deleted\n    , inactive_date\n    , location_hierarchies_group\n    , superior_location\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP(\n    ) AS etl_updated_timestamp\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_locations"
    },
    "model.hrdm_ingest.workday_cost_centers": {
      "raw_sql": "{{\n  config(\n    materialized = \"incremental\",\n    unique_key='cost_center_key',\n    tags=['WORKDAY_RAW2SOURCE']\n  )\n}}\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_cost_centers') }} AS x\n    {% if is_incremental() %}\n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Name::STRING AS cost_center_name\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Code::STRING AS cost_center_code\n        , raw_json:Included_by_Organizations_group::VARIANT AS included_by_organizations_group\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_Date::DATE AS inactive_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Created_Moment::DATE AS created_date\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, cost_center_hash AS (\n    SELECT\n        workday_id\n        , cost_center_name\n        , reference_id\n        , cost_center_code\n        , included_by_organizations_group\n        , inactive AS is_deleted\n        , inactive_date\n        , timestamp_effective\n        , created_date\n        , HASH(workday_id\n            , cost_center_name\n            , reference_id\n            , cost_center_code\n            , included_by_organizations_group\n            , is_deleted\n            , inactive_date\n            , created_date) AS row_hash\n    FROM raw_parsed\n)\n\n{% if is_incremental() %}\n    , cost_center_last_record AS (\n        SELECT\n            workday_id\n            , cost_center_name\n            , reference_id\n            , cost_center_code\n            , included_by_organizations_group\n            , is_deleted\n            , inactive_date\n            , created_date\n            , timestamp_effective\n            , row_hash\n            , ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) AS rn\n        FROM {{ this }}\n        QUALIFY rn = 1\n    )\n{% endif %}\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , cost_center_name\n        , reference_id\n        , cost_center_code\n        , included_by_organizations_group\n        , is_deleted\n        , inactive_date\n        , created_date\n        , timestamp_effective\n        , row_hash\n    FROM cost_center_hash\n\n    {% if is_incremental() %}\n        UNION\n        SELECT\n            workday_id\n            , cost_center_name\n            , reference_id\n            , cost_center_code\n            , included_by_organizations_group\n            , is_deleted\n            , inactive_date\n            , created_date\n            , timestamp_effective\n            , row_hash\n        FROM cost_center_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM cost_center_hash\n            WHERE cost_center_last_record.workday_id = cost_center_hash.workday_id\n                AND cost_center_last_record.timestamp_effective = cost_center_hash.timestamp_effective)\n    {% endif %}\n)\n\n\n, final AS (\n    SELECT\n        workday_id\n        , cost_center_name\n        , reference_id\n        , cost_center_code\n        , included_by_organizations_group\n        , is_deleted\n        , inactive_date\n        , created_date\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    {{ dbt_utils.surrogate_key([\"Workday_ID\", \"timestamp_effective\"]) }} AS cost_center_key\n    , workday_id\n    , cost_center_name\n    , reference_id\n    , cost_center_code\n    , included_by_organizations_group\n    , is_deleted\n    , inactive_date\n    , created_date\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_cost_centers"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "cost_center_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_cost_centers"
      ],
      "unique_id": "model.hrdm_ingest.workday_cost_centers",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_cost_centers.sql",
      "original_file_path": "models/raw2source/workday/workday_cost_centers.sql",
      "name": "workday_cost_centers",
      "alias": "workday_cost_centers",
      "checksum": {
        "name": "sha256",
        "checksum": "c9225a74bd200d1c77866e1f4568ae455a2c9cff1929b5708682b86755f03ae7"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_cost_centers"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_cost_centers.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/workday/workday_cost_centers.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "cost_center_key"
      },
      "created_at": 1650312443.0479133,
      "compiled_sql": "\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_cost_centers AS x\n    \n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_cost_centers )\n    \n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Name::STRING AS cost_center_name\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Code::STRING AS cost_center_code\n        , raw_json:Included_by_Organizations_group::VARIANT AS included_by_organizations_group\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Inactive_Date::DATE AS inactive_date\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Created_Moment::DATE AS created_date\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, cost_center_hash AS (\n    SELECT\n        workday_id\n        , cost_center_name\n        , reference_id\n        , cost_center_code\n        , included_by_organizations_group\n        , inactive AS is_deleted\n        , inactive_date\n        , timestamp_effective\n        , created_date\n        , HASH(workday_id\n            , cost_center_name\n            , reference_id\n            , cost_center_code\n            , included_by_organizations_group\n            , is_deleted\n            , inactive_date\n            , created_date) AS row_hash\n    FROM raw_parsed\n)\n\n\n    , cost_center_last_record AS (\n        SELECT\n            workday_id\n            , cost_center_name\n            , reference_id\n            , cost_center_code\n            , included_by_organizations_group\n            , is_deleted\n            , inactive_date\n            , created_date\n            , timestamp_effective\n            , row_hash\n            , ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) AS rn\n        FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_cost_centers\n        QUALIFY rn = 1\n    )\n\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , cost_center_name\n        , reference_id\n        , cost_center_code\n        , included_by_organizations_group\n        , is_deleted\n        , inactive_date\n        , created_date\n        , timestamp_effective\n        , row_hash\n    FROM cost_center_hash\n\n    \n        UNION\n        SELECT\n            workday_id\n            , cost_center_name\n            , reference_id\n            , cost_center_code\n            , included_by_organizations_group\n            , is_deleted\n            , inactive_date\n            , created_date\n            , timestamp_effective\n            , row_hash\n        FROM cost_center_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM cost_center_hash\n            WHERE cost_center_last_record.workday_id = cost_center_hash.workday_id\n                AND cost_center_last_record.timestamp_effective = cost_center_hash.timestamp_effective)\n    \n)\n\n\n, final AS (\n    SELECT\n        workday_id\n        , cost_center_name\n        , reference_id\n        , cost_center_code\n        , included_by_organizations_group\n        , is_deleted\n        , inactive_date\n        , created_date\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS cost_center_key\n    , workday_id\n    , cost_center_name\n    , reference_id\n    , cost_center_code\n    , included_by_organizations_group\n    , is_deleted\n    , inactive_date\n    , created_date\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_cost_centers"
    },
    "model.hrdm_ingest.workday_locations_hierarchy": {
      "raw_sql": "{{\n  config(\n    materialized = \"incremental\",\n    unique_key='location_hierarchy_key',\n    tags=['WORKDAY_RAW2SOURCE']\n  )\n}}\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_locations_hierarchy') }} AS x\n    {% if is_incremental() %}\n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Name::STRING AS \"name\"\n        , raw_json:Superior_Organization::STRING AS superior_organization\n        , raw_json:Level_01_from_the_Top::STRING AS level_01_from_the_top\n        , raw_json:Level_02_from_the_Top::STRING AS level_02_from_the_top\n        , raw_json:Level_03_from_the_Top::STRING AS level_03_from_the_top\n        , raw_json:Level_04_from_the_Top::STRING AS level_04_from_the_top\n        , raw_json:Level_05_from_the_Top::STRING AS level_05_from_the_top\n        , raw_json:Level_06_from_the_Top::STRING AS level_06_from_the_top\n        , raw_json:Level_07_from_the_Top::STRING AS level_07_from_the_top\n        , raw_json:Time_Zone::STRING AS time_zone\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, locations_hierarchy_hash AS (\n    SELECT\n        workday_id\n        , name\n        , superior_organization\n        , level_01_from_the_top\n        , level_02_from_the_top\n        , level_03_from_the_top\n        , level_04_from_the_top\n        , level_05_from_the_top\n        , level_06_from_the_top\n        , level_07_from_the_top\n        , time_zone\n        , timestamp_effective\n        , HASH(workday_id\n            , name\n            , superior_organization\n            , level_01_from_the_top\n            , level_02_from_the_top\n            , level_03_from_the_top\n            , level_04_from_the_top\n            , level_05_from_the_top\n            , level_06_from_the_top\n            , level_07_from_the_top\n            , time_zone) AS row_hash\n    FROM raw_parsed\n)\n\n{% if is_incremental() %}\n    , locations_hierarchy_last_record AS (\n        SELECT\n            workday_id\n            , name\n            , superior_organization\n            , level_01_from_the_top\n            , level_02_from_the_top\n            , level_03_from_the_top\n            , level_04_from_the_top\n            , level_05_from_the_top\n            , level_06_from_the_top\n            , level_07_from_the_top\n            , time_zone\n            , timestamp_effective\n            , row_hash\n            , ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) AS rn\n        FROM {{ this }}\n        QUALIFY rn = 1\n    )\n{% endif %}\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , name\n        , superior_organization\n        , level_01_from_the_top\n        , level_02_from_the_top\n        , level_03_from_the_top\n        , level_04_from_the_top\n        , level_05_from_the_top\n        , level_06_from_the_top\n        , level_07_from_the_top\n        , time_zone\n        , timestamp_effective\n        , row_hash\n    FROM locations_hierarchy_hash\n\n    {% if is_incremental() %}\n        UNION\n        SELECT\n            workday_id\n            , name\n            , superior_organization\n            , level_01_from_the_top\n            , level_02_from_the_top\n            , level_03_from_the_top\n            , level_04_from_the_top\n            , level_05_from_the_top\n            , level_06_from_the_top\n            , level_07_from_the_top\n            , time_zone\n            , timestamp_effective\n            , row_hash\n        FROM locations_hierarchy_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM locations_hierarchy_hash\n            WHERE locations_hierarchy_last_record.workday_id = locations_hierarchy_hash.workday_id\n                AND locations_hierarchy_last_record.timestamp_effective = locations_hierarchy_hash.timestamp_effective)\n    {% endif %}\n)\n\n, final AS (\n    SELECT\n        workday_id\n        , name\n        , superior_organization\n        , level_01_from_the_top\n        , level_02_from_the_top\n        , level_03_from_the_top\n        , level_04_from_the_top\n        , level_05_from_the_top\n        , level_06_from_the_top\n        , level_07_from_the_top\n        , time_zone\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    {{ dbt_utils.surrogate_key([\"Workday_ID\", \"timestamp_effective\"]) }} AS location_hierarchy_key\n    , workday_id\n    , name\n    , superior_organization\n    , level_01_from_the_top\n    , level_02_from_the_top\n    , level_03_from_the_top\n    , level_04_from_the_top\n    , level_05_from_the_top\n    , level_06_from_the_top\n    , level_07_from_the_top\n    , time_zone\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_locations_hierarchy"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "location_hierarchy_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_locations_hierarchy"
      ],
      "unique_id": "model.hrdm_ingest.workday_locations_hierarchy",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_locations_hierarchy.sql",
      "original_file_path": "models/raw2source/workday/workday_locations_hierarchy.sql",
      "name": "workday_locations_hierarchy",
      "alias": "workday_locations_hierarchy",
      "checksum": {
        "name": "sha256",
        "checksum": "842fa2472069ab11ad2abf744b7cc17ab98370a06e6523ce569f1a36111791e6"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_locations_hierarchy"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_locations_hierarchy.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "location_hierarchy_key"
      },
      "created_at": 1650312443.0568259,
      "compiled_sql": "\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_locations_hierarchy AS x\n    \n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_locations_hierarchy )\n    \n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Name::STRING AS \"name\"\n        , raw_json:Superior_Organization::STRING AS superior_organization\n        , raw_json:Level_01_from_the_Top::STRING AS level_01_from_the_top\n        , raw_json:Level_02_from_the_Top::STRING AS level_02_from_the_top\n        , raw_json:Level_03_from_the_Top::STRING AS level_03_from_the_top\n        , raw_json:Level_04_from_the_Top::STRING AS level_04_from_the_top\n        , raw_json:Level_05_from_the_Top::STRING AS level_05_from_the_top\n        , raw_json:Level_06_from_the_Top::STRING AS level_06_from_the_top\n        , raw_json:Level_07_from_the_Top::STRING AS level_07_from_the_top\n        , raw_json:Time_Zone::STRING AS time_zone\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, locations_hierarchy_hash AS (\n    SELECT\n        workday_id\n        , name\n        , superior_organization\n        , level_01_from_the_top\n        , level_02_from_the_top\n        , level_03_from_the_top\n        , level_04_from_the_top\n        , level_05_from_the_top\n        , level_06_from_the_top\n        , level_07_from_the_top\n        , time_zone\n        , timestamp_effective\n        , HASH(workday_id\n            , name\n            , superior_organization\n            , level_01_from_the_top\n            , level_02_from_the_top\n            , level_03_from_the_top\n            , level_04_from_the_top\n            , level_05_from_the_top\n            , level_06_from_the_top\n            , level_07_from_the_top\n            , time_zone) AS row_hash\n    FROM raw_parsed\n)\n\n\n    , locations_hierarchy_last_record AS (\n        SELECT\n            workday_id\n            , name\n            , superior_organization\n            , level_01_from_the_top\n            , level_02_from_the_top\n            , level_03_from_the_top\n            , level_04_from_the_top\n            , level_05_from_the_top\n            , level_06_from_the_top\n            , level_07_from_the_top\n            , time_zone\n            , timestamp_effective\n            , row_hash\n            , ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) AS rn\n        FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_locations_hierarchy\n        QUALIFY rn = 1\n    )\n\n\n, final_new_records AS (\n    SELECT\n        workday_id\n        , name\n        , superior_organization\n        , level_01_from_the_top\n        , level_02_from_the_top\n        , level_03_from_the_top\n        , level_04_from_the_top\n        , level_05_from_the_top\n        , level_06_from_the_top\n        , level_07_from_the_top\n        , time_zone\n        , timestamp_effective\n        , row_hash\n    FROM locations_hierarchy_hash\n\n    \n        UNION\n        SELECT\n            workday_id\n            , name\n            , superior_organization\n            , level_01_from_the_top\n            , level_02_from_the_top\n            , level_03_from_the_top\n            , level_04_from_the_top\n            , level_05_from_the_top\n            , level_06_from_the_top\n            , level_07_from_the_top\n            , time_zone\n            , timestamp_effective\n            , row_hash\n        FROM locations_hierarchy_last_record\n        WHERE NOT EXISTS (SELECT 1 FROM locations_hierarchy_hash\n            WHERE locations_hierarchy_last_record.workday_id = locations_hierarchy_hash.workday_id\n                AND locations_hierarchy_last_record.timestamp_effective = locations_hierarchy_hash.timestamp_effective)\n    \n)\n\n, final AS (\n    SELECT\n        workday_id\n        , name\n        , superior_organization\n        , level_01_from_the_top\n        , level_02_from_the_top\n        , level_03_from_the_top\n        , level_04_from_the_top\n        , level_05_from_the_top\n        , level_06_from_the_top\n        , level_07_from_the_top\n        , time_zone\n        , timestamp_effective\n        , row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective)\n            != row_hash\n            OR LAG(row_hash) OVER(PARTITION BY workday_id ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nSELECT\n    md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS location_hierarchy_key\n    , workday_id\n    , name\n    , superior_organization\n    , level_01_from_the_top\n    , level_02_from_the_top\n    , level_03_from_the_top\n    , level_04_from_the_top\n    , level_05_from_the_top\n    , level_06_from_the_top\n    , level_07_from_the_top\n    , time_zone\n    , timestamp_effective\n    , row_hash\n    , CURRENT_TIMESTAMP() AS etl_updated_timestamp\nFROM final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_locations_hierarchy"
    },
    "model.hrdm_ingest.workday_transactions": {
      "raw_sql": "{{\n    config(\n            materialized=\"incremental\",\n            unique_key = 'transaction_key',\n            tags=['WORKDAY_RAW2SOURCE']\n    )\n}}\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_transactions') }} AS x\n\n    {% if is_incremental() %}\nWHERE raw_inserted_timestamp >=\n    (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\nraw_parsed as (\nselect   raw_json:Business_Process_ID::string                   as Business_Process_ID\n         ,raw_json:is_Worker_BP::boolean                        as is_Worker_BP\n         ,raw_json:is_Staffing_BP::boolean                      as is_Staffing_BP\n         ,raw_json:is_Job_Requisition_BP::boolean               as is_Job_Requisition_BP\n         ,raw_json:is_Personal_Information_BP::boolean          as is_Personal_Information_BP\n         ,raw_json:is_Standalone_BP::boolean                    as is_Standalone_BP\n         ,raw_json:Business_Process_Name::string                as Business_Process_Name\n         ,raw_json:Business_Process_Reason_Category::string     as Business_Process_Reason_Category\n         ,raw_json:Business_Process_Reason::string              as Business_Process_Reason\n         ,raw_json:Business_Process_Type::string                as Business_Process_Type\n         ,raw_json:Part_of_Business_Process::string             as Part_of_Business_Process\n         ,raw_json:Date_Time_Completed::date::Timestamp_TZ      as Date_Time_Completed\n         ,raw_json:Date_Rescinded::date                         as Date_Rescinded\n         ,raw_json:Corrected::string                            as Corrected\n         ,raw_json:Last_Correction_Event_Date::date             as Last_Correction_Event_Date\n         ,raw_json:Secondary_Termination_Reasons::string        as Secondary_Termination_Reasons\n         ,raw_json:Date_of_Birth::date                          as Date_of_Birth\n         ,raw_json:Gender::string                               as Gender\n         ,raw_json:Ethnicity::string                            as Ethnicity\n         ,raw_json:Pronouns::string                             as Pronouns\n         ,raw_json:Gender_Identity::string                      as Gender_Identity\n         ,raw_json:Sexual_Orientation::string                   as Sexual_Orientation\n         ,raw_json:Disability::string                           as Disability\n         ,raw_json:Military_Status::string                      as Military_Status\n         ,raw_json:Employee_ID::string                          as Employee_ID\n         ,raw_json:Position_ID::string                          as Position_ID\n         ,raw_json:Business_Title::string                       as Business_Title\n         ,raw_json:Work_Space_Name::string                      as Work_Space_Name\n         ,raw_json:Work_Space_ID::string                        as Work_Space_ID\n         ,raw_json:Pay_Rate_Type::string                        as Pay_Rate_Type\n         ,raw_json:Time_Type::string                            as Time_Type\n         ,raw_json:Requisition_ID::string                       as Requisition_ID\n         ,raw_json:Location::string                             as Location\n         ,raw_json:Job_Profile::string                          as Job_Profile\n         ,raw_json:Work_Email_Address::string                   as Work_Email_Address\n         ,raw_json:Budgeted_Start_Date::date                    as Budgeted_Start_Date\n         ,raw_json:Finance_Only_Start_Date::date                as Finance_Only_Start_Date\n         ,raw_json:Position_Job_Profile::string                 as Position_Job_Profile\n         ,raw_json:Position_Location::string                    as Position_Location\n         ,raw_json:Position_Time_Type::string                   as Position_Time_Type\n         ,raw_json:Position_Title::string                       as Position_Title\n         ,raw_json:Position_Worker_Type::string                 as Position_Worker_Type\n         ,raw_json:TA_Forecasted_Start_Date::date               as TA_Forecasted_Start_Date\n         ,raw_json:Employee_Contingent_Worker_Type::string      as Employee_Contingent_Worker_Type\n         ,raw_json:LDAP::string                                 as LDAP\n         ,raw_json:Public_Pronoun::string                       as Public_Pronoun\n         ,raw_json:Job_Requisition_Organizations_group::variant as Job_Requisition_Organizations_group\n         ,raw_json:Worker_Position_Organizations_group::variant as Worker_Position_Organizations_group\n         ,raw_json:Effective_Date::date                         as timestamp_effective\n\nFROM    source_data\n\nQUALIFY row_number() OVER (PARTITION BY Business_Process_ID, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n),\n\nWorker_Position_Organizations_Cte as (\n  select    Business_Process_ID,\n            parse_json(Worker_Position_Organizations_group) as o\n  from      raw_parsed\n),\n\nWorker_Position_Organizations_flattened as (\nselect  Worker_Position_Organizations_Cte.Business_Process_ID,\n        flattened.value:Workday_ID::string as Workday_ID,\n        flattened.value:Type::string as Type\nfrom    Worker_Position_Organizations_Cte,\n        lateral flatten( input => o ) as flattened\n) ,\n\nsource_data_flattened as (\nselect    r.Business_Process_ID\n         ,r.is_Worker_BP\n         ,r.is_Staffing_BP\n         ,r.is_Job_Requisition_BP\n         ,r.is_Personal_Information_BP\n         ,r.is_Standalone_BP\n         ,r.Business_Process_Name\n         ,r.Business_Process_Reason_Category\n         ,r.Business_Process_Reason\n         ,r.Business_Process_Type\n         ,r.Part_of_Business_Process\n         ,r.Date_Time_Completed\n         ,r.Date_Rescinded\n         ,r.Corrected\n         ,r.Last_Correction_Event_Date\n         ,r.Secondary_Termination_Reasons\n         ,r.Date_of_Birth\n         ,r.Gender\n         ,r.Ethnicity\n         ,r.Pronouns\n         ,r.Gender_Identity\n         ,r.Sexual_Orientation\n         ,r.Disability\n         ,r.Military_Status\n         ,r.Employee_ID\n         ,r.Position_ID\n         ,r.Business_Title\n         ,r.Work_Space_Name\n         ,r.Work_Space_ID\n         ,r.Pay_Rate_Type\n         ,r.Time_Type\n         ,r.Requisition_ID\n         ,r.Location\n         ,r.Job_Profile\n         ,r.Work_Email_Address\n         ,r.Budgeted_Start_Date\n         ,r.Finance_Only_Start_Date\n         ,r.Position_Job_Profile\n         ,r.Position_Location\n         ,r.Position_Time_Type\n         ,r.Position_Title\n         ,r.Position_Worker_Type\n         ,r.TA_Forecasted_Start_Date\n         ,r.Employee_Contingent_Worker_Type\n         ,r.LDAP\n         ,r.Public_Pronoun\n         ,r.Job_Requisition_Organizations_group\n         ,r.Worker_Position_Organizations_group\n         ,r.timestamp_effective\n         ,position_company.workday_id as Worker_Position_Company\n         ,position_cost_center.workday_id as Worker_Position_Cost_Center\n         ,position_functional_tier.workday_id as Worker_Position_Functional_Tier\n         ,position_market.workday_id as Worker_Position_Market\n         ,position_pay_group.workday_id as Worker_Position_Pay_Group\n         ,position_segment.workday_id as Worker_Position_Segment\n         ,position_supervisory.workday_id as Worker_Position_Supervisory\n         ,position_vertical.workday_id as Worker_Position_Vertical\nFROM     raw_parsed r\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Company'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_company\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Cost Center'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_cost_center\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Functional Tier'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_functional_tier\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Market'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_market\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Pay Group'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_pay_group\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Segment'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_segment\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Supervisory'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_supervisory\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Vertical'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_vertical\n) ,\n\ntransaction_hash AS (\nselect  Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,HASH(Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ) as row_hash\n\nfrom  source_data_flattened\n)\n\n{% if is_incremental() %}\n,last_record as\n(\nselect  Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,row_hash\nfrom    {{ this }} transactions\nqualify row_number() over (partition by Business_Process_ID order by timestamp_effective desc) = 1\n)\n{% endif %}\n\n\n,final_new_records as\n(\nselect  Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,row_hash\nFROM    transaction_hash\n\n    {% if is_incremental() %}\n  UNION\n  select Business_Process_ID\n         ,is_Worker_BP\n         ,is_Staffing_BP\n         ,is_Job_Requisition_BP\n         ,is_Personal_Information_BP\n         ,is_Standalone_BP\n         ,Business_Process_Name\n         ,Business_Process_Reason_Category\n         ,Business_Process_Reason\n         ,Business_Process_Type\n         ,Part_of_Business_Process\n         ,Date_Time_Completed\n         ,Date_Rescinded\n         ,Corrected\n         ,Last_Correction_Event_Date\n         ,Secondary_Termination_Reasons\n         ,Date_of_Birth\n         ,Gender\n         ,Ethnicity\n         ,Pronouns\n         ,Gender_Identity\n         ,Sexual_Orientation\n         ,Disability\n         ,Military_Status\n         ,Employee_ID\n         ,Position_ID\n         ,Business_Title\n         ,Work_Space_Name\n         ,Work_Space_ID\n         ,Pay_Rate_Type\n         ,Time_Type\n         ,Requisition_ID\n         ,Location\n         ,Job_Profile\n         ,Work_Email_Address\n         ,Job_Requisition_Organizations_group\n         ,Worker_Position_Organizations_group\n         ,Worker_Position_Company\n         ,Worker_Position_Cost_Center\n         ,Worker_Position_Functional_Tier\n         ,Worker_Position_Market\n         ,Worker_Position_Pay_Group\n         ,Worker_Position_Segment\n         ,Worker_Position_Supervisory\n         ,Worker_Position_Vertical\n         ,Budgeted_Start_Date\n         ,Finance_Only_Start_Date\n         ,Position_Job_Profile\n         ,Position_Location\n         ,Position_Time_Type\n         ,Position_Title\n         ,Position_Worker_Type\n         ,TA_Forecasted_Start_Date\n         ,Employee_Contingent_Worker_Type\n         ,LDAP\n         ,Public_Pronoun\n         ,timestamp_effective\n         ,row_hash\n  from  last_record l\n  WHERE NOT EXISTS (SELECT 1 FROM transaction_hash h\n                    WHERE l.Business_Process_ID = h.Business_Process_ID\n                    AND l.timestamp_effective = h.timestamp_effective)\n{% endif %}\n)\n\n,final as (\nselect  Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY Business_Process_ID ORDER BY timestamp_effective)\n            <> row_hash\n            OR LAG(row_hash) OVER(PARTITION BY Business_Process_ID ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nselect   {{dbt_utils.surrogate_key([ \"Business_Process_ID\", \"timestamp_effective\"]) }} AS transaction_key\n        ,Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,row_hash\n        ,current_timestamp() as etl_updated_timestamp\nfrom    final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.statement"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_transactions"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "transaction_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_transactions"
      ],
      "unique_id": "model.hrdm_ingest.workday_transactions",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_transactions.sql",
      "original_file_path": "models/raw2source/workday/workday_transactions.sql",
      "name": "workday_transactions",
      "alias": "workday_transactions",
      "checksum": {
        "name": "sha256",
        "checksum": "2f243e8fd80ce93c4166955511bd5e600c5d4b9d58ca1a6efaeccca22ae373d3"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_transactions"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_transactions.sql",
      "build_path": "target/run/hrdm_ingest/models/raw2source/workday/workday_transactions.sql",
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "transaction_key"
      },
      "created_at": 1650312443.066566,
      "compiled_sql": "\n\nWITH source_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_transactions AS x\n\n    \n)\n\nraw_parsed as (\nselect   raw_json:Business_Process_ID::string                   as Business_Process_ID\n         ,raw_json:is_Worker_BP::boolean                        as is_Worker_BP\n         ,raw_json:is_Staffing_BP::boolean                      as is_Staffing_BP\n         ,raw_json:is_Job_Requisition_BP::boolean               as is_Job_Requisition_BP\n         ,raw_json:is_Personal_Information_BP::boolean          as is_Personal_Information_BP\n         ,raw_json:is_Standalone_BP::boolean                    as is_Standalone_BP\n         ,raw_json:Business_Process_Name::string                as Business_Process_Name\n         ,raw_json:Business_Process_Reason_Category::string     as Business_Process_Reason_Category\n         ,raw_json:Business_Process_Reason::string              as Business_Process_Reason\n         ,raw_json:Business_Process_Type::string                as Business_Process_Type\n         ,raw_json:Part_of_Business_Process::string             as Part_of_Business_Process\n         ,raw_json:Date_Time_Completed::date::Timestamp_TZ      as Date_Time_Completed\n         ,raw_json:Date_Rescinded::date                         as Date_Rescinded\n         ,raw_json:Corrected::string                            as Corrected\n         ,raw_json:Last_Correction_Event_Date::date             as Last_Correction_Event_Date\n         ,raw_json:Secondary_Termination_Reasons::string        as Secondary_Termination_Reasons\n         ,raw_json:Date_of_Birth::date                          as Date_of_Birth\n         ,raw_json:Gender::string                               as Gender\n         ,raw_json:Ethnicity::string                            as Ethnicity\n         ,raw_json:Pronouns::string                             as Pronouns\n         ,raw_json:Gender_Identity::string                      as Gender_Identity\n         ,raw_json:Sexual_Orientation::string                   as Sexual_Orientation\n         ,raw_json:Disability::string                           as Disability\n         ,raw_json:Military_Status::string                      as Military_Status\n         ,raw_json:Employee_ID::string                          as Employee_ID\n         ,raw_json:Position_ID::string                          as Position_ID\n         ,raw_json:Business_Title::string                       as Business_Title\n         ,raw_json:Work_Space_Name::string                      as Work_Space_Name\n         ,raw_json:Work_Space_ID::string                        as Work_Space_ID\n         ,raw_json:Pay_Rate_Type::string                        as Pay_Rate_Type\n         ,raw_json:Time_Type::string                            as Time_Type\n         ,raw_json:Requisition_ID::string                       as Requisition_ID\n         ,raw_json:Location::string                             as Location\n         ,raw_json:Job_Profile::string                          as Job_Profile\n         ,raw_json:Work_Email_Address::string                   as Work_Email_Address\n         ,raw_json:Budgeted_Start_Date::date                    as Budgeted_Start_Date\n         ,raw_json:Finance_Only_Start_Date::date                as Finance_Only_Start_Date\n         ,raw_json:Position_Job_Profile::string                 as Position_Job_Profile\n         ,raw_json:Position_Location::string                    as Position_Location\n         ,raw_json:Position_Time_Type::string                   as Position_Time_Type\n         ,raw_json:Position_Title::string                       as Position_Title\n         ,raw_json:Position_Worker_Type::string                 as Position_Worker_Type\n         ,raw_json:TA_Forecasted_Start_Date::date               as TA_Forecasted_Start_Date\n         ,raw_json:Employee_Contingent_Worker_Type::string      as Employee_Contingent_Worker_Type\n         ,raw_json:LDAP::string                                 as LDAP\n         ,raw_json:Public_Pronoun::string                       as Public_Pronoun\n         ,raw_json:Job_Requisition_Organizations_group::variant as Job_Requisition_Organizations_group\n         ,raw_json:Worker_Position_Organizations_group::variant as Worker_Position_Organizations_group\n         ,raw_json:Effective_Date::date                         as timestamp_effective\n\nFROM    source_data\n\nQUALIFY row_number() OVER (PARTITION BY Business_Process_ID, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n),\n\nWorker_Position_Organizations_Cte as (\n  select    Business_Process_ID,\n            parse_json(Worker_Position_Organizations_group) as o\n  from      raw_parsed\n),\n\nWorker_Position_Organizations_flattened as (\nselect  Worker_Position_Organizations_Cte.Business_Process_ID,\n        flattened.value:Workday_ID::string as Workday_ID,\n        flattened.value:Type::string as Type\nfrom    Worker_Position_Organizations_Cte,\n        lateral flatten( input => o ) as flattened\n) ,\n\nsource_data_flattened as (\nselect    r.Business_Process_ID\n         ,r.is_Worker_BP\n         ,r.is_Staffing_BP\n         ,r.is_Job_Requisition_BP\n         ,r.is_Personal_Information_BP\n         ,r.is_Standalone_BP\n         ,r.Business_Process_Name\n         ,r.Business_Process_Reason_Category\n         ,r.Business_Process_Reason\n         ,r.Business_Process_Type\n         ,r.Part_of_Business_Process\n         ,r.Date_Time_Completed\n         ,r.Date_Rescinded\n         ,r.Corrected\n         ,r.Last_Correction_Event_Date\n         ,r.Secondary_Termination_Reasons\n         ,r.Date_of_Birth\n         ,r.Gender\n         ,r.Ethnicity\n         ,r.Pronouns\n         ,r.Gender_Identity\n         ,r.Sexual_Orientation\n         ,r.Disability\n         ,r.Military_Status\n         ,r.Employee_ID\n         ,r.Position_ID\n         ,r.Business_Title\n         ,r.Work_Space_Name\n         ,r.Work_Space_ID\n         ,r.Pay_Rate_Type\n         ,r.Time_Type\n         ,r.Requisition_ID\n         ,r.Location\n         ,r.Job_Profile\n         ,r.Work_Email_Address\n         ,r.Budgeted_Start_Date\n         ,r.Finance_Only_Start_Date\n         ,r.Position_Job_Profile\n         ,r.Position_Location\n         ,r.Position_Time_Type\n         ,r.Position_Title\n         ,r.Position_Worker_Type\n         ,r.TA_Forecasted_Start_Date\n         ,r.Employee_Contingent_Worker_Type\n         ,r.LDAP\n         ,r.Public_Pronoun\n         ,r.Job_Requisition_Organizations_group\n         ,r.Worker_Position_Organizations_group\n         ,r.timestamp_effective\n         ,position_company.workday_id as Worker_Position_Company\n         ,position_cost_center.workday_id as Worker_Position_Cost_Center\n         ,position_functional_tier.workday_id as Worker_Position_Functional_Tier\n         ,position_market.workday_id as Worker_Position_Market\n         ,position_pay_group.workday_id as Worker_Position_Pay_Group\n         ,position_segment.workday_id as Worker_Position_Segment\n         ,position_supervisory.workday_id as Worker_Position_Supervisory\n         ,position_vertical.workday_id as Worker_Position_Vertical\nFROM     raw_parsed r\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Company'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_company\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Cost Center'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_cost_center\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Functional Tier'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_functional_tier\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Market'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_market\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Pay Group'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_pay_group\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Segment'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_segment\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Supervisory'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_supervisory\nLEFT JOIN  LATERAL (SELECT  workday_id\n                    FROM    Worker_Position_Organizations_flattened f\n                    WHERE   type = 'Vertical'\n                    AND     f.Business_Process_ID = r.Business_Process_ID\n                    ) position_vertical\n) ,\n\ntransaction_hash AS (\nselect  Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,HASH(Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ) as row_hash\n\nfrom  source_data_flattened\n)\n\n\n\n\n,final_new_records as\n(\nselect  Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,row_hash\nFROM    transaction_hash\n\n    \n)\n\n,final as (\nselect  Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY Business_Process_ID ORDER BY timestamp_effective)\n            <> row_hash\n            OR LAG(row_hash) OVER(PARTITION BY Business_Process_ID ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nselect   md5(cast(coalesce(cast(Business_Process_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS transaction_key\n        ,Business_Process_ID\n        ,is_Worker_BP\n        ,is_Staffing_BP\n        ,is_Job_Requisition_BP\n        ,is_Personal_Information_BP\n        ,is_Standalone_BP\n        ,Business_Process_Name\n        ,Business_Process_Reason_Category\n        ,Business_Process_Reason\n        ,Business_Process_Type\n        ,Part_of_Business_Process\n        ,Date_Time_Completed\n        ,Date_Rescinded\n        ,Corrected\n        ,Last_Correction_Event_Date\n        ,Secondary_Termination_Reasons\n        ,Date_of_Birth\n        ,Gender\n        ,Ethnicity\n        ,Pronouns\n        ,Gender_Identity\n        ,Sexual_Orientation\n        ,Disability\n        ,Military_Status\n        ,Employee_ID\n        ,Position_ID\n        ,Business_Title\n        ,Work_Space_Name\n        ,Work_Space_ID\n        ,Pay_Rate_Type\n        ,Time_Type\n        ,Requisition_ID\n        ,Location\n        ,Job_Profile\n        ,Work_Email_Address\n        ,Job_Requisition_Organizations_group\n        ,Worker_Position_Organizations_group\n        ,Worker_Position_Company\n        ,Worker_Position_Cost_Center\n        ,Worker_Position_Functional_Tier\n        ,Worker_Position_Market\n        ,Worker_Position_Pay_Group\n        ,Worker_Position_Segment\n        ,Worker_Position_Supervisory\n        ,Worker_Position_Vertical\n        ,Budgeted_Start_Date\n        ,Finance_Only_Start_Date\n        ,Position_Job_Profile\n        ,Position_Location\n        ,Position_Time_Type\n        ,Position_Title\n        ,Position_Worker_Type\n        ,TA_Forecasted_Start_Date\n        ,Employee_Contingent_Worker_Type\n        ,LDAP\n        ,Public_Pronoun\n        ,timestamp_effective\n        ,row_hash\n        ,current_timestamp() as etl_updated_timestamp\nfrom    final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_transactions"
    },
    "model.hrdm_ingest.workday_job_profiles": {
      "raw_sql": "{{\n  config(\n    materialized = \"incremental\",\n    unique_key='job_profiles_key',\n    tags=['WORKDAY_RAW2SOURCE']\n  )\n}}\n\nWITH\nsource_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM {{ idw_package.dynamic_source('workday_raw', 'workday_job_profiles') }} AS x\n    {% if is_incremental() %}\n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM {{ this }} )\n    {% endif %}\n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Compensation_Grade_Hierarchy::STRING AS compensation_grade_hierarchy\n        , raw_json:Job_Profile_Name::STRING AS job_profile_name\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Compensation_Grade::STRING AS compensation_grade\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Job_Classifications_group::STRING AS job_classifications_group\n        , raw_json:Job_Families_on_Job_Profile_group[0]:Job_Family::STRING AS job_family\n        , raw_json:Job_Families_on_Job_Profile_group[0]:Job_Family_Group::STRING AS job_family_group\n        , raw_json:Job_Families_on_Job_Profile_group::STRING AS job_families_on_job_profile_group\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, job_profile_hash AS (\n    SELECT\n        workday_id\n        , compensation_grade_hierarchy\n        , job_profile_name\n        , timestamp_effective\n        , compensation_grade\n        , reference_id\n        , job_classifications_group\n        , job_family\n        , job_family_group\n        , job_families_on_job_profile_group\n        , inactive AS is_deleted\n        , HASH(workday_id\n            , compensation_grade_hierarchy\n            , job_profile_name\n            , compensation_grade\n            , reference_id\n            , job_classifications_group\n            , job_family\n            , job_family_group\n            , job_families_on_job_profile_group\n            , is_deleted) AS row_hash\n    FROM raw_parsed\n)\n\n{% if is_incremental() %}\n    , job_profile_last_record AS (\n        SELECT\n            workday_id\n            , compensation_grade_hierarchy\n            , job_profile_name\n            , timestamp_effective\n            , compensation_grade\n            , reference_id\n            , is_deleted\n            , job_classifications_group\n            , job_family\n            , job_family_group\n            , job_families_on_job_profile_group\n            , row_hash\n            , ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) AS rn\n        FROM {{ this }}\n        QUALIFY rn = 1\n    )\n{% endif %}\n, raw_parsed as (\nselect   raw_json:Workday_ID::string                        as Workday_ID\n        ,raw_json:Compensation_Grade_Hierarchy::string      as Compensation_Grade_Hierarchy\n        ,raw_json:Job_Profile_Name::string                  as Job_Profile_Name\n        ,raw_json:Report_Effective_Date::date::Timestamp_TZ AS timestamp_effective\n        ,raw_json:Compensation_Grade::string                as Compensation_Grade\n        ,raw_json:Reference_ID::string                      as Reference_ID\n        ,raw_json:Inactive::boolean                         as Inactive\n        ,raw_json:Job_Profile_Exempt_Group::string          as Job_Profile_Exempt_Group\n        ,raw_json:Job_Profile_Pay_Rate_Group::string        as Job_Profile_Pay_Rate_Group\n        ,raw_json:Job_Classifications_Group::string         as Job_Classifications_Group\n        ,raw_json:Job_Families_on_Job_Profile_Group[0]:Job_Family::string as Job_Family\n        ,raw_json:Job_Families_on_Job_Profile_Group[0]:Job_Family_Group::string as Job_Family_Group\n        ,raw_json:Job_Families_on_Job_Profile_Group::string as Job_Families_on_Job_Profile_Group\n\nFROM source_data\nQUALIFY row_number() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n),\n\njob_profile_hash AS (\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,Inactive as is_deleted\n        ,HASH(Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted) as row_hash\nfrom    raw_parsed\n)\n\n{% if is_incremental() %}\n,job_profile_last_record as\n(\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,is_deleted\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,row_hash\n        ,row_number() over (partition by  workday_ID order by timestamp_effective desc) rn\nfrom    {{ this }} job_profiles\nqualify rn = 1\n)\n{% endif %}\n\n,final_new_records as\n(\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\nFROM    job_profile_hash\n\n{% if is_incremental() %}\n  UNION\n  select Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\n  from  job_profile_last_record l\n  WHERE NOT EXISTS (SELECT 1 FROM job_profile_hash h\n                    WHERE l.workday_ID = h.workday_ID\n                    AND l.timestamp_effective = h.timestamp_effective)\n{% endif %}\n)\n\n,final as (\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY Workday_ID ORDER BY timestamp_effective)\n            <> row_hash\n            OR LAG(row_hash) OVER(PARTITION BY Workday_ID ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nselect  {{dbt_utils.surrogate_key([ \"Workday_ID\", \"timestamp_effective\"]) }} AS job_profiles_key\n        ,Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\n        ,current_timestamp() as etl_updated_timestamp\nfrom    final",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.idw_package.dynamic_source",
          "macro.dbt.is_incremental",
          "macro.dbt_utils.surrogate_key",
          "macro.logging.log_model_start_event",
          "macro.logging.log_model_end_event",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query"
        ],
        "nodes": [
          "source.hrdm_ingest.workday_raw.workday_job_profiles"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "workday",
        "database": null,
        "tags": [
          "SOURCE",
          "WORKDAY",
          "WORKDAY_RAW2SOURCE"
        ],
        "meta": {},
        "materialized": "incremental",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "unique_key": "job_profiles_key",
        "post-hook": [
          {
            "sql": "{{ logging.log_model_end_event() }}",
            "transaction": true,
            "index": null
          }
        ],
        "pre-hook": [
          {
            "sql": "{{ logging.log_model_start_event() }}",
            "transaction": true,
            "index": null
          }
        ]
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_workday",
      "fqn": [
        "hrdm_ingest",
        "raw2source",
        "workday",
        "workday_job_profiles"
      ],
      "unique_id": "model.hrdm_ingest.workday_job_profiles",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "raw2source/workday/workday_job_profiles.sql",
      "original_file_path": "models/raw2source/workday/workday_job_profiles.sql",
      "name": "workday_job_profiles",
      "alias": "workday_job_profiles",
      "checksum": {
        "name": "sha256",
        "checksum": "7f335fbee1cc94dd8727c0ebbb93f496b0d9996e112f0f2e4922f66eb1c1c628"
      },
      "tags": [
        "SOURCE",
        "WORKDAY",
        "WORKDAY_RAW2SOURCE"
      ],
      "refs": [],
      "sources": [
        [
          "workday_raw",
          "workday_job_profiles"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/hrdm_ingest/models/raw2source/workday/workday_job_profiles.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "transient": false,
        "pre-hook": "{{ logging.log_model_start_event() }}",
        "post-hook": "{{ logging.log_model_end_event() }}",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "tags": [
          "WORKDAY_RAW2SOURCE"
        ],
        "materialized": "incremental",
        "schema": "workday",
        "unique_key": "job_profiles_key"
      },
      "created_at": 1650312443.0772765,
      "compiled_sql": "\n\nWITH\nsource_data AS (\n    SELECT\n        x.raw_data AS raw_json\n        , x.raw_filename\n        , x.raw_inserted_timestamp\n    FROM HR_RAW.workday.workday_job_profiles AS x\n    \n        WHERE x.raw_inserted_timestamp\n            >= (SELECT MAX(etl_updated_timestamp)::DATE FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_job_profiles )\n    \n)\n\n, raw_parsed AS (\n    SELECT\n        raw_json:Workday_ID::STRING AS workday_id\n        , raw_json:Compensation_Grade_Hierarchy::STRING AS compensation_grade_hierarchy\n        , raw_json:Job_Profile_Name::STRING AS job_profile_name\n        , raw_json:Report_Effective_Date::DATE::TIMESTAMP_TZ AS timestamp_effective\n        , raw_json:Compensation_Grade::STRING AS compensation_grade\n        , raw_json:Reference_ID::STRING AS reference_id\n        , raw_json:Inactive::BOOLEAN AS inactive\n        , raw_json:Job_Classifications_group::STRING AS job_classifications_group\n        , raw_json:Job_Families_on_Job_Profile_group[0]:Job_Family::STRING AS job_family\n        , raw_json:Job_Families_on_Job_Profile_group[0]:Job_Family_Group::STRING AS job_family_group\n        , raw_json:Job_Families_on_Job_Profile_group::STRING AS job_families_on_job_profile_group\n\n    FROM source_data\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n)\n\n, job_profile_hash AS (\n    SELECT\n        workday_id\n        , compensation_grade_hierarchy\n        , job_profile_name\n        , timestamp_effective\n        , compensation_grade\n        , reference_id\n        , job_classifications_group\n        , job_family\n        , job_family_group\n        , job_families_on_job_profile_group\n        , inactive AS is_deleted\n        , HASH(workday_id\n            , compensation_grade_hierarchy\n            , job_profile_name\n            , compensation_grade\n            , reference_id\n            , job_classifications_group\n            , job_family\n            , job_family_group\n            , job_families_on_job_profile_group\n            , is_deleted) AS row_hash\n    FROM raw_parsed\n)\n\n\n    , job_profile_last_record AS (\n        SELECT\n            workday_id\n            , compensation_grade_hierarchy\n            , job_profile_name\n            , timestamp_effective\n            , compensation_grade\n            , reference_id\n            , is_deleted\n            , job_classifications_group\n            , job_family\n            , job_family_group\n            , job_families_on_job_profile_group\n            , row_hash\n            , ROW_NUMBER() OVER (PARTITION BY workday_id ORDER BY timestamp_effective DESC) AS rn\n        FROM HR_SOURCE_DEV.DEVHRDM_177_workday.workday_job_profiles\n        QUALIFY rn = 1\n    )\n\n, raw_parsed as (\nselect   raw_json:Workday_ID::string                        as Workday_ID\n        ,raw_json:Compensation_Grade_Hierarchy::string      as Compensation_Grade_Hierarchy\n        ,raw_json:Job_Profile_Name::string                  as Job_Profile_Name\n        ,raw_json:Report_Effective_Date::date::Timestamp_TZ AS timestamp_effective\n        ,raw_json:Compensation_Grade::string                as Compensation_Grade\n        ,raw_json:Reference_ID::string                      as Reference_ID\n        ,raw_json:Inactive::boolean                         as Inactive\n        ,raw_json:Job_Profile_Exempt_Group::string          as Job_Profile_Exempt_Group\n        ,raw_json:Job_Profile_Pay_Rate_Group::string        as Job_Profile_Pay_Rate_Group\n        ,raw_json:Job_Classifications_Group::string         as Job_Classifications_Group\n        ,raw_json:Job_Families_on_Job_Profile_Group[0]:Job_Family::string as Job_Family\n        ,raw_json:Job_Families_on_Job_Profile_Group[0]:Job_Family_Group::string as Job_Family_Group\n        ,raw_json:Job_Families_on_Job_Profile_Group::string as Job_Families_on_Job_Profile_Group\n\nFROM source_data\nQUALIFY row_number() OVER (PARTITION BY workday_id, timestamp_effective ORDER BY timestamp_effective ASC) = 1\n),\n\njob_profile_hash AS (\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,Inactive as is_deleted\n        ,HASH(Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted) as row_hash\nfrom    raw_parsed\n)\n\n\n,job_profile_last_record as\n(\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,is_deleted\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,row_hash\n        ,row_number() over (partition by  workday_ID order by timestamp_effective desc) rn\nfrom    HR_SOURCE_DEV.DEVHRDM_177_workday.workday_job_profiles job_profiles\nqualify rn = 1\n)\n\n\n,final_new_records as\n(\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\nFROM    job_profile_hash\n\n\n  UNION\n  select Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\n  from  job_profile_last_record l\n  WHERE NOT EXISTS (SELECT 1 FROM job_profile_hash h\n                    WHERE l.workday_ID = h.workday_ID\n                    AND l.timestamp_effective = h.timestamp_effective)\n\n)\n\n,final as (\nselect  Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\n        , CASE WHEN LAG(row_hash) OVER(PARTITION BY Workday_ID ORDER BY timestamp_effective)\n            <> row_hash\n            OR LAG(row_hash) OVER(PARTITION BY Workday_ID ORDER BY timestamp_effective) IS NULL\n            THEN 1\n        END AS row_change_filter\n    FROM final_new_records\n    QUALIFY row_change_filter = 1\n)\n\nselect  md5(cast(coalesce(cast(Workday_ID as \n    varchar\n), '') || '-' || coalesce(cast(timestamp_effective as \n    varchar\n), '') as \n    varchar\n)) AS job_profiles_key\n        ,Workday_ID\n        ,Compensation_Grade_Hierarchy\n        ,Job_Profile_Name\n        ,timestamp_effective\n        ,Compensation_Grade\n        ,Reference_ID\n        ,Job_Profile_Exempt_Group\n        ,Job_Classifications_Group\n        ,Job_Family\n        ,Job_Family_Group\n        ,Job_Families_on_Job_Profile_Group\n        ,is_deleted\n        ,row_hash\n        ,current_timestamp() as etl_updated_timestamp\nfrom    final",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_workday.workday_job_profiles"
    },
    "model.logging.stg_dbt_audit_log": {
      "raw_sql": "with audit as (\n\n    select * from {{ get_audit_relation() }}\n\n),\n\nwith_id as (\n\n    select\n\n        *,\n\n        {{ dbt_utils.surrogate_key([\n            'event_name',\n            'event_model',\n            'invocation_id'\n        ]) }} as event_id\n\n    from audit\n\n)\n\nselect * from with_id",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.logging.get_audit_relation",
          "macro.dbt_utils.surrogate_key",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.create_or_replace_view",
          "macro.dbt.persist_docs"
        ],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "stg_dbt_audit_log"
      ],
      "unique_id": "model.logging.stg_dbt_audit_log",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "stg_dbt_audit_log.sql",
      "original_file_path": "models/stg_dbt_audit_log.sql",
      "name": "stg_dbt_audit_log",
      "alias": "stg_dbt_audit_log",
      "checksum": {
        "name": "sha256",
        "checksum": "860aaeb854440548a6f7ce422ef884b6fd2180e82f8de3bd0fec173e678f0950"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/logging/models/stg_dbt_audit_log.sql",
      "build_path": "target/run/logging/models/stg_dbt_audit_log.sql",
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1020217,
      "compiled_sql": "with audit as (\n\n    select * from HR_SOURCE_DEV.FEEDBACK_meta.dbt_audit_log\n\n),\n\nwith_id as (\n\n    select\n\n        *,\n\n        md5(cast(coalesce(cast(event_name as \n    varchar\n), '') || '-' || coalesce(cast(event_model as \n    varchar\n), '') || '-' || coalesce(cast(invocation_id as \n    varchar\n), '') as \n    varchar\n)) as event_id\n\n    from audit\n\n)\n\nselect * from with_id",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_meta.stg_dbt_audit_log"
    },
    "model.logging.stg_dbt_model_deployments": {
      "raw_sql": "with events as (\n\n    select * from {{ ref('stg_dbt_audit_log') }}\n\n),\n\naggregated as (\n\n    select\n\n        {{ dbt_utils.surrogate_key([\n            'event_model',\n            'invocation_id'\n        ]) }} as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name ilike '%model%'\n\n    {{ dbt_utils.group_by(n=7) }}\n\n)\n\nselect * from aggregated",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.surrogate_key",
          "macro.dbt_utils.group_by",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.create_or_replace_view",
          "macro.dbt.persist_docs"
        ],
        "nodes": [
          "model.logging.stg_dbt_audit_log"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "default",
        "stg_dbt_model_deployments"
      ],
      "unique_id": "model.logging.stg_dbt_model_deployments",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "default/stg_dbt_model_deployments.sql",
      "original_file_path": "models/default/stg_dbt_model_deployments.sql",
      "name": "stg_dbt_model_deployments",
      "alias": "stg_dbt_model_deployments",
      "checksum": {
        "name": "sha256",
        "checksum": "2188a68b5a1da14b216be25caa8c84e5dbda2a9c186cc0ad857d7bf908944697"
      },
      "tags": [],
      "refs": [
        [
          "stg_dbt_audit_log"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/logging/models/default/stg_dbt_model_deployments.sql",
      "build_path": "target/run/logging/models/default/stg_dbt_model_deployments.sql",
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "enabled": "{{ target.type != \"bigquery\" | as_bool }}",
        "transient": false
      },
      "created_at": 1650312443.1180372,
      "compiled_sql": "with events as (\n\n    select * from HR_SOURCE_DEV.DEVHRDM_177_meta.stg_dbt_audit_log\n\n),\n\naggregated as (\n\n    select\n\n        md5(cast(coalesce(cast(event_model as \n    varchar\n), '') || '-' || coalesce(cast(invocation_id as \n    varchar\n), '') as \n    varchar\n)) as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name ilike '%model%'\n\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect * from aggregated",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_meta.stg_dbt_model_deployments"
    },
    "model.logging.stg_dbt_deployments": {
      "raw_sql": "with events as (\n\n    select * from {{ref('stg_dbt_audit_log')}}\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name ilike '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    {{ dbt_utils.group_by(n=4) }}\n\n)\n\nselect * from aggregated",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.group_by",
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.create_or_replace_view",
          "macro.dbt.persist_docs"
        ],
        "nodes": [
          "model.logging.stg_dbt_audit_log"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "default",
        "stg_dbt_deployments"
      ],
      "unique_id": "model.logging.stg_dbt_deployments",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "default/stg_dbt_deployments.sql",
      "original_file_path": "models/default/stg_dbt_deployments.sql",
      "name": "stg_dbt_deployments",
      "alias": "stg_dbt_deployments",
      "checksum": {
        "name": "sha256",
        "checksum": "13fdb1dfbcdb35a5a6fcc1e96d338658aebdca7591055af3fb6189b1aa39dfa6"
      },
      "tags": [],
      "refs": [
        [
          "stg_dbt_audit_log"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/logging/models/default/stg_dbt_deployments.sql",
      "build_path": "target/run/logging/models/default/stg_dbt_deployments.sql",
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "enabled": "{{ target.type != \"bigquery\" | as_bool }}",
        "transient": false
      },
      "created_at": 1650312443.1227725,
      "compiled_sql": "with events as (\n\n    select * from HR_SOURCE_DEV.DEVHRDM_177_meta.stg_dbt_audit_log\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name ilike '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    group by 1,2,3,4\n\n)\n\nselect * from aggregated",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "HR_SOURCE_DEV.DEVHRDM_177_meta.stg_dbt_deployments"
    },
    "analysis.logging.models_out_of_sla": {
      "raw_sql": "with\n  models_out_of_sla as (\n    select\n      model\n      , max(deployment_started_at) as last_deployment_ts\n      , datediff('hour', max(deployment_started_at), {{ dbt_utils.current_timestamp() }}) as hours_since_refreshed\n    from\n      {{ ref('stg_dbt_model_deployments') }}\n    group by\n      1\n    having\n      max(deployment_started_at) < dateadd('hour', -24, getdate())\n  )\nselect\n  count(1)\nfrom\n  models_out_of_sla",
      "resource_type": "analysis",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp"
        ],
        "nodes": [
          "model.logging.stg_dbt_model_deployments"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "analysis",
        "periscope",
        "models_out_of_sla"
      ],
      "unique_id": "analysis.logging.models_out_of_sla",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "analysis/periscope/models_out_of_sla.sql",
      "original_file_path": "analyses/periscope/models_out_of_sla.sql",
      "name": "models_out_of_sla",
      "alias": "models_out_of_sla",
      "checksum": {
        "name": "sha256",
        "checksum": "16bb908db23145769f3aef422e823ca2f6e49721de4691b5d092baf8bf77e257"
      },
      "tags": [],
      "refs": [
        [
          "stg_dbt_model_deployments"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1340272
    },
    "analysis.logging.models": {
      "raw_sql": "select\n  [deployment_started_at:aggregation] as period\n  , model\n  , count(1) as deployment_count\nfrom\n  {{ ref('stg_dbt_model_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\n  , 2\norder by\n  1 desc\n  , 2",
      "resource_type": "analysis",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.logging.stg_dbt_model_deployments"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "analysis",
        "periscope",
        "models"
      ],
      "unique_id": "analysis.logging.models",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "analysis/periscope/models.sql",
      "original_file_path": "analyses/periscope/models.sql",
      "name": "models",
      "alias": "models",
      "checksum": {
        "name": "sha256",
        "checksum": "ad58419bde3e142dadccb66e55850f11687b9cb3eb37a0ed3188701f90d0478a"
      },
      "tags": [],
      "refs": [
        [
          "stg_dbt_model_deployments"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1374989
    },
    "analysis.logging.deployments": {
      "raw_sql": "select\n  [deployment_started_at:aggregation] as period\n  , sum(datediff('minute', deployment_started_at, deployment_completed_at)) as total_runtime_m\n  , avg(datediff('minute', deployment_started_at, deployment_completed_at)) as avg_runtime_m\n  , sum(models_deployed) as models_deployed\nfrom\n  {{ ref('stg_dbt_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  1 desc",
      "resource_type": "analysis",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.logging.stg_dbt_deployments"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "analysis",
        "periscope",
        "deployments"
      ],
      "unique_id": "analysis.logging.deployments",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "analysis/periscope/deployments.sql",
      "original_file_path": "analyses/periscope/deployments.sql",
      "name": "deployments",
      "alias": "deployments",
      "checksum": {
        "name": "sha256",
        "checksum": "a79323cb950544c98ee9e49eede7eb70a9f506729ca2f6316ba2df4a06b1a484"
      },
      "tags": [],
      "refs": [
        [
          "stg_dbt_deployments"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1406686
    },
    "analysis.logging.models_summary": {
      "raw_sql": "select\n  model\n  , cast(min(deployment_started_at) as date) as first\n  , max(deployment_started_at) as last\nfrom\n  {{ ref('stg_dbt_model_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  3 asc",
      "resource_type": "analysis",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.logging.stg_dbt_model_deployments"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "analysis",
        "periscope",
        "models_summary"
      ],
      "unique_id": "analysis.logging.models_summary",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "analysis/periscope/models_summary.sql",
      "original_file_path": "analyses/periscope/models_summary.sql",
      "name": "models_summary",
      "alias": "models_summary",
      "checksum": {
        "name": "sha256",
        "checksum": "11235519fa3e0c8447ab2ac37a69aee3fb1085303ffc627243512dcc98deb32c"
      },
      "tags": [],
      "refs": [
        [
          "stg_dbt_model_deployments"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.143851
    },
    "operation.logging.logging-on-run-start-0": {
      "raw_sql": "{{ logging.create_audit_schema() }}",
      "compiled": true,
      "resource_type": "operation",
      "depends_on": {
        "macros": [
          "macro.logging.create_audit_schema"
        ],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "hooks",
        "logging-on-run-start-0"
      ],
      "unique_id": "operation.logging.logging-on-run-start-0",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "hooks/logging-on-run-start-0.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "logging-on-run-start-0",
      "alias": "logging-on-run-start-0",
      "checksum": {
        "name": "sha256",
        "checksum": "dce3dd714b1310926b4c01df522ec43528e01079cef0109395e5dc42cfe0afcc"
      },
      "tags": [
        "on-run-start"
      ],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/logging/./dbt_project.yml/hooks/logging-on-run-start-0.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1543891,
      "compiled_sql": "\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": null,
      "index": 0
    },
    "operation.logging.logging-on-run-start-1": {
      "raw_sql": "{{ logging.create_audit_log_table() }}",
      "compiled": true,
      "resource_type": "operation",
      "depends_on": {
        "macros": [
          "macro.logging.create_audit_log_table"
        ],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "hooks",
        "logging-on-run-start-1"
      ],
      "unique_id": "operation.logging.logging-on-run-start-1",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "hooks/logging-on-run-start-1.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "logging-on-run-start-1",
      "alias": "logging-on-run-start-1",
      "checksum": {
        "name": "sha256",
        "checksum": "dce3dd714b1310926b4c01df522ec43528e01079cef0109395e5dc42cfe0afcc"
      },
      "tags": [
        "on-run-start"
      ],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1615822,
      "compiled_sql": "",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": null,
      "index": 1
    },
    "operation.logging.logging-on-run-start-2": {
      "raw_sql": "{{ logging.log_run_start_event() }}",
      "compiled": true,
      "resource_type": "operation",
      "depends_on": {
        "macros": [
          "macro.logging.log_run_start_event"
        ],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "hooks",
        "logging-on-run-start-2"
      ],
      "unique_id": "operation.logging.logging-on-run-start-2",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "hooks/logging-on-run-start-2.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "logging-on-run-start-2",
      "alias": "logging-on-run-start-2",
      "checksum": {
        "name": "sha256",
        "checksum": "dce3dd714b1310926b4c01df522ec43528e01079cef0109395e5dc42cfe0afcc"
      },
      "tags": [
        "on-run-start"
      ],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/logging/./dbt_project.yml/hooks/logging-on-run-start-2.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1727188,
      "compiled_sql": "\n    \n\n    insert into HR_SOURCE_DEV.FEEDBACK_meta.dbt_audit_log (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        'run started',\n        \n    convert_timezone('UTC', \n    current_timestamp::\n    timestamp_ntz\n\n)::\n    timestamp_ntz\n\n,\n        '',\n        '',\n        'iam_ngabioud',\n        'dev',\n        FALSE,\n        '8a14194d-3639-4a8a-8f50-37316c11faa0'\n    );\n\n    commit;\n\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": null,
      "index": 2
    },
    "operation.logging.logging-on-run-end-0": {
      "raw_sql": "{{ logging.log_run_end_event() }}",
      "compiled": true,
      "resource_type": "operation",
      "depends_on": {
        "macros": [
          "macro.logging.log_run_end_event"
        ],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "meta",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "HR_SOURCE_DEV",
      "schema": "DEVHRDM_177_meta",
      "fqn": [
        "logging",
        "hooks",
        "logging-on-run-end-0"
      ],
      "unique_id": "operation.logging.logging-on-run-end-0",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "hooks/logging-on-run-end-0.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "logging-on-run-end-0",
      "alias": "logging-on-run-end-0",
      "checksum": {
        "name": "sha256",
        "checksum": "dce3dd714b1310926b4c01df522ec43528e01079cef0109395e5dc42cfe0afcc"
      },
      "tags": [
        "on-run-end"
      ],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": "target/compiled/logging/./dbt_project.yml/hooks/logging-on-run-end-0.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "meta",
        "transient": false
      },
      "created_at": 1650312443.1779773,
      "compiled_sql": "\n    \n\n    insert into HR_SOURCE_DEV.FEEDBACK_meta.dbt_audit_log (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        'run completed',\n        \n    convert_timezone('UTC', \n    current_timestamp::\n    timestamp_ntz\n\n)::\n    timestamp_ntz\n\n,\n        '',\n        '',\n        'iam_ngabioud',\n        'dev',\n        FALSE,\n        '8a14194d-3639-4a8a-8f50-37316c11faa0'\n    );\n\n    commit;\n\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": null,
      "index": 0
    }
  },
  "sources": {
    "source.hrdm_ingest.icims_raw.talentpool": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "talentpool"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.talentpool",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "talentpool",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "talentpool",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.talentpool",
      "created_at": 1650312443.2564187
    },
    "source.hrdm_ingest.icims_raw.connectevent": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "connectevent"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.connectevent",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "connectevent",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "connectevent",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.connectevent",
      "created_at": 1650312443.2565386
    },
    "source.hrdm_ingest.icims_raw.person": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "person"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.person",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "person",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "person",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.person",
      "created_at": 1650312443.2566257
    },
    "source.hrdm_ingest.icims_raw.room": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "room"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.room",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "room",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "room",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.room",
      "created_at": 1650312443.2567086
    },
    "source.hrdm_ingest.icims_raw.connecteventworkflow": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "connecteventworkflow"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.connecteventworkflow",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "connecteventworkflow",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "connecteventworkflow",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.connecteventworkflow",
      "created_at": 1650312443.2567894
    },
    "source.hrdm_ingest.icims_raw.connecteventworkflowsource": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "connecteventworkflowsource"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.connecteventworkflowsource",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "connecteventworkflowsource",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "connecteventworkflowsource",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.connecteventworkflowsource",
      "created_at": 1650312443.2568696
    },
    "source.hrdm_ingest.icims_raw.company": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "company"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.company",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "company",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "company",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.company",
      "created_at": 1650312443.2569497
    },
    "source.hrdm_ingest.icims_raw.sourceworkflow": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "sourceworkflow"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.sourceworkflow",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "sourceworkflow",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "sourceworkflow",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.sourceworkflow",
      "created_at": 1650312443.2570295
    },
    "source.hrdm_ingest.icims_raw.submittal": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "icims_raw",
        "submittal"
      ],
      "database": "HR_RAW_QA",
      "schema": "icims",
      "unique_id": "source.hrdm_ingest.icims_raw.submittal",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/icims_raw.yml",
      "original_file_path": "models/sources/icims_raw.yml",
      "name": "submittal",
      "source_name": "icims_raw",
      "source_description": "",
      "loader": "",
      "identifier": "submittal",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW_QA.icims.submittal",
      "created_at": 1650312443.2571106
    },
    "source.hrdm_ingest.feedback_raw.ckapp_dimension_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "ckapp_dimension_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.ckapp_dimension_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "ckapp_dimension_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "ckapp_dimension_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.ckapp_dimension_history",
      "created_at": 1650312443.257191
    },
    "source.hrdm_ingest.feedback_raw.ckapp_function_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "ckapp_function_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.ckapp_function_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "ckapp_function_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "ckapp_function_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.ckapp_function_history",
      "created_at": 1650312443.2572708
    },
    "source.hrdm_ingest.feedback_raw.ckapp_level_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "ckapp_level_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.ckapp_level_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "ckapp_level_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "ckapp_level_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.ckapp_level_history",
      "created_at": 1650312443.2573512
    },
    "source.hrdm_ingest.feedback_raw.ckapp_organization_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "ckapp_organization_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.ckapp_organization_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "ckapp_organization_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "ckapp_organization_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.ckapp_organization_history",
      "created_at": 1650312443.2574306
    },
    "source.hrdm_ingest.feedback_raw.ckapp_role_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "ckapp_role_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.ckapp_role_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "ckapp_role_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "ckapp_role_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.ckapp_role_history",
      "created_at": 1650312443.2575102
    },
    "source.hrdm_ingest.feedback_raw.ckapp_rubric_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "ckapp_rubric_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.ckapp_rubric_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "ckapp_rubric_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "ckapp_rubric_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.ckapp_rubric_history",
      "created_at": 1650312443.25759
    },
    "source.hrdm_ingest.feedback_raw.feedback_employeeptlsnapshot_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "feedback_employeeptlsnapshot_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.feedback_employeeptlsnapshot_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "feedback_employeeptlsnapshot_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "feedback_employeeptlsnapshot_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.feedback_employeeptlsnapshot_history",
      "created_at": 1650312443.2576694
    },
    "source.hrdm_ingest.feedback_raw.feedback_round_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "feedback_round_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.feedback_round_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "feedback_round_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "feedback_round_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.feedback_round_history",
      "created_at": 1650312443.257749
    },
    "source.hrdm_ingest.feedback_raw.form_builder_form_history": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "feedback_raw",
        "form_builder_form_history"
      ],
      "database": "HR_RAW",
      "schema": "feedback",
      "unique_id": "source.hrdm_ingest.feedback_raw.form_builder_form_history",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/feedback_raw.yml",
      "original_file_path": "models/sources/feedback_raw.yml",
      "name": "form_builder_form_history",
      "source_name": "feedback_raw",
      "source_description": "",
      "loader": "",
      "identifier": "form_builder_form_history",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.feedback.form_builder_form_history",
      "created_at": 1650312443.2578282
    },
    "source.hrdm_ingest.workday_raw.workday_locations": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_locations"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_locations",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_locations",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_locations",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_locations",
      "created_at": 1650312443.2579072
    },
    "source.hrdm_ingest.workday_raw.workday_locations_hierarchy": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_locations_hierarchy"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_locations_hierarchy",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_locations_hierarchy",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_locations_hierarchy",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_locations_hierarchy",
      "created_at": 1650312443.257986
    },
    "source.hrdm_ingest.workday_raw.workday_cost_centers": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_cost_centers"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_cost_centers",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_cost_centers",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_cost_centers",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_cost_centers",
      "created_at": 1650312443.2580652
    },
    "source.hrdm_ingest.workday_raw.workday_supervisory_organizations": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_supervisory_organizations"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_supervisory_organizations",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_supervisory_organizations",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_supervisory_organizations",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_supervisory_organizations",
      "created_at": 1650312443.258144
    },
    "source.hrdm_ingest.workday_raw.workday_companies": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_companies"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_companies",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_companies",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_companies",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_companies",
      "created_at": 1650312443.2582235
    },
    "source.hrdm_ingest.workday_raw.workday_custom_organizations": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_custom_organizations"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_custom_organizations",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_custom_organizations",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_custom_organizations",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_custom_organizations",
      "created_at": 1650312443.2583025
    },
    "source.hrdm_ingest.workday_raw.workday_job_profiles": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_job_profiles"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_job_profiles",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_job_profiles",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_job_profiles",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_job_profiles",
      "created_at": 1650312443.2583811
    },
    "source.hrdm_ingest.workday_raw.workday_transactions": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_transactions"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_transactions",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_transactions",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_transactions",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_transactions",
      "created_at": 1650312443.2584608
    },
    "source.hrdm_ingest.workday_raw.workday_suppliers": {
      "fqn": [
        "hrdm_ingest",
        "sources",
        "workday_raw",
        "workday_suppliers"
      ],
      "database": "HR_RAW",
      "schema": "workday",
      "unique_id": "source.hrdm_ingest.workday_raw.workday_suppliers",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "models/sources/workday_raw.yml",
      "original_file_path": "models/sources/workday_raw.yml",
      "name": "workday_suppliers",
      "source_name": "workday_raw",
      "source_description": "",
      "loader": "",
      "identifier": "workday_suppliers",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": {
          "count": null,
          "period": null
        },
        "error_after": {
          "count": null,
          "period": null
        },
        "filter": null
      },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "HR_RAW.workday.workday_suppliers",
      "created_at": 1650312443.2585397
    }
  },
  "macros": {
    "macro.hrdm_ingest.generate_schema_name": {
      "unique_id": "macro.hrdm_ingest.generate_schema_name",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "/dbt-helper/override_macros/generate_schema_name.sql",
      "original_file_path": "/dbt-helper/override_macros/generate_schema_name.sql",
      "name": "generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set schema_name = custom_schema_name or target.schema -%}\n    {{ idw_package.get_custom_schema(schema_name) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.get_custom_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.677638
    },
    "macro.hrdm_ingest.icims_raw_to_source": {
      "unique_id": "macro.hrdm_ingest.icims_raw_to_source",
      "package_name": "hrdm_ingest",
      "root_path": "/app/dbt_ingest",
      "path": "macros/icims_raw_to_source.sql",
      "original_file_path": "macros/icims_raw_to_source.sql",
      "name": "icims_raw_to_source",
      "macro_sql": "{% macro icims_raw_to_source(raw_table_name, dbt_source_name) %}\n    {% set raw_data_query %}\n        SELECT DISTINCT\n              flatten_fields.value:name::STRING as fields\n            , flatten_fields.value:type::STRING as data_type\n        FROM {{ raw_table_name }} d\n        , lateral flatten (input => d.raw_data:fields::VARIANT) as flatten_fields\n    {% endset %}\n\n    {% set results = run_query(raw_data_query) %}\n{% set output_query %}\n{% raw %}\nwith source_flatten_data as\n(SELECT DISTINCT\n      d.raw_data:deleted::VARCHAR AS deleted\n    , d.raw_data:id::INTEGER AS id\n    , d.raw_data:lastUpdated::TIMESTAMP AS lastUpdated\n    , flatten_fields.value:name flatten_name\n    , flatten_fields.value:type flatten_type\n    , flatten_fields.value:value flatten_value\nFROM {{ idw_package.dynamic_source({%- endraw -%}{{ dbt_source_name }} {%- raw -%} ) }} d\n, LATERAL FLATTEN (input => d.raw_data:fields::VARIANT) as flatten_fields\n\n{% if is_incremental() %}\nWHERE raw_inserted_timestamp >= (SELECT max(etl_updated_timestamp) FROM {{ this }})\n{% endif %}\n\n)\n, source_data as (\n    SELECT\n      deleted\n    , id\n    , lastUpdated\n{%- endraw -%}\n{%- for record in results -%}\n    {% if record[1] == 'DATE' -%}\n, max(case when flatten_name = '{{ record[0] }}' then flatten_value::TIMESTAMP end) AS {{ record[0] }}\n    {% elif record[1] == 'PROFILE_LINK' -%}\n, max(case when flatten_name = '{{ record[0] }}' then flatten_value:id::INTEGER end) AS {{ record[0] }}\n    {% elif record[1] == 'NODE_SINGLE' -%}\n, max(case when flatten_name = '{{ record[0] }}' then flatten_value:defaultAttributes:Label::STRING end) AS {{ record[0] }}\n    {% elif record[1] == 'CURRENCY' -%}\n, max(case when flatten_name = '{{ record[0] }}' then flatten_value:defaultAttributes:Label::STRING end) AS {{ record[0] }}\n    {% elif record[1] == 'SALARY' -%}\n, max(case when flatten_name = '{{ record[0] }}' then flatten_value::VARIANT end) AS {{ record[0] }}\n    {% else -%}\n, max(case when flatten_name = '{{ record[0] }}' then flatten_value::{{ record[1] }} end) AS {{ record[0] }}\n    {% endif -%}\n{% endfor -%}\n{%- raw -%}\n    from source_flatten_data\n    group by deleted\n    , id\n    , lastUpdated\n)\n, final as\n(SELECT d.*\n, typeof(HASH(d.*)) as row_hash\n, current_timestamp() as etl_updated_timestamp\n from source_data d)\nSELECT src.* from final src\n\n{% if is_incremental() %}\nLEFT OUTER JOIN {{ this }} tgt\nON src.id = tgt.id and src.row_hash = tgt.row_hash\nWHERE tgt.id IS NULL\n{% endif %}\n\n{%- endraw -%}\n{% endset %}\n\n    {{ return(output_query) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.6815557
    },
    "macro.dbt_snowflake.snowflake__create_table_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_table_as",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_table_as",
      "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.696888
    },
    "macro.dbt_snowflake.get_column_comment_sql": {
      "unique_id": "macro.dbt_snowflake.get_column_comment_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_column_comment_sql",
      "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.6974845
    },
    "macro.dbt_snowflake.get_persist_docs_column_list": {
      "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_persist_docs_column_list",
      "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.get_column_comment_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.6982322
    },
    "macro.dbt_snowflake.snowflake__create_view_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_view_as",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_view_as",
      "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_columns_in_query",
          "macro.dbt_snowflake.get_persist_docs_column_list"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.6995656
    },
    "macro.dbt_snowflake.snowflake__get_columns_in_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__get_columns_in_relation",
      "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.700917
    },
    "macro.dbt_snowflake.snowflake__list_schemas": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_schemas",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_schemas",
      "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.701875
    },
    "macro.dbt_snowflake.snowflake__list_relations_without_caching": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_relations_without_caching",
      "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.702746
    },
    "macro.dbt_snowflake.snowflake__check_schema_exists": {
      "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__check_schema_exists",
      "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7032979
    },
    "macro.dbt_snowflake.snowflake__current_timestamp": {
      "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__current_timestamp",
      "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7034447
    },
    "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_string_as_time",
      "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.703743
    },
    "macro.dbt_snowflake.snowflake__snapshot_get_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_get_time",
      "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.70392
    },
    "macro.dbt_snowflake.snowflake__rename_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__rename_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__rename_relation",
      "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7042434
    },
    "macro.dbt_snowflake.snowflake__alter_column_type": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_type",
      "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.704673
    },
    "macro.dbt_snowflake.snowflake__alter_relation_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_relation_comment",
      "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7050161
    },
    "macro.dbt_snowflake.snowflake__alter_column_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_comment",
      "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.get_column_comment_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7059004
    },
    "macro.dbt_snowflake.get_current_query_tag": {
      "unique_id": "macro.dbt_snowflake.get_current_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_current_query_tag",
      "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7062018
    },
    "macro.dbt_snowflake.set_query_tag": {
      "unique_id": "macro.dbt_snowflake.set_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "set_query_tag",
      "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.get_current_query_tag",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7070158
    },
    "macro.dbt_snowflake.unset_query_tag": {
      "unique_id": "macro.dbt_snowflake.unset_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "unset_query_tag",
      "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7078893
    },
    "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_relation_add_remove_columns",
      "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7093005
    },
    "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {
      "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake_dml_explicit_transaction",
      "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7096648
    },
    "macro.dbt_snowflake.snowflake__truncate_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__truncate_relation",
      "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7100844
    },
    "macro.dbt_snowflake.snowflake__get_catalog": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_catalog",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/catalog.sql",
      "original_file_path": "macros/catalog.sql",
      "name": "snowflake__get_catalog",
      "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7114913
    },
    "macro.dbt_snowflake.materialization_snapshot_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot.sql",
      "name": "materialization_snapshot_snowflake",
      "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.materialization_snapshot_default",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.712203
    },
    "macro.dbt_snowflake.snowflake__get_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__get_merge_sql",
      "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.default__get_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7141383
    },
    "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__get_delete_insert_merge_sql",
      "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_delete_insert_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7146223
    },
    "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__snapshot_merge_sql",
      "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7150593
    },
    "macro.dbt_snowflake.materialization_table_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_table_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/table.sql",
      "original_file_path": "macros/materializations/table.sql",
      "name": "materialization_table_snowflake",
      "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.717406
    },
    "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_validate_get_incremental_strategy",
      "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7194285
    },
    "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_get_incremental_sql",
      "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_merge_sql",
          "macro.dbt.get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7203574
    },
    "macro.dbt_snowflake.materialization_incremental_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "materialization_incremental_snowflake",
      "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7239707
    },
    "macro.dbt_snowflake.materialization_view_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_view_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/view.sql",
      "original_file_path": "macros/materializations/view.sql",
      "name": "materialization_view_snowflake",
      "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.create_or_replace_view",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7249856
    },
    "macro.dbt_snowflake.snowflake__load_csv_rows": {
      "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/seed.sql",
      "original_file_path": "macros/materializations/seed.sql",
      "name": "snowflake__load_csv_rows",
      "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.728353
    },
    "macro.dbt_snowflake.materialization_seed_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/seed.sql",
      "original_file_path": "macros/materializations/seed.sql",
      "name": "materialization_seed_snowflake",
      "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.materialization_seed_default",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7288542
    },
    "macro.dbt.set_sql_header": {
      "unique_id": "macro.dbt.set_sql_header",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "set_sql_header",
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7295146
    },
    "macro.dbt.should_full_refresh": {
      "unique_id": "macro.dbt.should_full_refresh",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "should_full_refresh",
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7300365
    },
    "macro.dbt.should_store_failures": {
      "unique_id": "macro.dbt.should_store_failures",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "should_store_failures",
      "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.730558
    },
    "macro.dbt.run_hooks": {
      "unique_id": "macro.dbt.run_hooks",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "run_hooks",
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.732315
    },
    "macro.dbt.make_hook_config": {
      "unique_id": "macro.dbt.make_hook_config",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "make_hook_config",
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7326486
    },
    "macro.dbt.before_begin": {
      "unique_id": "macro.dbt.before_begin",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "before_begin",
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.732891
    },
    "macro.dbt.in_transaction": {
      "unique_id": "macro.dbt.in_transaction",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "in_transaction",
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7331293
    },
    "macro.dbt.after_commit": {
      "unique_id": "macro.dbt.after_commit",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "after_commit",
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.733366
    },
    "macro.dbt.get_test_sql": {
      "unique_id": "macro.dbt.get_test_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "name": "get_test_sql",
      "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.734126
    },
    "macro.dbt.default__get_test_sql": {
      "unique_id": "macro.dbt.default__get_test_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "name": "default__get_test_sql",
      "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7346585
    },
    "macro.dbt.get_where_subquery": {
      "unique_id": "macro.dbt.get_where_subquery",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "name": "get_where_subquery",
      "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_where_subquery"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7353306
    },
    "macro.dbt.default__get_where_subquery": {
      "unique_id": "macro.dbt.default__get_where_subquery",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "name": "default__get_where_subquery",
      "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.735994
    },
    "macro.dbt.materialization_test_default": {
      "unique_id": "macro.dbt.materialization_test_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/test.sql",
      "original_file_path": "macros/materializations/tests/test.sql",
      "name": "materialization_test_default",
      "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7394722
    },
    "macro.dbt.create_csv_table": {
      "unique_id": "macro.dbt.create_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "create_csv_table",
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.74427
    },
    "macro.dbt.default__create_csv_table": {
      "unique_id": "macro.dbt.default__create_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__create_csv_table",
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7458537
    },
    "macro.dbt.reset_csv_table": {
      "unique_id": "macro.dbt.reset_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "reset_csv_table",
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__reset_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7462513
    },
    "macro.dbt.default__reset_csv_table": {
      "unique_id": "macro.dbt.default__reset_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__reset_csv_table",
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.create_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7470891
    },
    "macro.dbt.get_binding_char": {
      "unique_id": "macro.dbt.get_binding_char",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_binding_char",
      "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7473295
    },
    "macro.dbt.default__get_binding_char": {
      "unique_id": "macro.dbt.default__get_binding_char",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_binding_char",
      "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7475226
    },
    "macro.dbt.get_batch_size": {
      "unique_id": "macro.dbt.get_batch_size",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_batch_size",
      "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_batch_size"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7477825
    },
    "macro.dbt.default__get_batch_size": {
      "unique_id": "macro.dbt.default__get_batch_size",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_batch_size",
      "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7479703
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "unique_id": "macro.dbt.get_seed_column_quoted_csv",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_seed_column_quoted_csv",
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.748786
    },
    "macro.dbt.load_csv_rows": {
      "unique_id": "macro.dbt.load_csv_rows",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "load_csv_rows",
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__load_csv_rows"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7490888
    },
    "macro.dbt.default__load_csv_rows": {
      "unique_id": "macro.dbt.default__load_csv_rows",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__load_csv_rows",
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7512176
    },
    "macro.dbt.materialization_seed_default": {
      "unique_id": "macro.dbt.materialization_seed_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/seed.sql",
      "original_file_path": "macros/materializations/seeds/seed.sql",
      "name": "materialization_seed_default",
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7558975
    },
    "macro.dbt.materialization_snapshot_default": {
      "unique_id": "macro.dbt.materialization_snapshot_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot.sql",
      "name": "materialization_snapshot_default",
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.create_schema",
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7643533
    },
    "macro.dbt.create_columns": {
      "unique_id": "macro.dbt.create_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "create_columns",
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.768057
    },
    "macro.dbt.default__create_columns": {
      "unique_id": "macro.dbt.default__create_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__create_columns",
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.768558
    },
    "macro.dbt.post_snapshot": {
      "unique_id": "macro.dbt.post_snapshot",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "post_snapshot",
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7688422
    },
    "macro.dbt.default__post_snapshot": {
      "unique_id": "macro.dbt.default__post_snapshot",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__post_snapshot",
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7689877
    },
    "macro.dbt.snapshot_staging_table": {
      "unique_id": "macro.dbt.snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "snapshot_staging_table",
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_staging_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.769333
    },
    "macro.dbt.default__snapshot_staging_table": {
      "unique_id": "macro.dbt.default__snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__snapshot_staging_table",
      "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.770871
    },
    "macro.dbt.build_snapshot_table": {
      "unique_id": "macro.dbt.build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "build_snapshot_table",
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__build_snapshot_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7711933
    },
    "macro.dbt.default__build_snapshot_table": {
      "unique_id": "macro.dbt.default__build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__build_snapshot_table",
      "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7716432
    },
    "macro.dbt.build_snapshot_staging_table": {
      "unique_id": "macro.dbt.build_snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7723875
    },
    "macro.dbt.snapshot_merge_sql": {
      "unique_id": "macro.dbt.snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "name": "snapshot_merge_sql",
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__snapshot_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.773124
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "unique_id": "macro.dbt.default__snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "name": "default__snapshot_merge_sql",
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7735953
    },
    "macro.dbt.strategy_dispatch": {
      "unique_id": "macro.dbt.strategy_dispatch",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "strategy_dispatch",
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7783365
    },
    "macro.dbt.snapshot_hash_arguments": {
      "unique_id": "macro.dbt.snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_hash_arguments",
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7786274
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "unique_id": "macro.dbt.default__snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "default__snapshot_hash_arguments",
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.77901
    },
    "macro.dbt.snapshot_get_time": {
      "unique_id": "macro.dbt.snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_get_time",
      "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__snapshot_get_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7792532
    },
    "macro.dbt.default__snapshot_get_time": {
      "unique_id": "macro.dbt.default__snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "default__snapshot_get_time",
      "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7794306
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "unique_id": "macro.dbt.snapshot_timestamp_strategy",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_timestamp_strategy",
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.780755
    },
    "macro.dbt.snapshot_string_as_time": {
      "unique_id": "macro.dbt.snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_string_as_time",
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__snapshot_string_as_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7810266
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "unique_id": "macro.dbt.default__snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "default__snapshot_string_as_time",
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7813122
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_check_all_get_existing_columns",
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_columns_in_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7830338
    },
    "macro.dbt.snapshot_check_strategy": {
      "unique_id": "macro.dbt.snapshot_check_strategy",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_check_strategy",
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.run_query",
          "macro.dbt.snapshot_string_as_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.786267
    },
    "macro.dbt.get_create_table_as_sql": {
      "unique_id": "macro.dbt.get_create_table_as_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "get_create_table_as_sql",
      "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_create_table_as_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7870474
    },
    "macro.dbt.default__get_create_table_as_sql": {
      "unique_id": "macro.dbt.default__get_create_table_as_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "default__get_create_table_as_sql",
      "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.787376
    },
    "macro.dbt.create_table_as": {
      "unique_id": "macro.dbt.create_table_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "create_table_as",
      "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7877195
    },
    "macro.dbt.default__create_table_as": {
      "unique_id": "macro.dbt.default__create_table_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "default__create_table_as",
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.788428
    },
    "macro.dbt.materialization_table_default": {
      "unique_id": "macro.dbt.materialization_table_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/table.sql",
      "original_file_path": "macros/materializations/models/table/table.sql",
      "name": "materialization_table_default",
      "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.create_indexes",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.793718
    },
    "macro.dbt.handle_existing_table": {
      "unique_id": "macro.dbt.handle_existing_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "name": "handle_existing_table",
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__handle_existing_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.794317
    },
    "macro.dbt.default__handle_existing_table": {
      "unique_id": "macro.dbt.default__handle_existing_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "name": "default__handle_existing_table",
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7947004
    },
    "macro.dbt.materialization_view_default": {
      "unique_id": "macro.dbt.materialization_view_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/view.sql",
      "original_file_path": "macros/materializations/models/view/view.sql",
      "name": "materialization_view_default",
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_view_as",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.7999392
    },
    "macro.dbt.get_create_view_as_sql": {
      "unique_id": "macro.dbt.get_create_view_as_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "get_create_view_as_sql",
      "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_create_view_as_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8006127
    },
    "macro.dbt.default__get_create_view_as_sql": {
      "unique_id": "macro.dbt.default__get_create_view_as_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "default__get_create_view_as_sql",
      "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.create_view_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8009
    },
    "macro.dbt.create_view_as": {
      "unique_id": "macro.dbt.create_view_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "create_view_as",
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__create_view_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8012083
    },
    "macro.dbt.default__create_view_as": {
      "unique_id": "macro.dbt.default__create_view_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "default__create_view_as",
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.801654
    },
    "macro.dbt.create_or_replace_view": {
      "unique_id": "macro.dbt.create_or_replace_view",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
      "name": "create_or_replace_view",
      "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8036847
    },
    "macro.dbt.get_merge_sql": {
      "unique_id": "macro.dbt.get_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_merge_sql",
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__get_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8072233
    },
    "macro.dbt.default__get_merge_sql": {
      "unique_id": "macro.dbt.default__get_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_merge_sql",
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8092668
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_delete_insert_merge_sql",
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8096676
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_delete_insert_merge_sql",
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8104012
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_insert_overwrite_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8108406
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8119283
    },
    "macro.dbt.is_incremental": {
      "unique_id": "macro.dbt.is_incremental",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/is_incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
      "name": "is_incremental",
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8130496
    },
    "macro.dbt.get_quoted_csv": {
      "unique_id": "macro.dbt.get_quoted_csv",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "get_quoted_csv",
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8143513
    },
    "macro.dbt.diff_columns": {
      "unique_id": "macro.dbt.diff_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "diff_columns",
      "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8153057
    },
    "macro.dbt.diff_column_data_types": {
      "unique_id": "macro.dbt.diff_column_data_types",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "diff_column_data_types",
      "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8164382
    },
    "macro.dbt.materialization_incremental_default": {
      "unique_id": "macro.dbt.materialization_incremental_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/incremental.sql",
      "name": "materialization_incremental_default",
      "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt.get_delete_insert_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8240297
    },
    "macro.dbt.incremental_validate_on_schema_change": {
      "unique_id": "macro.dbt.incremental_validate_on_schema_change",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "incremental_validate_on_schema_change",
      "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8299336
    },
    "macro.dbt.check_for_schema_changes": {
      "unique_id": "macro.dbt.check_for_schema_changes",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "check_for_schema_changes",
      "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.diff_columns",
          "macro.dbt.diff_column_data_types"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8321574
    },
    "macro.dbt.sync_column_schemas": {
      "unique_id": "macro.dbt.sync_column_schemas",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "sync_column_schemas",
      "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.alter_relation_add_remove_columns",
          "macro.dbt.alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8342993
    },
    "macro.dbt.process_schema_changes": {
      "unique_id": "macro.dbt.process_schema_changes",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "process_schema_changes",
      "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.check_for_schema_changes",
          "macro.dbt.sync_column_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8356419
    },
    "macro.dbt.statement": {
      "unique_id": "macro.dbt.statement",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "statement",
      "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.837537
    },
    "macro.dbt.noop_statement": {
      "unique_id": "macro.dbt.noop_statement",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "noop_statement",
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8385713
    },
    "macro.dbt.run_query": {
      "unique_id": "macro.dbt.run_query",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "run_query",
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8390865
    },
    "macro.dbt.convert_datetime": {
      "unique_id": "macro.dbt.convert_datetime",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "convert_datetime",
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8415565
    },
    "macro.dbt.dates_in_range": {
      "unique_id": "macro.dbt.dates_in_range",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "dates_in_range",
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.convert_datetime"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8437283
    },
    "macro.dbt.partition_range": {
      "unique_id": "macro.dbt.partition_range",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "partition_range",
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.dates_in_range"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.845276
    },
    "macro.dbt.py_current_timestring": {
      "unique_id": "macro.dbt.py_current_timestring",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "py_current_timestring",
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8456736
    },
    "macro.dbt.create_schema": {
      "unique_id": "macro.dbt.create_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "create_schema",
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8463895
    },
    "macro.dbt.default__create_schema": {
      "unique_id": "macro.dbt.default__create_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "default__create_schema",
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.846715
    },
    "macro.dbt.drop_schema": {
      "unique_id": "macro.dbt.drop_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "drop_schema",
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__drop_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8469958
    },
    "macro.dbt.default__drop_schema": {
      "unique_id": "macro.dbt.default__drop_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "default__drop_schema",
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8473458
    },
    "macro.dbt.get_columns_in_relation": {
      "unique_id": "macro.dbt.get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "get_columns_in_relation",
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__get_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8496077
    },
    "macro.dbt.default__get_columns_in_relation": {
      "unique_id": "macro.dbt.default__get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__get_columns_in_relation",
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.849883
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "unique_id": "macro.dbt.sql_convert_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "sql_convert_columns_in_relation",
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.850414
    },
    "macro.dbt.get_columns_in_query": {
      "unique_id": "macro.dbt.get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "get_columns_in_query",
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_columns_in_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.850723
    },
    "macro.dbt.default__get_columns_in_query": {
      "unique_id": "macro.dbt.default__get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__get_columns_in_query",
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8513172
    },
    "macro.dbt.alter_column_type": {
      "unique_id": "macro.dbt.alter_column_type",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "alter_column_type",
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.851729
    },
    "macro.dbt.default__alter_column_type": {
      "unique_id": "macro.dbt.default__alter_column_type",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__alter_column_type",
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8527892
    },
    "macro.dbt.alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "alter_relation_add_remove_columns",
      "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8532314
    },
    "macro.dbt.default__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__alter_relation_add_remove_columns",
      "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.854607
    },
    "macro.dbt.get_catalog": {
      "unique_id": "macro.dbt.get_catalog",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "get_catalog",
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__get_catalog"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8566098
    },
    "macro.dbt.default__get_catalog": {
      "unique_id": "macro.dbt.default__get_catalog",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__get_catalog",
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8570662
    },
    "macro.dbt.information_schema_name": {
      "unique_id": "macro.dbt.information_schema_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "information_schema_name",
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__information_schema_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8573837
    },
    "macro.dbt.default__information_schema_name": {
      "unique_id": "macro.dbt.default__information_schema_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__information_schema_name",
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8576498
    },
    "macro.dbt.list_schemas": {
      "unique_id": "macro.dbt.list_schemas",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "list_schemas",
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__list_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8579564
    },
    "macro.dbt.default__list_schemas": {
      "unique_id": "macro.dbt.default__list_schemas",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__list_schemas",
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.information_schema_name",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8584661
    },
    "macro.dbt.check_schema_exists": {
      "unique_id": "macro.dbt.check_schema_exists",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "check_schema_exists",
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__check_schema_exists"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.858807
    },
    "macro.dbt.default__check_schema_exists": {
      "unique_id": "macro.dbt.default__check_schema_exists",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__check_schema_exists",
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.replace",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8593345
    },
    "macro.dbt.list_relations_without_caching": {
      "unique_id": "macro.dbt.list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "list_relations_without_caching",
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__list_relations_without_caching"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8596532
    },
    "macro.dbt.default__list_relations_without_caching": {
      "unique_id": "macro.dbt.default__list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__list_relations_without_caching",
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8599157
    },
    "macro.dbt.alter_column_comment": {
      "unique_id": "macro.dbt.alter_column_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "alter_column_comment",
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.860973
    },
    "macro.dbt.default__alter_column_comment": {
      "unique_id": "macro.dbt.default__alter_column_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__alter_column_comment",
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.861266
    },
    "macro.dbt.alter_relation_comment": {
      "unique_id": "macro.dbt.alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "alter_relation_comment",
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_relation_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.861614
    },
    "macro.dbt.default__alter_relation_comment": {
      "unique_id": "macro.dbt.default__alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__alter_relation_comment",
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8618944
    },
    "macro.dbt.persist_docs": {
      "unique_id": "macro.dbt.persist_docs",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "persist_docs",
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8623552
    },
    "macro.dbt.default__persist_docs": {
      "unique_id": "macro.dbt.default__persist_docs",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__persist_docs",
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8631854
    },
    "macro.dbt.make_temp_relation": {
      "unique_id": "macro.dbt.make_temp_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "make_temp_relation",
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__make_temp_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8653831
    },
    "macro.dbt.default__make_temp_relation": {
      "unique_id": "macro.dbt.default__make_temp_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__make_temp_relation",
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.865912
    },
    "macro.dbt.drop_relation": {
      "unique_id": "macro.dbt.drop_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__drop_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8662188
    },
    "macro.dbt.default__drop_relation": {
      "unique_id": "macro.dbt.default__drop_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__drop_relation",
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.86659
    },
    "macro.dbt.truncate_relation": {
      "unique_id": "macro.dbt.truncate_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__truncate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.866895
    },
    "macro.dbt.default__truncate_relation": {
      "unique_id": "macro.dbt.default__truncate_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__truncate_relation",
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8671694
    },
    "macro.dbt.rename_relation": {
      "unique_id": "macro.dbt.rename_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "rename_relation",
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__rename_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8675287
    },
    "macro.dbt.default__rename_relation": {
      "unique_id": "macro.dbt.default__rename_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__rename_relation",
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8680143
    },
    "macro.dbt.get_or_create_relation": {
      "unique_id": "macro.dbt.get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "get_or_create_relation",
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_or_create_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.868432
    },
    "macro.dbt.default__get_or_create_relation": {
      "unique_id": "macro.dbt.default__get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__get_or_create_relation",
      "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.869455
    },
    "macro.dbt.load_relation": {
      "unique_id": "macro.dbt.load_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "load_relation",
      "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8698304
    },
    "macro.dbt.drop_relation_if_exists": {
      "unique_id": "macro.dbt.drop_relation_if_exists",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "drop_relation_if_exists",
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8701558
    },
    "macro.dbt.current_timestamp": {
      "unique_id": "macro.dbt.current_timestamp",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "current_timestamp",
      "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8709166
    },
    "macro.dbt.default__current_timestamp": {
      "unique_id": "macro.dbt.default__current_timestamp",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8711684
    },
    "macro.dbt.collect_freshness": {
      "unique_id": "macro.dbt.collect_freshness",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__collect_freshness"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8715692
    },
    "macro.dbt.default__collect_freshness": {
      "unique_id": "macro.dbt.default__collect_freshness",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8722932
    },
    "macro.dbt.get_create_index_sql": {
      "unique_id": "macro.dbt.get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "get_create_index_sql",
      "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_create_index_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8730721
    },
    "macro.dbt.default__get_create_index_sql": {
      "unique_id": "macro.dbt.default__get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "default__get_create_index_sql",
      "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8733056
    },
    "macro.dbt.create_indexes": {
      "unique_id": "macro.dbt.create_indexes",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "create_indexes",
      "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8735712
    },
    "macro.dbt.default__create_indexes": {
      "unique_id": "macro.dbt.default__create_indexes",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "default__create_indexes",
      "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_create_index_sql",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8742564
    },
    "macro.dbt.generate_alias_name": {
      "unique_id": "macro.dbt.generate_alias_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "name": "generate_alias_name",
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_alias_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8749504
    },
    "macro.dbt.default__generate_alias_name": {
      "unique_id": "macro.dbt.default__generate_alias_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "name": "default__generate_alias_name",
      "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8753557
    },
    "macro.dbt.generate_schema_name": {
      "unique_id": "macro.dbt.generate_schema_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_schema_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8762112
    },
    "macro.dbt.default__generate_schema_name": {
      "unique_id": "macro.dbt.default__generate_schema_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "default__generate_schema_name",
      "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8766754
    },
    "macro.dbt.generate_schema_name_for_env": {
      "unique_id": "macro.dbt.generate_schema_name_for_env",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "generate_schema_name_for_env",
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8771615
    },
    "macro.dbt.generate_database_name": {
      "unique_id": "macro.dbt.generate_database_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "name": "generate_database_name",
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_database_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8778722
    },
    "macro.dbt.default__generate_database_name": {
      "unique_id": "macro.dbt.default__generate_database_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "name": "default__generate_database_name",
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8783114
    },
    "macro.dbt.default__test_not_null": {
      "unique_id": "macro.dbt.default__test_not_null",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/not_null.sql",
      "original_file_path": "macros/generic_test_sql/not_null.sql",
      "name": "default__test_not_null",
      "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8787038
    },
    "macro.dbt.default__test_accepted_values": {
      "unique_id": "macro.dbt.default__test_accepted_values",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/accepted_values.sql",
      "original_file_path": "macros/generic_test_sql/accepted_values.sql",
      "name": "default__test_accepted_values",
      "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8797357
    },
    "macro.dbt.default__test_unique": {
      "unique_id": "macro.dbt.default__test_unique",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/unique.sql",
      "original_file_path": "macros/generic_test_sql/unique.sql",
      "name": "default__test_unique",
      "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.880243
    },
    "macro.dbt.default__test_relationships": {
      "unique_id": "macro.dbt.default__test_relationships",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/relationships.sql",
      "original_file_path": "macros/generic_test_sql/relationships.sql",
      "name": "default__test_relationships",
      "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.880866
    },
    "macro.dbt.test_unique": {
      "unique_id": "macro.dbt.test_unique",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_unique",
      "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_unique"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8818107
    },
    "macro.dbt.test_not_null": {
      "unique_id": "macro.dbt.test_not_null",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_not_null",
      "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8822162
    },
    "macro.dbt.test_accepted_values": {
      "unique_id": "macro.dbt.test_accepted_values",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_accepted_values",
      "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_accepted_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.88271
    },
    "macro.dbt.test_relationships": {
      "unique_id": "macro.dbt.test_relationships",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_relationships",
      "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_relationships"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.883178
    },
    "macro.logging.get_audit_schema": {
      "unique_id": "macro.logging.get_audit_schema",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "get_audit_schema",
      "macro_sql": "{% macro get_audit_schema() %}\n\n    {# if the get_audit_schema macro exists in the base project use that #}\n    {% if context.get(project_name, {}).get('get_audit_schema') %}\n        {{ return(context[project_name].get_audit_schema()) }}\n    {% else %}\n        {{ return(target.schema~'_meta') }}\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8880234
    },
    "macro.logging.get_audit_relation": {
      "unique_id": "macro.logging.get_audit_relation",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "get_audit_relation",
      "macro_sql": "{% macro get_audit_relation() %}\n\n    {%- set audit_schema=logging.get_audit_schema() -%}\n\n    {%- set audit_table =\n        api.Relation.create(\n            database=target.database,\n            schema=audit_schema,\n            identifier='dbt_audit_log',\n            type='table'\n        ) -%}\n\n    {{ return(audit_table) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.get_audit_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8885877
    },
    "macro.logging.log_audit_event": {
      "unique_id": "macro.logging.log_audit_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "log_audit_event",
      "macro_sql": "{% macro log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) -%}\n\n  {{ return(adapter.dispatch('log_audit_event', 'logging')(event_name, schema, relation, user, target_name, is_full_refresh)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.default__log_audit_event"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8890944
    },
    "macro.logging.default__log_audit_event": {
      "unique_id": "macro.logging.default__log_audit_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "default__log_audit_event",
      "macro_sql": "{% macro default__log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) %}\n\n    insert into {{ logging.get_audit_relation() }} (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        '{{ event_name }}',\n        {{ dbt_utils.current_timestamp_in_utc() }},\n        {% if schema != None %}'{{ schema }}'{% else %}null::varchar(512){% endif %},\n        {% if relation != None %}'{{ relation }}'{% else %}null::varchar(512){% endif %},\n        {% if user != None %}'{{ user }}'{% else %}null::varchar(512){% endif %},\n        {% if target_name != None %}'{{ target_name }}'{% else %}null::varchar(512){% endif %},\n        {% if is_full_refresh %}TRUE{% else %}FALSE{% endif %},\n        '{{ invocation_id }}'\n    );\n\n    commit;\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.get_audit_relation",
          "macro.dbt_utils.current_timestamp_in_utc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.890342
    },
    "macro.logging.create_audit_schema": {
      "unique_id": "macro.logging.create_audit_schema",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "create_audit_schema",
      "macro_sql": "{% macro create_audit_schema() %}\n    {%- set schema_name = logging.get_audit_schema() -%}\n    {%- set schema_exists = adapter.check_schema_exists(database=target.database, schema=schema_name) -%}\n    {% if schema_exists == 0 %}\n        {% do create_schema(api.Relation.create(\n            database=target.database,\n            schema=schema_name)\n        ) %}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.get_audit_schema",
          "macro.dbt.create_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8910425
    },
    "macro.logging.create_audit_log_table": {
      "unique_id": "macro.logging.create_audit_log_table",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "create_audit_log_table",
      "macro_sql": "{% macro create_audit_log_table() -%}\n\n    {{ return(adapter.dispatch('create_audit_log_table', 'logging')()) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.default__create_audit_log_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.891324
    },
    "macro.logging.default__create_audit_log_table": {
      "unique_id": "macro.logging.default__create_audit_log_table",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "default__create_audit_log_table",
      "macro_sql": "{% macro default__create_audit_log_table() -%}\n\n    {% set required_columns = [\n       [\"event_name\", dbt_utils.type_string()],\n       [\"event_timestamp\", dbt_utils.type_timestamp()],\n       [\"event_schema\", dbt_utils.type_string()],\n       [\"event_model\", dbt_utils.type_string()],\n       [\"event_user\", dbt_utils.type_string()],\n       [\"event_target\", dbt_utils.type_string()],\n       [\"event_is_full_refresh\", \"boolean\"],\n       [\"invocation_id\", dbt_utils.type_string()],\n    ] -%}\n\n    {% set audit_table = logging.get_audit_relation() -%}\n\n    {% set audit_table_exists = adapter.get_relation(audit_table.database, audit_table.schema, audit_table.name) -%}\n\n\n    {% if audit_table_exists -%}\n\n        {%- set columns_to_create = [] -%}\n\n        {# map to lower to cater for snowflake returning column names as upper case #}\n        {%- set existing_columns = adapter.get_columns_in_relation(audit_table)|map(attribute='column')|map('lower')|list -%}\n\n        {%- for required_column in required_columns -%}\n            {%- if required_column[0] not in existing_columns -%}\n                {%- do columns_to_create.append(required_column) -%}\n\n            {%- endif -%}\n        {%- endfor -%}\n\n\n        {%- for column in columns_to_create -%}\n            alter table {{ audit_table }}\n            add column {{ column[0] }} {{ column[1] }}\n            default null;\n        {% endfor -%}\n\n        {%- if columns_to_create|length > 0 %}\n            commit;\n        {% endif -%}\n\n    {%- else -%}\n        create table if not exists {{ audit_table }}\n        (\n        {% for column in required_columns %}\n            {{ column[0] }} {{ column[1] }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n        )\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_timestamp",
          "macro.logging.get_audit_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8939867
    },
    "macro.logging.log_run_start_event": {
      "unique_id": "macro.logging.log_run_start_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "log_run_start_event",
      "macro_sql": "{% macro log_run_start_event() %}\n    {{ logging.log_audit_event('run started', user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.log_audit_event"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8943594
    },
    "macro.logging.log_run_end_event": {
      "unique_id": "macro.logging.log_run_end_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "log_run_end_event",
      "macro_sql": "{% macro log_run_end_event() %}\n    {{ logging.log_audit_event('run completed', user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.log_audit_event"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8947148
    },
    "macro.logging.log_model_start_event": {
      "unique_id": "macro.logging.log_model_start_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "log_model_start_event",
      "macro_sql": "{% macro log_model_start_event() %}\n    {{ logging.log_audit_event(\n        'model deployment started', schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.log_audit_event"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8951685
    },
    "macro.logging.log_model_end_event": {
      "unique_id": "macro.logging.log_model_end_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "log_model_end_event",
      "macro_sql": "{% macro log_model_end_event() %}\n    {{ logging.log_audit_event(\n        'model deployment completed', schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.log_audit_event"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8956153
    },
    "macro.logging.log_custom_event": {
      "unique_id": "macro.logging.log_custom_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/audit.sql",
      "original_file_path": "macros/audit.sql",
      "name": "log_custom_event",
      "macro_sql": "{% macro log_custom_event(event_name) %}\n    {{ logging.log_audit_event(\n        event_name, schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.log_audit_event"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8960657
    },
    "macro.logging.bigquery__log_audit_event": {
      "unique_id": "macro.logging.bigquery__log_audit_event",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/bigquery.sql",
      "original_file_path": "macros/bigquery.sql",
      "name": "bigquery__log_audit_event",
      "macro_sql": "{% macro bigquery__log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) %}\n\n    insert into {{ logging.get_audit_relation() }} (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        '{{ event_name }}',\n        {{ dbt_utils.current_timestamp_in_utc() }},\n        {% if schema != None %}'{{ schema }}'{% else %}null{% endif %},\n        {% if relation != None %}'{{ relation }}'{% else %}null{% endif %},\n        {% if target_name != None %}'{{ target_name }}'{% else %}null{% endif %},\n        {% if is_full_refresh %}TRUE{% else %}FALSE{% endif %},\n        '{{ invocation_id }}'\n    );\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.logging.get_audit_relation",
          "macro.dbt_utils.current_timestamp_in_utc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.8985202
    },
    "macro.logging.bigquery__create_audit_log_table": {
      "unique_id": "macro.logging.bigquery__create_audit_log_table",
      "package_name": "logging",
      "root_path": "/dbt-deps/logging",
      "path": "macros/bigquery.sql",
      "original_file_path": "macros/bigquery.sql",
      "name": "bigquery__create_audit_log_table",
      "macro_sql": "{% macro bigquery__create_audit_log_table() -%}\n\n    {% set required_columns = [\n       [\"event_name\", dbt_utils.type_string()],\n       [\"event_timestamp\", dbt_utils.type_timestamp()],\n       [\"event_schema\", dbt_utils.type_string()],\n       [\"event_model\", dbt_utils.type_string()],\n       [\"event_target\", dbt_utils.type_string()],\n       [\"event_is_full_refresh\", \"BOOLEAN\"],\n       [\"invocation_id\", dbt_utils.type_string()],\n    ] -%}\n\n    {% set audit_table = logging.get_audit_relation() -%}\n\n    {% set audit_table_exists = adapter.get_relation(audit_table.database, audit_table.schema, audit_table.name) -%}\n\n\n    {% if audit_table_exists -%}\n\n        {%- set columns_to_create = [] -%}\n\n        {# map to lower to cater for snowflake returning column names as upper case #}\n        {%- set existing_columns = adapter.get_columns_in_relation(audit_table)|map(attribute='column')|map('lower')|list -%}\n\n        {%- for required_column in required_columns -%}\n            {%- if required_column[0] not in existing_columns -%}\n                {%- do columns_to_create.append(required_column) -%}\n\n            {%- endif -%}\n        {%- endfor -%}\n\n\n        {%- for column in columns_to_create -%}\n            alter table {{ audit_table }}\n            add column {{ column[0] }} {{ column[1] }}\n            default null;\n        {% endfor -%}\n\n    {%- else -%}\n        create table if not exists {{ audit_table }}\n        (\n        {% for column in required_columns %}\n            {{ column[0] }} {{ column[1] }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n        )\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_timestamp",
          "macro.logging.get_audit_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9010873
    },
    "macro.dbt_date.get_base_dates": {
      "unique_id": "macro.dbt_date.get_base_dates",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "name": "get_base_dates",
      "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__get_base_dates"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.902567
    },
    "macro.dbt_date.default__get_base_dates": {
      "unique_id": "macro.dbt_date.default__get_base_dates",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "name": "default__get_base_dates",
      "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_utils.date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.903894
    },
    "macro.dbt_date.bigquery__get_base_dates": {
      "unique_id": "macro.dbt_date.bigquery__get_base_dates",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "name": "bigquery__get_base_dates",
      "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_utils.date_spine",
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9050803
    },
    "macro.dbt_date.get_date_dimension": {
      "unique_id": "macro.dbt_date.get_date_dimension",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "name": "get_date_dimension",
      "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__get_date_dimension"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9141495
    },
    "macro.dbt_date.default__get_date_dimension": {
      "unique_id": "macro.dbt_date.default__get_date_dimension",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "name": "default__get_date_dimension",
      "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9182434
    },
    "macro.dbt_date.postgres__get_date_dimension": {
      "unique_id": "macro.dbt_date.postgres__get_date_dimension",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "name": "postgres__get_date_dimension",
      "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.922467
    },
    "macro.dbt_date.n_months_ago": {
      "unique_id": "macro.dbt_date.n_months_ago",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/n_months_ago.sql",
      "original_file_path": "macros/calendar_date/n_months_ago.sql",
      "name": "n_months_ago",
      "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9232109
    },
    "macro.dbt_date.last_month_number": {
      "unique_id": "macro.dbt_date.last_month_number",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/last_month_number.sql",
      "original_file_path": "macros/calendar_date/last_month_number.sql",
      "name": "last_month_number",
      "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_date.last_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9237084
    },
    "macro.dbt_date.last_month": {
      "unique_id": "macro.dbt_date.last_month",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/last_month.sql",
      "original_file_path": "macros/calendar_date/last_month.sql",
      "name": "last_month",
      "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_months_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9241104
    },
    "macro.dbt_date.tomorrow": {
      "unique_id": "macro.dbt_date.tomorrow",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/tomorrow.sql",
      "original_file_path": "macros/calendar_date/tomorrow.sql",
      "name": "tomorrow",
      "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.92458
    },
    "macro.dbt_date.next_week": {
      "unique_id": "macro.dbt_date.next_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/next_week.sql",
      "original_file_path": "macros/calendar_date/next_week.sql",
      "name": "next_week",
      "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_weeks_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9249809
    },
    "macro.dbt_date.iso_week_end": {
      "unique_id": "macro.dbt_date.iso_week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "name": "iso_week_end",
      "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__iso_week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9257917
    },
    "macro.dbt_date._iso_week_end": {
      "unique_id": "macro.dbt_date._iso_week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "name": "_iso_week_end",
      "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9261527
    },
    "macro.dbt_date.default__iso_week_end": {
      "unique_id": "macro.dbt_date.default__iso_week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "name": "default__iso_week_end",
      "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9263964
    },
    "macro.dbt_date.snowflake__iso_week_end": {
      "unique_id": "macro.dbt_date.snowflake__iso_week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "name": "snowflake__iso_week_end",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9266279
    },
    "macro.dbt_date.from_unixtimestamp": {
      "unique_id": "macro.dbt_date.from_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "name": "from_unixtimestamp",
      "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.snowflake__from_unixtimestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9282594
    },
    "macro.dbt_date.default__from_unixtimestamp": {
      "unique_id": "macro.dbt_date.default__from_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "name": "default__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.928706
    },
    "macro.dbt_date.postgres__from_unixtimestamp": {
      "unique_id": "macro.dbt_date.postgres__from_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "name": "postgres__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9291513
    },
    "macro.dbt_date.snowflake__from_unixtimestamp": {
      "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "name": "snowflake__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9299588
    },
    "macro.dbt_date.bigquery__from_unixtimestamp": {
      "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "name": "bigquery__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.930638
    },
    "macro.dbt_date.iso_week_of_year": {
      "unique_id": "macro.dbt_date.iso_week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "name": "iso_week_of_year",
      "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9315891
    },
    "macro.dbt_date._iso_week_of_year": {
      "unique_id": "macro.dbt_date._iso_week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "name": "_iso_week_of_year",
      "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9319344
    },
    "macro.dbt_date.default__iso_week_of_year": {
      "unique_id": "macro.dbt_date.default__iso_week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "name": "default__iso_week_of_year",
      "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9321713
    },
    "macro.dbt_date.snowflake__iso_week_of_year": {
      "unique_id": "macro.dbt_date.snowflake__iso_week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "name": "snowflake__iso_week_of_year",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9324021
    },
    "macro.dbt_date.postgres__iso_week_of_year": {
      "unique_id": "macro.dbt_date.postgres__iso_week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "name": "postgres__iso_week_of_year",
      "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.932646
    },
    "macro.dbt_date.date_part": {
      "unique_id": "macro.dbt_date.date_part",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "name": "date_part",
      "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9332974
    },
    "macro.dbt_date.default__date_part": {
      "unique_id": "macro.dbt_date.default__date_part",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "name": "default__date_part",
      "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9335248
    },
    "macro.dbt_date.bigquery__date_part": {
      "unique_id": "macro.dbt_date.bigquery__date_part",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "name": "bigquery__date_part",
      "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9337451
    },
    "macro.dbt_date.next_month": {
      "unique_id": "macro.dbt_date.next_month",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/next_month.sql",
      "original_file_path": "macros/calendar_date/next_month.sql",
      "name": "next_month",
      "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_months_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9341526
    },
    "macro.dbt_date.now": {
      "unique_id": "macro.dbt_date.now",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/now.sql",
      "original_file_path": "macros/calendar_date/now.sql",
      "name": "now",
      "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.convert_timezone",
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9345798
    },
    "macro.dbt_date.n_weeks_away": {
      "unique_id": "macro.dbt_date.n_weeks_away",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/n_weeks_away.sql",
      "original_file_path": "macros/calendar_date/n_weeks_away.sql",
      "name": "n_weeks_away",
      "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.93526
    },
    "macro.dbt_date.week_end": {
      "unique_id": "macro.dbt_date.week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "name": "week_end",
      "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.936084
    },
    "macro.dbt_date.default__week_end": {
      "unique_id": "macro.dbt_date.default__week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "name": "default__week_end",
      "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9363267
    },
    "macro.dbt_date.snowflake__week_end": {
      "unique_id": "macro.dbt_date.snowflake__week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "name": "snowflake__week_end",
      "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.week_start",
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9366684
    },
    "macro.dbt_date.postgres__week_end": {
      "unique_id": "macro.dbt_date.postgres__week_end",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "name": "postgres__week_end",
      "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.week_start",
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9370055
    },
    "macro.dbt_date.next_month_number": {
      "unique_id": "macro.dbt_date.next_month_number",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/next_month_number.sql",
      "original_file_path": "macros/calendar_date/next_month_number.sql",
      "name": "next_month_number",
      "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_date.next_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9374826
    },
    "macro.dbt_date.last_month_name": {
      "unique_id": "macro.dbt_date.last_month_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/last_month_name.sql",
      "original_file_path": "macros/calendar_date/last_month_name.sql",
      "name": "last_month_name",
      "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.month_name",
          "macro.dbt_date.last_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.938
    },
    "macro.dbt_date.today": {
      "unique_id": "macro.dbt_date.today",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/today.sql",
      "original_file_path": "macros/calendar_date/today.sql",
      "name": "today",
      "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.now"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9383867
    },
    "macro.dbt_date.n_months_away": {
      "unique_id": "macro.dbt_date.n_months_away",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/n_months_away.sql",
      "original_file_path": "macros/calendar_date/n_months_away.sql",
      "name": "n_months_away",
      "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9390733
    },
    "macro.dbt_date.yesterday": {
      "unique_id": "macro.dbt_date.yesterday",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/yesterday.sql",
      "original_file_path": "macros/calendar_date/yesterday.sql",
      "name": "yesterday",
      "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_days_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9395392
    },
    "macro.dbt_date.next_month_name": {
      "unique_id": "macro.dbt_date.next_month_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/next_month_name.sql",
      "original_file_path": "macros/calendar_date/next_month_name.sql",
      "name": "next_month_name",
      "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.month_name",
          "macro.dbt_date.next_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.94005
    },
    "macro.dbt_date.n_days_ago": {
      "unique_id": "macro.dbt_date.n_days_ago",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/n_days_ago.sql",
      "original_file_path": "macros/calendar_date/n_days_ago.sql",
      "name": "n_days_ago",
      "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9408312
    },
    "macro.dbt_date.convert_timezone": {
      "unique_id": "macro.dbt_date.convert_timezone",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "name": "convert_timezone",
      "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__convert_timezone"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9426003
    },
    "macro.dbt_date.default__convert_timezone": {
      "unique_id": "macro.dbt_date.default__convert_timezone",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "name": "default__convert_timezone",
      "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9432814
    },
    "macro.dbt_date.bigquery__convert_timezone": {
      "unique_id": "macro.dbt_date.bigquery__convert_timezone",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "name": "bigquery__convert_timezone",
      "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.943555
    },
    "macro.dbt_date.spark__convert_timezone": {
      "unique_id": "macro.dbt_date.spark__convert_timezone",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "name": "spark__convert_timezone",
      "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9438372
    },
    "macro.dbt_date.postgres__convert_timezone": {
      "unique_id": "macro.dbt_date.postgres__convert_timezone",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "name": "postgres__convert_timezone",
      "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.944412
    },
    "macro.dbt_date.redshift__convert_timezone": {
      "unique_id": "macro.dbt_date.redshift__convert_timezone",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "name": "redshift__convert_timezone",
      "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__convert_timezone"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.944733
    },
    "macro.dbt_date.periods_since": {
      "unique_id": "macro.dbt_date.periods_since",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/periods_since.sql",
      "original_file_path": "macros/calendar_date/periods_since.sql",
      "name": "periods_since",
      "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.datediff",
          "macro.dbt_date.now"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.945277
    },
    "macro.dbt_date.day_of_year": {
      "unique_id": "macro.dbt_date.day_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "name": "day_of_year",
      "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__day_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9458609
    },
    "macro.dbt_date.default__day_of_year": {
      "unique_id": "macro.dbt_date.default__day_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "name": "default__day_of_year",
      "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.946105
    },
    "macro.dbt_date.postgres__day_of_year": {
      "unique_id": "macro.dbt_date.postgres__day_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "name": "postgres__day_of_year",
      "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9463472
    },
    "macro.dbt_date.redshift__day_of_year": {
      "unique_id": "macro.dbt_date.redshift__day_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "name": "redshift__day_of_year",
      "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9466581
    },
    "macro.dbt_date.n_weeks_ago": {
      "unique_id": "macro.dbt_date.n_weeks_ago",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/n_weeks_ago.sql",
      "original_file_path": "macros/calendar_date/n_weeks_ago.sql",
      "name": "n_weeks_ago",
      "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9473789
    },
    "macro.dbt_date.week_of_year": {
      "unique_id": "macro.dbt_date.week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "name": "week_of_year",
      "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.default__week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9481535
    },
    "macro.dbt_date.default__week_of_year": {
      "unique_id": "macro.dbt_date.default__week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "name": "default__week_of_year",
      "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9484699
    },
    "macro.dbt_date.postgres__week_of_year": {
      "unique_id": "macro.dbt_date.postgres__week_of_year",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "name": "postgres__week_of_year",
      "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9487178
    },
    "macro.dbt_date.to_unixtimestamp": {
      "unique_id": "macro.dbt_date.to_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "name": "to_unixtimestamp",
      "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.snowflake__to_unixtimestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.949288
    },
    "macro.dbt_date.default__to_unixtimestamp": {
      "unique_id": "macro.dbt_date.default__to_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "name": "default__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9495196
    },
    "macro.dbt_date.snowflake__to_unixtimestamp": {
      "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "name": "snowflake__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9497504
    },
    "macro.dbt_date.bigquery__to_unixtimestamp": {
      "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "name": "bigquery__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9499202
    },
    "macro.dbt_date.day_of_week": {
      "unique_id": "macro.dbt_date.day_of_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "name": "day_of_week",
      "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.snowflake__day_of_week"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.952125
    },
    "macro.dbt_date.default__day_of_week": {
      "unique_id": "macro.dbt_date.default__day_of_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "name": "default__day_of_week",
      "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9526362
    },
    "macro.dbt_date.snowflake__day_of_week": {
      "unique_id": "macro.dbt_date.snowflake__day_of_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "name": "snowflake__day_of_week",
      "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9534268
    },
    "macro.dbt_date.bigquery__day_of_week": {
      "unique_id": "macro.dbt_date.bigquery__day_of_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "name": "bigquery__day_of_week",
      "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.953938
    },
    "macro.dbt_date.postgres__day_of_week": {
      "unique_id": "macro.dbt_date.postgres__day_of_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "name": "postgres__day_of_week",
      "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9546843
    },
    "macro.dbt_date.redshift__day_of_week": {
      "unique_id": "macro.dbt_date.redshift__day_of_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "name": "redshift__day_of_week",
      "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9553325
    },
    "macro.dbt_date.day_name": {
      "unique_id": "macro.dbt_date.day_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "name": "day_name",
      "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.snowflake__day_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.95631
    },
    "macro.dbt_date.default__day_name": {
      "unique_id": "macro.dbt_date.default__day_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "name": "default__day_name",
      "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.956658
    },
    "macro.dbt_date.snowflake__day_name": {
      "unique_id": "macro.dbt_date.snowflake__day_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "name": "snowflake__day_name",
      "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.957013
    },
    "macro.dbt_date.bigquery__day_name": {
      "unique_id": "macro.dbt_date.bigquery__day_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "name": "bigquery__day_name",
      "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9573524
    },
    "macro.dbt_date.postgres__day_name": {
      "unique_id": "macro.dbt_date.postgres__day_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "name": "postgres__day_name",
      "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9576993
    },
    "macro.dbt_date.last_week": {
      "unique_id": "macro.dbt_date.last_week",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/last_week.sql",
      "original_file_path": "macros/calendar_date/last_week.sql",
      "name": "last_week",
      "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_weeks_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9581215
    },
    "macro.dbt_date.month_name": {
      "unique_id": "macro.dbt_date.month_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "name": "month_name",
      "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.snowflake__month_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.958922
    },
    "macro.dbt_date.default__month_name": {
      "unique_id": "macro.dbt_date.default__month_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "name": "default__month_name",
      "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9592717
    },
    "macro.dbt_date.bigquery__month_name": {
      "unique_id": "macro.dbt_date.bigquery__month_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "name": "bigquery__month_name",
      "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9596305
    },
    "macro.dbt_date.snowflake__month_name": {
      "unique_id": "macro.dbt_date.snowflake__month_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "name": "snowflake__month_name",
      "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9599693
    },
    "macro.dbt_date.postgres__month_name": {
      "unique_id": "macro.dbt_date.postgres__month_name",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "name": "postgres__month_name",
      "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9603136
    },
    "macro.dbt_date.n_days_away": {
      "unique_id": "macro.dbt_date.n_days_away",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/n_days_away.sql",
      "original_file_path": "macros/calendar_date/n_days_away.sql",
      "name": "n_days_away",
      "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_days_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9608378
    },
    "macro.dbt_date.iso_week_start": {
      "unique_id": "macro.dbt_date.iso_week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "name": "iso_week_start",
      "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9616992
    },
    "macro.dbt_date._iso_week_start": {
      "unique_id": "macro.dbt_date._iso_week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "name": "_iso_week_start",
      "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9619696
    },
    "macro.dbt_date.default__iso_week_start": {
      "unique_id": "macro.dbt_date.default__iso_week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "name": "default__iso_week_start",
      "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9622123
    },
    "macro.dbt_date.snowflake__iso_week_start": {
      "unique_id": "macro.dbt_date.snowflake__iso_week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "name": "snowflake__iso_week_start",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.962444
    },
    "macro.dbt_date.postgres__iso_week_start": {
      "unique_id": "macro.dbt_date.postgres__iso_week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "name": "postgres__iso_week_start",
      "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9626715
    },
    "macro.dbt_date.week_start": {
      "unique_id": "macro.dbt_date.week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "name": "week_start",
      "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9635339
    },
    "macro.dbt_date.default__week_start": {
      "unique_id": "macro.dbt_date.default__week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "name": "default__week_start",
      "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.963872
    },
    "macro.dbt_date.snowflake__week_start": {
      "unique_id": "macro.dbt_date.snowflake__week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "name": "snowflake__week_start",
      "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.day_of_week",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.964375
    },
    "macro.dbt_date.postgres__week_start": {
      "unique_id": "macro.dbt_date.postgres__week_start",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "name": "postgres__week_start",
      "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9648247
    },
    "macro.dbt_date.day_of_month": {
      "unique_id": "macro.dbt_date.day_of_month",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_month.sql",
      "original_file_path": "macros/calendar_date/day_of_month.sql",
      "name": "day_of_month",
      "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9652784
    },
    "macro.dbt_date.redshift__day_of_month": {
      "unique_id": "macro.dbt_date.redshift__day_of_month",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/calendar_date/day_of_month.sql",
      "original_file_path": "macros/calendar_date/day_of_month.sql",
      "name": "redshift__day_of_month",
      "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_utils.type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9655948
    },
    "macro.dbt_date.get_fiscal_year_dates": {
      "unique_id": "macro.dbt_date.get_fiscal_year_dates",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "name": "get_fiscal_year_dates",
      "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__get_fiscal_year_dates"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9676597
    },
    "macro.dbt_date.default__get_fiscal_year_dates": {
      "unique_id": "macro.dbt_date.default__get_fiscal_year_dates",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "name": "default__get_fiscal_year_dates",
      "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9686732
    },
    "macro.dbt_date.get_fiscal_periods": {
      "unique_id": "macro.dbt_date.get_fiscal_periods",
      "package_name": "dbt_date",
      "root_path": "/dbt-deps/dbt_date",
      "path": "macros/fiscal_date/get_fiscal_periods.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql",
      "name": "get_fiscal_periods",
      "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_fiscal_year_dates",
          "macro.dbt_utils.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9699488
    },
    "macro.dbt_utils.get_url_host": {
      "unique_id": "macro.dbt_utils.get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "get_url_host",
      "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_host"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9705725
    },
    "macro.dbt_utils.default__get_url_host": {
      "unique_id": "macro.dbt_utils.default__get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "default__get_url_host",
      "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.split_part",
          "macro.dbt_utils.replace",
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9713907
    },
    "macro.dbt_utils.get_url_path": {
      "unique_id": "macro.dbt_utils.get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "get_url_path",
      "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_path"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.972166
    },
    "macro.dbt_utils.default__get_url_path": {
      "unique_id": "macro.dbt_utils.default__get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "default__get_url_path",
      "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.replace",
          "macro.dbt_utils.position",
          "macro.dbt_utils.split_part",
          "macro.dbt_utils.right",
          "macro.dbt_utils.length",
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9733016
    },
    "macro.dbt_utils.get_url_parameter": {
      "unique_id": "macro.dbt_utils.get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "get_url_parameter",
      "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_parameter"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9739063
    },
    "macro.dbt_utils.default__get_url_parameter": {
      "unique_id": "macro.dbt_utils.default__get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "default__get_url_parameter",
      "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.split_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9744585
    },
    "macro.dbt_utils.get_period_boundaries": {
      "unique_id": "macro.dbt_utils.get_period_boundaries",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "get_period_boundaries",
      "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_period_boundaries"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9811187
    },
    "macro.dbt_utils.default__get_period_boundaries": {
      "unique_id": "macro.dbt_utils.default__get_period_boundaries",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "default__get_period_boundaries",
      "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.current_timestamp",
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.982015
    },
    "macro.dbt_utils.get_period_sql": {
      "unique_id": "macro.dbt_utils.get_period_sql",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "get_period_sql",
      "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_period_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9825587
    },
    "macro.dbt_utils.default__get_period_sql": {
      "unique_id": "macro.dbt_utils.default__get_period_sql",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "default__get_period_sql",
      "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.983521
    },
    "macro.dbt_utils.materialization_insert_by_period_default": {
      "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "materialization_insert_by_period_default",
      "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt_utils.get_period_boundaries",
          "macro.dbt_utils.log_info",
          "macro.dbt_utils.get_period_sql",
          "macro.dbt.noop_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9923139
    },
    "macro.dbt_utils.pretty_time": {
      "unique_id": "macro.dbt_utils.pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "pretty_time",
      "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pretty_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9929311
    },
    "macro.dbt_utils.default__pretty_time": {
      "unique_id": "macro.dbt_utils.default__pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "default__pretty_time",
      "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9932683
    },
    "macro.dbt_utils.pretty_log_format": {
      "unique_id": "macro.dbt_utils.pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "pretty_log_format",
      "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pretty_log_format"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9938037
    },
    "macro.dbt_utils.default__pretty_log_format": {
      "unique_id": "macro.dbt_utils.default__pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "default__pretty_log_format",
      "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.pretty_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9940836
    },
    "macro.dbt_utils.log_info": {
      "unique_id": "macro.dbt_utils.log_info",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "log_info",
      "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__log_info"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9945917
    },
    "macro.dbt_utils.default__log_info": {
      "unique_id": "macro.dbt_utils.default__log_info",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "default__log_info",
      "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.pretty_log_format"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9948816
    },
    "macro.dbt_utils.slugify": {
      "unique_id": "macro.dbt_utils.slugify",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/jinja_helpers/slugify.sql",
      "original_file_path": "macros/jinja_helpers/slugify.sql",
      "name": "slugify",
      "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.995771
    },
    "macro.dbt_utils.test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/cardinality_equality.sql",
      "original_file_path": "macros/schema_tests/cardinality_equality.sql",
      "name": "test_cardinality_equality",
      "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_cardinality_equality"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.99663
    },
    "macro.dbt_utils.default__test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/cardinality_equality.sql",
      "original_file_path": "macros/schema_tests/cardinality_equality.sql",
      "name": "default__test_cardinality_equality",
      "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9972286
    },
    "macro.dbt_utils.test_unique_where": {
      "unique_id": "macro.dbt_utils.test_unique_where",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/test_unique_where.sql",
      "original_file_path": "macros/schema_tests/test_unique_where.sql",
      "name": "test_unique_where",
      "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_where"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9979758
    },
    "macro.dbt_utils.default__test_unique_where": {
      "unique_id": "macro.dbt_utils.default__test_unique_where",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/test_unique_where.sql",
      "original_file_path": "macros/schema_tests/test_unique_where.sql",
      "name": "default__test_unique_where",
      "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.test_unique"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9982686
    },
    "macro.dbt_utils.test_not_null_where": {
      "unique_id": "macro.dbt_utils.test_not_null_where",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/test_not_null_where.sql",
      "original_file_path": "macros/schema_tests/test_not_null_where.sql",
      "name": "test_not_null_where",
      "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_null_where"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.9990382
    },
    "macro.dbt_utils.default__test_not_null_where": {
      "unique_id": "macro.dbt_utils.default__test_not_null_where",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/test_not_null_where.sql",
      "original_file_path": "macros/schema_tests/test_not_null_where.sql",
      "name": "default__test_not_null_where",
      "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.test_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312441.999333
    },
    "macro.dbt_utils.test_sequential_values": {
      "unique_id": "macro.dbt_utils.test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/sequential_values.sql",
      "original_file_path": "macros/schema_tests/sequential_values.sql",
      "name": "test_sequential_values",
      "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_sequential_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0003395
    },
    "macro.dbt_utils.default__test_sequential_values": {
      "unique_id": "macro.dbt_utils.default__test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/sequential_values.sql",
      "original_file_path": "macros/schema_tests/sequential_values.sql",
      "name": "default__test_sequential_values",
      "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0013273
    },
    "macro.dbt_utils.test_expression_is_true": {
      "unique_id": "macro.dbt_utils.test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/expression_is_true.sql",
      "name": "test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.002152
    },
    "macro.dbt_utils.default__test_expression_is_true": {
      "unique_id": "macro.dbt_utils.default__test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/expression_is_true.sql",
      "name": "default__test_expression_is_true",
      "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0026662
    },
    "macro.dbt_utils.test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
      "name": "test_unique_combination_of_columns",
      "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0036676
    },
    "macro.dbt_utils.default__test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
      "name": "default__test_unique_combination_of_columns",
      "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0049975
    },
    "macro.dbt_utils.test_accepted_range": {
      "unique_id": "macro.dbt_utils.test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/accepted_range.sql",
      "original_file_path": "macros/schema_tests/accepted_range.sql",
      "name": "test_accepted_range",
      "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_accepted_range"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.005998
    },
    "macro.dbt_utils.default__test_accepted_range": {
      "unique_id": "macro.dbt_utils.default__test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/accepted_range.sql",
      "original_file_path": "macros/schema_tests/accepted_range.sql",
      "name": "default__test_accepted_range",
      "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0068202
    },
    "macro.dbt_utils.test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/not_accepted_values.sql",
      "original_file_path": "macros/schema_tests/not_accepted_values.sql",
      "name": "test_not_accepted_values",
      "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_accepted_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.007714
    },
    "macro.dbt_utils.default__test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/not_accepted_values.sql",
      "original_file_path": "macros/schema_tests/not_accepted_values.sql",
      "name": "default__test_not_accepted_values",
      "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.00838
    },
    "macro.dbt_utils.test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "name": "test_mutually_exclusive_ranges",
      "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_mutually_exclusive_ranges"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0120096
    },
    "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "name": "default__test_mutually_exclusive_ranges",
      "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0146713
    },
    "macro.dbt_utils.test_relationships_where": {
      "unique_id": "macro.dbt_utils.test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/relationships_where.sql",
      "original_file_path": "macros/schema_tests/relationships_where.sql",
      "name": "test_relationships_where",
      "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_relationships_where"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0157406
    },
    "macro.dbt_utils.default__test_relationships_where": {
      "unique_id": "macro.dbt_utils.default__test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/relationships_where.sql",
      "original_file_path": "macros/schema_tests/relationships_where.sql",
      "name": "default__test_relationships_where",
      "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.016354
    },
    "macro.dbt_utils.test_recency": {
      "unique_id": "macro.dbt_utils.test_recency",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/recency.sql",
      "original_file_path": "macros/schema_tests/recency.sql",
      "name": "test_recency",
      "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_recency"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0170727
    },
    "macro.dbt_utils.default__test_recency": {
      "unique_id": "macro.dbt_utils.default__test_recency",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/recency.sql",
      "original_file_path": "macros/schema_tests/recency.sql",
      "name": "default__test_recency",
      "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0176444
    },
    "macro.dbt_utils.test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/fewer_rows_than.sql",
      "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
      "name": "test_fewer_rows_than",
      "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_fewer_rows_than"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0184436
    },
    "macro.dbt_utils.default__test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/fewer_rows_than.sql",
      "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
      "name": "default__test_fewer_rows_than",
      "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0188313
    },
    "macro.dbt_utils.test_equality": {
      "unique_id": "macro.dbt_utils.test_equality",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/equality.sql",
      "original_file_path": "macros/schema_tests/equality.sql",
      "name": "test_equality",
      "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_equality"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0199747
    },
    "macro.dbt_utils.default__test_equality": {
      "unique_id": "macro.dbt_utils.default__test_equality",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/equality.sql",
      "original_file_path": "macros/schema_tests/equality.sql",
      "name": "default__test_equality",
      "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.02153
    },
    "macro.dbt_utils.test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/not_null_proportion.sql",
      "original_file_path": "macros/schema_tests/not_null_proportion.sql",
      "name": "test_not_null_proportion",
      "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_null_proportion"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.022271
    },
    "macro.dbt_utils.default__test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/not_null_proportion.sql",
      "original_file_path": "macros/schema_tests/not_null_proportion.sql",
      "name": "default__test_not_null_proportion",
      "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0231876
    },
    "macro.dbt_utils.test_not_constant": {
      "unique_id": "macro.dbt_utils.test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/not_constant.sql",
      "original_file_path": "macros/schema_tests/not_constant.sql",
      "name": "test_not_constant",
      "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_constant"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0238042
    },
    "macro.dbt_utils.default__test_not_constant": {
      "unique_id": "macro.dbt_utils.default__test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/not_constant.sql",
      "original_file_path": "macros/schema_tests/not_constant.sql",
      "name": "default__test_not_constant",
      "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0241082
    },
    "macro.dbt_utils.test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/equal_rowcount.sql",
      "original_file_path": "macros/schema_tests/equal_rowcount.sql",
      "name": "test_equal_rowcount",
      "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_equal_rowcount"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0247974
    },
    "macro.dbt_utils.default__test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/equal_rowcount.sql",
      "original_file_path": "macros/schema_tests/equal_rowcount.sql",
      "name": "default__test_equal_rowcount",
      "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0253994
    },
    "macro.dbt_utils.test_at_least_one": {
      "unique_id": "macro.dbt_utils.test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/at_least_one.sql",
      "original_file_path": "macros/schema_tests/at_least_one.sql",
      "name": "test_at_least_one",
      "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_at_least_one"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.026026
    },
    "macro.dbt_utils.default__test_at_least_one": {
      "unique_id": "macro.dbt_utils.default__test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/schema_tests/at_least_one.sql",
      "original_file_path": "macros/schema_tests/at_least_one.sql",
      "name": "default__test_at_least_one",
      "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.026328
    },
    "macro.dbt_utils.safe_add": {
      "unique_id": "macro.dbt_utils.safe_add",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "safe_add",
      "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__safe_add"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0270355
    },
    "macro.dbt_utils.default__safe_add": {
      "unique_id": "macro.dbt_utils.default__safe_add",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "default__safe_add",
      "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0275357
    },
    "macro.dbt_utils.get_intervals_between": {
      "unique_id": "macro.dbt_utils.get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_intervals_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0288727
    },
    "macro.dbt_utils.default__get_intervals_between": {
      "unique_id": "macro.dbt_utils.default__get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.029906
    },
    "macro.dbt_utils.date_spine": {
      "unique_id": "macro.dbt_utils.date_spine",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0302958
    },
    "macro.dbt_utils.default__date_spine": {
      "unique_id": "macro.dbt_utils.default__date_spine",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.generate_series",
          "macro.dbt_utils.get_intervals_between",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0309088
    },
    "macro.dbt_utils.get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "get_relations_by_prefix",
      "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_relations_by_prefix"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.031974
    },
    "macro.dbt_utils.default__get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "default__get_relations_by_prefix",
      "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0334492
    },
    "macro.dbt_utils.get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "get_tables_by_prefix_sql",
      "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0342095
    },
    "macro.dbt_utils.default__get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "default__get_tables_by_prefix_sql",
      "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0346894
    },
    "macro.dbt_utils.get_powers_of_two": {
      "unique_id": "macro.dbt_utils.get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0358648
    },
    "macro.dbt_utils.default__get_powers_of_two": {
      "unique_id": "macro.dbt_utils.default__get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.03659
    },
    "macro.dbt_utils.generate_series": {
      "unique_id": "macro.dbt_utils.generate_series",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__generate_series"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0369105
    },
    "macro.dbt_utils.default__generate_series": {
      "unique_id": "macro.dbt_utils.default__generate_series",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0378304
    },
    "macro.dbt_utils.unpivot": {
      "unique_id": "macro.dbt_utils.unpivot",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "unpivot",
      "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__unpivot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0402024
    },
    "macro.dbt_utils.default__unpivot": {
      "unique_id": "macro.dbt_utils.default__unpivot",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "default__unpivot",
      "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0438159
    },
    "macro.dbt_utils.surrogate_key": {
      "unique_id": "macro.dbt_utils.surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "surrogate_key",
      "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__surrogate_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0448124
    },
    "macro.dbt_utils.default__surrogate_key": {
      "unique_id": "macro.dbt_utils.default__surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "default__surrogate_key",
      "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.hash",
          "macro.dbt_utils.concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0464253
    },
    "macro.dbt_utils.nullcheck": {
      "unique_id": "macro.dbt_utils.nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "nullcheck",
      "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0470777
    },
    "macro.dbt_utils.default__nullcheck": {
      "unique_id": "macro.dbt_utils.default__nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "default__nullcheck",
      "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0476751
    },
    "macro.dbt_utils.nullcheck_table": {
      "unique_id": "macro.dbt_utils.nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "nullcheck_table",
      "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__nullcheck_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0482662
    },
    "macro.dbt_utils.default__nullcheck_table": {
      "unique_id": "macro.dbt_utils.default__nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "default__nullcheck_table",
      "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0488596
    },
    "macro.dbt_utils.degrees_to_radians": {
      "unique_id": "macro.dbt_utils.degrees_to_radians",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "degrees_to_radians",
      "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0502608
    },
    "macro.dbt_utils.haversine_distance": {
      "unique_id": "macro.dbt_utils.haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "haversine_distance",
      "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__haversine_distance"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.05074
    },
    "macro.dbt_utils.default__haversine_distance": {
      "unique_id": "macro.dbt_utils.default__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "default__haversine_distance",
      "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.051722
    },
    "macro.dbt_utils.bigquery__haversine_distance": {
      "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "bigquery__haversine_distance",
      "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.degrees_to_radians"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0531356
    },
    "macro.dbt_utils.union_relations": {
      "unique_id": "macro.dbt_utils.union_relations",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "union_relations",
      "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__union_relations"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0551677
    },
    "macro.dbt_utils.default__union_relations": {
      "unique_id": "macro.dbt_utils.default__union_relations",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "default__union_relations",
      "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.string_literal",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0593457
    },
    "macro.dbt_utils.star": {
      "unique_id": "macro.dbt_utils.star",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "star",
      "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__star"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0605593
    },
    "macro.dbt_utils.default__star": {
      "unique_id": "macro.dbt_utils.default__star",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "default__star",
      "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0624278
    },
    "macro.dbt_utils.get_column_values": {
      "unique_id": "macro.dbt_utils.get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "get_column_values",
      "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_column_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0638783
    },
    "macro.dbt_utils.default__get_column_values": {
      "unique_id": "macro.dbt_utils.default__get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "default__get_column_values",
      "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_relation",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0662928
    },
    "macro.dbt_utils.get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "get_relations_by_pattern",
      "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_relations_by_pattern"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0673752
    },
    "macro.dbt_utils.default__get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "default__get_relations_by_pattern",
      "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0688467
    },
    "macro.dbt_utils.get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "get_query_results_as_dict",
      "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_query_results_as_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.06955
    },
    "macro.dbt_utils.default__get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "default__get_query_results_as_dict",
      "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0705843
    },
    "macro.dbt_utils.get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "get_tables_by_pattern_sql",
      "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0726416
    },
    "macro.dbt_utils.default__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "default__get_tables_by_pattern_sql",
      "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0730755
    },
    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "bigquery__get_tables_by_pattern_sql",
      "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._bigquery__get_matching_schemata"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0742908
    },
    "macro.dbt_utils._bigquery__get_matching_schemata": {
      "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "_bigquery__get_matching_schemata",
      "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.07518
    },
    "macro.dbt_utils.pivot": {
      "unique_id": "macro.dbt_utils.pivot",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "pivot",
      "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pivot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.07677
    },
    "macro.dbt_utils.default__pivot": {
      "unique_id": "macro.dbt_utils.default__pivot",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "default__pivot",
      "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.slugify"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0782852
    },
    "macro.dbt_utils.group_by": {
      "unique_id": "macro.dbt_utils.group_by",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "group_by",
      "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__group_by"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0788522
    },
    "macro.dbt_utils.default__group_by": {
      "unique_id": "macro.dbt_utils.default__group_by",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "default__group_by",
      "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0792813
    },
    "macro.dbt_utils.right": {
      "unique_id": "macro.dbt_utils.right",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "right",
      "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__right"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0801241
    },
    "macro.dbt_utils.default__right": {
      "unique_id": "macro.dbt_utils.default__right",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "default__right",
      "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.080358
    },
    "macro.dbt_utils.bigquery__right": {
      "unique_id": "macro.dbt_utils.bigquery__right",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "bigquery__right",
      "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.080627
    },
    "macro.dbt_utils.snowflake__right": {
      "unique_id": "macro.dbt_utils.snowflake__right",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "snowflake__right",
      "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0808935
    },
    "macro.dbt_utils.concat": {
      "unique_id": "macro.dbt_utils.concat",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/concat.sql",
      "original_file_path": "macros/cross_db_utils/concat.sql",
      "name": "concat",
      "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0814054
    },
    "macro.dbt_utils.default__concat": {
      "unique_id": "macro.dbt_utils.default__concat",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/concat.sql",
      "original_file_path": "macros/cross_db_utils/concat.sql",
      "name": "default__concat",
      "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.081616
    },
    "macro.dbt_utils.intersect": {
      "unique_id": "macro.dbt_utils.intersect",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "intersect",
      "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__intersect"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0821037
    },
    "macro.dbt_utils.default__intersect": {
      "unique_id": "macro.dbt_utils.default__intersect",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "default__intersect",
      "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0822291
    },
    "macro.dbt_utils.bigquery__intersect": {
      "unique_id": "macro.dbt_utils.bigquery__intersect",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "bigquery__intersect",
      "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.082352
    },
    "macro.dbt_utils.type_string": {
      "unique_id": "macro.dbt_utils.type_string",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0834
    },
    "macro.dbt_utils.default__type_string": {
      "unique_id": "macro.dbt_utils.default__type_string",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_string",
      "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0835302
    },
    "macro.dbt_utils.redshift__type_string": {
      "unique_id": "macro.dbt_utils.redshift__type_string",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "redshift__type_string",
      "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0836549
    },
    "macro.dbt_utils.postgres__type_string": {
      "unique_id": "macro.dbt_utils.postgres__type_string",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "postgres__type_string",
      "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0837731
    },
    "macro.dbt_utils.snowflake__type_string": {
      "unique_id": "macro.dbt_utils.snowflake__type_string",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "snowflake__type_string",
      "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0838892
    },
    "macro.dbt_utils.type_timestamp": {
      "unique_id": "macro.dbt_utils.type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_timestamp",
      "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0841537
    },
    "macro.dbt_utils.default__type_timestamp": {
      "unique_id": "macro.dbt_utils.default__type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0842733
    },
    "macro.dbt_utils.snowflake__type_timestamp": {
      "unique_id": "macro.dbt_utils.snowflake__type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "snowflake__type_timestamp",
      "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0843904
    },
    "macro.dbt_utils.type_float": {
      "unique_id": "macro.dbt_utils.type_float",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_float",
      "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_float"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.08473
    },
    "macro.dbt_utils.default__type_float": {
      "unique_id": "macro.dbt_utils.default__type_float",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_float",
      "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0848553
    },
    "macro.dbt_utils.bigquery__type_float": {
      "unique_id": "macro.dbt_utils.bigquery__type_float",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_float",
      "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0849726
    },
    "macro.dbt_utils.type_numeric": {
      "unique_id": "macro.dbt_utils.type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_numeric",
      "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0852375
    },
    "macro.dbt_utils.default__type_numeric": {
      "unique_id": "macro.dbt_utils.default__type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_numeric",
      "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.085358
    },
    "macro.dbt_utils.bigquery__type_numeric": {
      "unique_id": "macro.dbt_utils.bigquery__type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_numeric",
      "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.085474
    },
    "macro.dbt_utils.type_bigint": {
      "unique_id": "macro.dbt_utils.type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_bigint",
      "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.085736
    },
    "macro.dbt_utils.default__type_bigint": {
      "unique_id": "macro.dbt_utils.default__type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_bigint",
      "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0858548
    },
    "macro.dbt_utils.bigquery__type_bigint": {
      "unique_id": "macro.dbt_utils.bigquery__type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_bigint",
      "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0859714
    },
    "macro.dbt_utils.type_int": {
      "unique_id": "macro.dbt_utils.type_int",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_int",
      "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0862334
    },
    "macro.dbt_utils.default__type_int": {
      "unique_id": "macro.dbt_utils.default__type_int",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_int",
      "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.086352
    },
    "macro.dbt_utils.bigquery__type_int": {
      "unique_id": "macro.dbt_utils.bigquery__type_int",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_int",
      "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0864677
    },
    "macro.dbt_utils.date_trunc": {
      "unique_id": "macro.dbt_utils.date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "date_trunc",
      "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0870943
    },
    "macro.dbt_utils.default__date_trunc": {
      "unique_id": "macro.dbt_utils.default__date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "default__date_trunc",
      "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0873244
    },
    "macro.dbt_utils.bigquery__date_trunc": {
      "unique_id": "macro.dbt_utils.bigquery__date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "bigquery__date_trunc",
      "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.08755
    },
    "macro.dbt_utils.cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "cast_bool_to_text",
      "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0881202
    },
    "macro.dbt_utils.default__cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "default__cast_bool_to_text",
      "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.088357
    },
    "macro.dbt_utils.redshift__cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "redshift__cast_bool_to_text",
      "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.088567
    },
    "macro.dbt_utils.length": {
      "unique_id": "macro.dbt_utils.length",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "length",
      "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__length"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.089137
    },
    "macro.dbt_utils.default__length": {
      "unique_id": "macro.dbt_utils.default__length",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "default__length",
      "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0893216
    },
    "macro.dbt_utils.redshift__length": {
      "unique_id": "macro.dbt_utils.redshift__length",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "redshift__length",
      "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.089494
    },
    "macro.dbt_utils.width_bucket": {
      "unique_id": "macro.dbt_utils.width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "width_bucket",
      "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__width_bucket"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.09127
    },
    "macro.dbt_utils.default__width_bucket": {
      "unique_id": "macro.dbt_utils.default__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "default__width_bucket",
      "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0921705
    },
    "macro.dbt_utils.redshift__width_bucket": {
      "unique_id": "macro.dbt_utils.redshift__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "redshift__width_bucket",
      "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0929768
    },
    "macro.dbt_utils.snowflake__width_bucket": {
      "unique_id": "macro.dbt_utils.snowflake__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "snowflake__width_bucket",
      "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0932987
    },
    "macro.dbt_utils.replace": {
      "unique_id": "macro.dbt_utils.replace",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/replace.sql",
      "original_file_path": "macros/cross_db_utils/replace.sql",
      "name": "replace",
      "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__replace"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0939426
    },
    "macro.dbt_utils.default__replace": {
      "unique_id": "macro.dbt_utils.default__replace",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/replace.sql",
      "original_file_path": "macros/cross_db_utils/replace.sql",
      "name": "default__replace",
      "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0942268
    },
    "macro.dbt_utils.last_day": {
      "unique_id": "macro.dbt_utils.last_day",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "last_day",
      "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0951052
    },
    "macro.dbt_utils.default_last_day": {
      "unique_id": "macro.dbt_utils.default_last_day",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "default_last_day",
      "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0955682
    },
    "macro.dbt_utils.default__last_day": {
      "unique_id": "macro.dbt_utils.default__last_day",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "default__last_day",
      "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0958145
    },
    "macro.dbt_utils.postgres__last_day": {
      "unique_id": "macro.dbt_utils.postgres__last_day",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "postgres__last_day",
      "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0964942
    },
    "macro.dbt_utils.redshift__last_day": {
      "unique_id": "macro.dbt_utils.redshift__last_day",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "redshift__last_day",
      "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0967948
    },
    "macro.dbt_utils.position": {
      "unique_id": "macro.dbt_utils.position",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "position",
      "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__position"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0974529
    },
    "macro.dbt_utils.default__position": {
      "unique_id": "macro.dbt_utils.default__position",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "default__position",
      "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0976834
    },
    "macro.dbt_utils.bigquery__position": {
      "unique_id": "macro.dbt_utils.bigquery__position",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "bigquery__position",
      "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0979092
    },
    "macro.dbt_utils.split_part": {
      "unique_id": "macro.dbt_utils.split_part",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "split_part",
      "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__split_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0986295
    },
    "macro.dbt_utils.default__split_part": {
      "unique_id": "macro.dbt_utils.default__split_part",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "default__split_part",
      "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.09891
    },
    "macro.dbt_utils.bigquery__split_part": {
      "unique_id": "macro.dbt_utils.bigquery__split_part",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "bigquery__split_part",
      "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.0992103
    },
    "macro.dbt_utils._is_ephemeral": {
      "unique_id": "macro.dbt_utils._is_ephemeral",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/_is_ephemeral.sql",
      "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql",
      "name": "_is_ephemeral",
      "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1006424
    },
    "macro.dbt_utils.string_literal": {
      "unique_id": "macro.dbt_utils.string_literal",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/literal.sql",
      "original_file_path": "macros/cross_db_utils/literal.sql",
      "name": "string_literal",
      "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__string_literal"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1011465
    },
    "macro.dbt_utils.default__string_literal": {
      "unique_id": "macro.dbt_utils.default__string_literal",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/literal.sql",
      "original_file_path": "macros/cross_db_utils/literal.sql",
      "name": "default__string_literal",
      "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.10132
    },
    "macro.dbt_utils.identifier": {
      "unique_id": "macro.dbt_utils.identifier",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "identifier",
      "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__identifier"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1021595
    },
    "macro.dbt_utils.default__identifier": {
      "unique_id": "macro.dbt_utils.default__identifier",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "default__identifier",
      "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1023405
    },
    "macro.dbt_utils.bigquery__identifier": {
      "unique_id": "macro.dbt_utils.bigquery__identifier",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "bigquery__identifier",
      "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1025088
    },
    "macro.dbt_utils.datediff": {
      "unique_id": "macro.dbt_utils.datediff",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "datediff",
      "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.105837
    },
    "macro.dbt_utils.default__datediff": {
      "unique_id": "macro.dbt_utils.default__datediff",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "default__datediff",
      "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.106121
    },
    "macro.dbt_utils.bigquery__datediff": {
      "unique_id": "macro.dbt_utils.bigquery__datediff",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "bigquery__datediff",
      "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.106394
    },
    "macro.dbt_utils.postgres__datediff": {
      "unique_id": "macro.dbt_utils.postgres__datediff",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "postgres__datediff",
      "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.109466
    },
    "macro.dbt_utils.redshift__datediff": {
      "unique_id": "macro.dbt_utils.redshift__datediff",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "redshift__datediff",
      "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1098175
    },
    "macro.dbt_utils._is_relation": {
      "unique_id": "macro.dbt_utils._is_relation",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/_is_relation.sql",
      "original_file_path": "macros/cross_db_utils/_is_relation.sql",
      "name": "_is_relation",
      "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.110659
    },
    "macro.dbt_utils.current_timestamp": {
      "unique_id": "macro.dbt_utils.current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "current_timestamp",
      "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1115596
    },
    "macro.dbt_utils.default__current_timestamp": {
      "unique_id": "macro.dbt_utils.default__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1117556
    },
    "macro.dbt_utils.redshift__current_timestamp": {
      "unique_id": "macro.dbt_utils.redshift__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "redshift__current_timestamp",
      "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1118782
    },
    "macro.dbt_utils.bigquery__current_timestamp": {
      "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "bigquery__current_timestamp",
      "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1119976
    },
    "macro.dbt_utils.current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "current_timestamp_in_utc",
      "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__current_timestamp_in_utc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1122646
    },
    "macro.dbt_utils.default__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "default__current_timestamp_in_utc",
      "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1124485
    },
    "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "snowflake__current_timestamp_in_utc",
      "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp",
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1126938
    },
    "macro.dbt_utils.postgres__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "postgres__current_timestamp_in_utc",
      "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.112879
    },
    "macro.dbt_utils.redshift__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "redshift__current_timestamp_in_utc",
      "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__current_timestamp_in_utc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1131005
    },
    "macro.dbt_utils.except": {
      "unique_id": "macro.dbt_utils.except",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "except",
      "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1136196
    },
    "macro.dbt_utils.default__except": {
      "unique_id": "macro.dbt_utils.default__except",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "default__except",
      "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.11375
    },
    "macro.dbt_utils.bigquery__except": {
      "unique_id": "macro.dbt_utils.bigquery__except",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "bigquery__except",
      "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1138704
    },
    "macro.dbt_utils.safe_cast": {
      "unique_id": "macro.dbt_utils.safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "safe_cast",
      "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__safe_cast"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1145175
    },
    "macro.dbt_utils.default__safe_cast": {
      "unique_id": "macro.dbt_utils.default__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "default__safe_cast",
      "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1147542
    },
    "macro.dbt_utils.snowflake__safe_cast": {
      "unique_id": "macro.dbt_utils.snowflake__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "snowflake__safe_cast",
      "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.114969
    },
    "macro.dbt_utils.bigquery__safe_cast": {
      "unique_id": "macro.dbt_utils.bigquery__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "bigquery__safe_cast",
      "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.115271
    },
    "macro.dbt_utils.dateadd": {
      "unique_id": "macro.dbt_utils.dateadd",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "dateadd",
      "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.116175
    },
    "macro.dbt_utils.default__dateadd": {
      "unique_id": "macro.dbt_utils.default__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "default__dateadd",
      "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1164565
    },
    "macro.dbt_utils.bigquery__dateadd": {
      "unique_id": "macro.dbt_utils.bigquery__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "bigquery__dateadd",
      "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.116736
    },
    "macro.dbt_utils.postgres__dateadd": {
      "unique_id": "macro.dbt_utils.postgres__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "postgres__dateadd",
      "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.117013
    },
    "macro.dbt_utils.redshift__dateadd": {
      "unique_id": "macro.dbt_utils.redshift__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "redshift__dateadd",
      "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.117346
    },
    "macro.dbt_utils.hash": {
      "unique_id": "macro.dbt_utils.hash",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "hash",
      "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__hash"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1179051
    },
    "macro.dbt_utils.default__hash": {
      "unique_id": "macro.dbt_utils.default__hash",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "default__hash",
      "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.118147
    },
    "macro.dbt_utils.bigquery__hash": {
      "unique_id": "macro.dbt_utils.bigquery__hash",
      "package_name": "dbt_utils",
      "root_path": "/dbt-deps/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "bigquery__hash",
      "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__hash"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1183648
    },
    "macro.idw_package.clean_string": {
      "unique_id": "macro.idw_package.clean_string",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/clean_string.sql",
      "original_file_path": "macros/clean_string.sql",
      "name": "clean_string",
      "macro_sql": "{% macro clean_string(input_string) %}\n\ncase when {{ input_string }} = 'Unknown' then 'Unknown'\nelse\n  regexp_replace(\n    replace(\n      trim(\n        regexp_replace(\n          replace(\n            translate(\n                lower( {{ input_string }} ),\n              '\u00e6\u1eb1\u00e0\u00e2\u00e5\u0101\u00e3\u1eaf\u00e1\u0103\u00e4\u1ead\u1ea1\u1ea3\u0105\u010b\u010d\u0107\u00e7\u010f\u1e11\u0111\u00f0\u1ec1\u0115\u00e8\u00e9\u1ec7\u00ea\u011b\u00eb\u0113\u0117\u1ebf\u0119\u01dd\u0259\u0121\u011f\u1e29\u0127\u1ecb\u0129\u012b\u00ed\u00ef\u00ee\u0131\u012d\u00ec\u0137\u013c\u013a\u0142\u00f1\u0148\u0146\u0144\u00f2\u014d\u00f6\u01d2\u1edb\u01a1\u1ed3\u00f4\u00f8\u00f3\u00f5\u0151\u014f\u1ecd\u1e59\u1e5f\u0159\u015f\u0219\u0161\u015b\u021b\u0163\u01b0\u1eeb\u016f\u016b\u0169\u016d\u00fa\u00fc\u0173\u00fd\u017e\u017c\u1e95\u1e95/-',\n              'aaaaaaaaaaaaaaaccccddddeeeeeeeeeeeeeegghhiiiiiiiiiklllnnnnoooooooooooooorrrssssttuuuuuuuuuyzzzz  '),\n            '&', ' and '),\n        '[^A-Za-z0-9_ ]', '')\n      ),\n    ' ', '_'),\n  '_\\+', '_') end\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1189213
    },
    "macro.idw_package.apply_row_access_policies": {
      "unique_id": "macro.idw_package.apply_row_access_policies",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/row_access_policies.sql",
      "original_file_path": "macros/row_access_policies.sql",
      "name": "apply_row_access_policies",
      "macro_sql": "{% macro apply_row_access_policies() %}\n    {% if execute %}\n        {{ idw_package.apply_row_access_policies_to_node(model) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.apply_row_access_policies_to_node"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1259792
    },
    "macro.idw_package._get_required_row_access_policies_for_node": {
      "unique_id": "macro.idw_package._get_required_row_access_policies_for_node",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/row_access_policies.sql",
      "original_file_path": "macros/row_access_policies.sql",
      "name": "_get_required_row_access_policies_for_node",
      "macro_sql": "{% macro _get_required_row_access_policies_for_node(node) %}\n    {% if 'applied_row_access_policy' in node.meta %}\n        {% set model_row_access_policy = node.meta.applied_row_access_policy.name %}\n        {{ return( model_row_access_policy ) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.126442
    },
    "macro.idw_package._get_schema_row_access_policies": {
      "unique_id": "macro.idw_package._get_schema_row_access_policies",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/row_access_policies.sql",
      "original_file_path": "macros/row_access_policies.sql",
      "name": "_get_schema_row_access_policies",
      "macro_sql": "{% macro _get_schema_row_access_policies(target_database, target_schema) %}\n    {% set existing_row_access_policy_q %}\n        USE DATABASE {{ target_database }};\n        USE SCHEMA {{ target_schema }};\n        SHOW ROW ACCESS POLICIES;\n    {% endset %}\n    {% set existing_row_access_policy_q_results = dbt_utils.get_query_results_as_dict(existing_row_access_policy_q) %}\n    {% set existing_schema_row_access_policy_list = existing_row_access_policy_q_results.name %}\n    {{ return( existing_schema_row_access_policy_list ) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_query_results_as_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1270444
    },
    "macro.idw_package._add_or_alter_row_access_policies_to_schema": {
      "unique_id": "macro.idw_package._add_or_alter_row_access_policies_to_schema",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/row_access_policies.sql",
      "original_file_path": "macros/row_access_policies.sql",
      "name": "_add_or_alter_row_access_policies_to_schema",
      "macro_sql": "{% macro _add_or_alter_row_access_policies_to_schema(target_database, target_schema, schema_row_access_policies, model_row_access_policy, existing_schema_row_access_policy_list) %}\n    {% for row_policy in schema_row_access_policies|selectattr('name', 'equalto', model_row_access_policy) %}\n        {% set row_policy_name = row_policy.name %}\n        {% set row_mapping_table = row_policy.mapping_table %}\n        {% set signatures_list = [] %}\n        {% set sql_where_clause = row_policy.sql_where_clause %}\n        {% for signature in row_policy.signatures %}\n                {% do signatures_list.append(signature) %}\n        {% endfor %}\n        {% set signatures_string = signatures_list|join(', ') %}\n        {% set expression = \" exists (select 1 from \" ~ row_mapping_table ~ \" \" ~ sql_where_clause ~ \" );\" %}\n        {% if row_policy_name.upper() not in existing_schema_row_access_policy_list %}\n            {% set row_access_q %}\n                USE DATABASE {{ target_database }};\n                USE SCHEMA {{ target_schema }};\n                CREATE ROW ACCESS POLICY {{ row_policy_name|upper }} AS ({{ signatures_string }}) returns boolean -> {{ expression }}\n            {% endset %}\n\n            {{ log(\"row_access_q \" ~ row_access_q, info=True) }}\n            {% do run_query(row_access_q) %}\n        {% else %}\n            {% set alter_row_access_q %}\n                USE DATABASE {{ target_database }};\n                USE SCHEMA {{ target_schema }};\n                ALTER ROW ACCESS POLICY {{ row_policy_name|upper }} SET BODY -> {{ expression }}\n            {% endset %}\n            {% do run_query(alter_row_access_q) %}\n            {{ log(\"alter_row_access_q\" ~ alter_row_access_q, info=True) }}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1294827
    },
    "macro.idw_package._get_table_row_access_policy": {
      "unique_id": "macro.idw_package._get_table_row_access_policy",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/row_access_policies.sql",
      "original_file_path": "macros/row_access_policies.sql",
      "name": "_get_table_row_access_policy",
      "macro_sql": "{% macro _get_table_row_access_policy(target_database, target_schema, table_name) %}\n    {% set existing_model_row_access_policy_q = \"USE DATABASE \" ~ target_database ~ \"; USE SCHEMA INFORMATION_SCHEMA; SELECT * from table(information_schema.policy_references(REF_ENTITY_DOMAIN => 'TABLE', REF_ENTITY_NAME => '\" ~  target_database ~ \".\" ~ target_schema ~ \".\" ~ table_name ~ \"'));\" %}\n    {% set existing_model_row_access_policy_results = dbt_utils.get_query_results_as_dict(existing_model_row_access_policy_q) %}\n    {% if existing_model_row_access_policy_results.POLICY_NAME|length != 0 %}\n        {{ return( existing_model_row_access_policy_results.POLICY_NAME[0] ) }}\n    {% else %}\n        {{ return( '' ) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_query_results_as_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1303546
    },
    "macro.idw_package._add_row_access_policy_remove_old_policy_on_table": {
      "unique_id": "macro.idw_package._add_row_access_policy_remove_old_policy_on_table",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/row_access_policies.sql",
      "original_file_path": "macros/row_access_policies.sql",
      "name": "_add_row_access_policy_remove_old_policy_on_table",
      "macro_sql": "{% macro _add_row_access_policy_remove_old_policy_on_table(target_database, target_schema, table_name, policy, existing_model_row_access_policy) %}\n    {% set row_policy_name = policy.name.upper() %}\n    {% set row_policy_column = policy.column.upper() %}\n    {% set row_policy_full_name = target_database ~ \".\" ~ target_schema ~ \".\" ~ row_policy_name %}\n    {% set new_policy_equals_existing_policy = row_policy_name == existing_model_row_access_policy.upper() %}\n\n    {% if existing_model_row_access_policy != '' and not new_policy_equals_existing_policy %}\n        {% set remove_existing_row_access_q %}\n            USE DATABASE {{ target_database }};\n            USE SCHEMA {{ target_schema }};\n            ALTER TABLE {{ table_name }} DROP ROW ACCESS POLICY {{ existing_model_row_access_policy }};\n        {% endset %}\n        {{ log(remove_existing_row_access_q, info = True) }}\n        {% do run_query(remove_existing_row_access_q) %}\n    {% endif %}\n\n    {% if existing_model_row_access_policy == '' or not new_policy_equals_existing_policy %}\n        {% set apply_row_access_q %}\n            USE DATABASE {{ target_database }};\n            USE SCHEMA {{ target_schema }};\n            ALTER TABLE {{ table_name }} ADD ROW ACCESS POLICY {{ row_policy_full_name}} ON ( {{ row_policy_column }} );\n        {% endset %}\n        {{ log(apply_row_access_q, info = True) }}\n        {% do run_query(apply_row_access_q) %}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1322455
    },
    "macro.idw_package.apply_row_access_policies_to_node": {
      "unique_id": "macro.idw_package.apply_row_access_policies_to_node",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/row_access_policies.sql",
      "original_file_path": "macros/row_access_policies.sql",
      "name": "apply_row_access_policies_to_node",
      "macro_sql": "{% macro apply_row_access_policies_to_node(node) %}    \n    {% if \"meta\" in node and node.meta != {} %}\n        {% set target_schema = node.schema %}\n        {% set target_database = target.database %}\n        {% set table_name = node.name %}\n        \n        {# Step 1: Check if the table needs a row access policy #}\n        {% set model_row_access_policy = idw_package._get_required_row_access_policies_for_node(node) -%}\n        {% if model_row_access_policy|length!=0 %}\n            {# Step 2: check existing row access policies in schema #}\n            {% set existing_schema_row_access_policy_list = idw_package._get_schema_row_access_policies(target_database, target_schema) -%}\n\n            {# Step 3: create or alter existing row access policies #}\n            {% set schema_row_access_policies = node.config.meta.row_access_policies %}\n            {{ idw_package._add_or_alter_row_access_policies_to_schema(target_database, target_schema, schema_row_access_policies, model_row_access_policy, existing_schema_row_access_policy_list) }}\n\n            {# Step 4: check row access policy already exists on table #}\n            {% set existing_model_row_access_policy = idw_package._get_table_row_access_policy(target_database, target_schema, table_name) -%}\n            \n            {# Step 5: apply row access policies to table if it doesnt have one already #}\n            {{ idw_package._add_row_access_policy_remove_old_policy_on_table(target_database, target_schema, table_name, node.meta.applied_row_access_policy, existing_model_row_access_policy) }}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package._get_required_row_access_policies_for_node",
          "macro.idw_package._get_schema_row_access_policies",
          "macro.idw_package._add_or_alter_row_access_policies_to_schema",
          "macro.idw_package._get_table_row_access_policy",
          "macro.idw_package._add_row_access_policy_remove_old_policy_on_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.133924
    },
    "macro.idw_package.apply_restricted_field_masking": {
      "unique_id": "macro.idw_package.apply_restricted_field_masking",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/restricted_fields.sql",
      "original_file_path": "macros/restricted_fields.sql",
      "name": "apply_restricted_field_masking",
      "macro_sql": "{% macro apply_restricted_field_masking() %}\n    {% if execute %}\n        {{ idw_package.apply_restricted_field_masking_to_node(model) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.apply_restricted_field_masking_to_node"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.13746
    },
    "macro.idw_package.apply_restricted_field_masking_to_node": {
      "unique_id": "macro.idw_package.apply_restricted_field_masking_to_node",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/restricted_fields.sql",
      "original_file_path": "macros/restricted_fields.sql",
      "name": "apply_restricted_field_masking_to_node",
      "macro_sql": "{% macro apply_restricted_field_masking_to_node(node) %}\n    {% set target_schema = node['schema'] %}\n    {% set target_database = target.database %}\n    {% set ns = namespace() %}\n    {% set ns.needs_mask = False %}\n    {% set ns.masks = [] %}\n    \n    {% if \"meta\" in node.config %}\n        {# Step 1: Find all of the masks in the table #}\n        {% for col in node['columns'].keys() %}\n            {% if \"meta\" in node['columns'][col] %}\n                {% if node['columns'][col]['meta']['contains_pii'] == True %}\n                    {% set ns.needs_mask = True %}\n                    {% set column_mask_name = node['columns'][col]['meta']['masking_policy_name'].upper() %}\n                    {% if column_mask_name not in ns.masks %}\n                        {% do ns.masks.append(column_mask_name) %}\n                    {% endif %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n\n        {% if ns.needs_mask %}\n\n            {% set masking_policies = node.config.meta.masking_policies %}\n            {{ log(masking_policies, info=True) }}\n            \n            {% for mask in masking_policies %}\n                {% set mask_name = mask.name.upper() %}\n\n                {% if mask_name in ns.masks %}\n\n                    {% set masked_value = mask.masked_value %}\n                    {% if masked_value == '\"******\"'%}\n                        {% set masked_value = \"'******'\" %}\n                    {% endif %}\n                    {% set masking_policy_visibility_roles = mask.masking_policy_visibility_roles %}\n                    {% set masking_session_context = mask.masking_session_context %}\n                    {{ log(mask_name, info=True) }}\n                    {{ log(masked_value, info=True) }}\n                    {{ log(masking_policy_visibility_roles, info=True) }}\n                    {{ log(masking_session_context, info=True) }}\n\n                    {# Step 2: Find existing masking in the schema #}\n                    {% set existing_mask_query_results = dbt_utils.get_query_results_as_dict(\"USE DATABASE \" ~ target_database ~ \"; USE SCHEMA \" ~ target_schema ~ \"; SHOW MASKING POLICIES;\") %}\n                    {% set existing_mask_list = existing_mask_query_results.name %}\n                    {{ log(\"\\n ... MASK NAME, \" ~ mask_name, info=True)}}\n                    {{ log(\"\\n ... QUERY RESULTS, \" ~ existing_mask_query_results, info=True)}}\n                    {{ log(\"\\n ... existing_mask_list, \" ~ existing_mask_list, info=True)}}\n                    {% if masking_session_context == 'IS_ROLE_IN_SESSION'%}\n                        {% set role_statement = \" WHEN IS_ROLE_IN_SESSION('\" ~ masking_policy_visibility_roles ~ \"')\" %}\n                        {% set comment_statement = '\\'{\"UNMASKED IS_ROLE_IN_SESSION\": [\"' ~ masking_policy_visibility_roles ~ '\"]}\\'' %}\n                    {% else %}\n                        {% set role_statement = \" WHEN current_role() IN \" ~ masking_policy_visibility_roles%}\n                        {% set role_statement = role_statement.replace(\"'(\", '(').replace(\")'\", ')') %}\n                        {% set comment_statement = '{\"UNMASKED CURRENT_ROLE\": [' ~ masking_policy_visibility_roles ~ ']}' %}\n                        {% set comment_statement = \"'\" ~ comment_statement.replace(\"(\", \"\").replace(\")\", \"\").replace(\"'\", '\"') ~ \"'\" %}\n                    {% endif %}\n\n                    {% set masking_body = \"CASE\" ~ role_statement ~ \" THEN val WHEN val = 'NULL' THEN NULL ELSE \" ~ masked_value ~ \" END\" %}\n\n                    {# Step 3: Create a new mask if its new, or alter it if it already exists #}\n                    {% if mask_name not in existing_mask_list %}\n                        {% set masking_q = \"USE DATABASE \" ~ target_database ~ \";\n                                USE SCHEMA \" ~ target_schema ~ \";\n                                CREATE MASKING POLICY \" ~ mask_name ~ \" AS (val string) returns string -> \" ~ masking_body ~ \"\n                                COMMENT =  \" ~ comment_statement ~ \";\" %}\n                        {% do run_query(masking_q) %}\n                        {{ log(\"masking_q\" ~ masking_q, info=True) }}\n                    {% else %}\n                        {% set alter_masking_statement = \"USE DATABASE \" ~ target_database ~ \"; USE SCHEMA \" ~ target_schema ~ \"; ALTER MASKING POLICY \" ~ mask_name ~ \" SET BODY -> \" ~ masking_body ~ \"; ALTER MASKING POLICY \" ~ mask_name ~ \" SET COMMENT = \" ~ comment_statement ~ \";\"%}\n                        {% do run_query(alter_masking_statement) %}\n                        {{ log(\"alter_masking_statement\" ~ alter_masking_statement, info=True) }}\n                    {% endif %}\n                {% endif %}\n\n            {% endfor %}\n\n            {# Step 4: Apply the mask to the columns and remove other masks #}\n            {% for col in node['columns'].keys() %}\n                {% if \"meta\" in node['columns'][col] %}\n                    {% if node['columns'][col]['meta']['contains_pii'] == True %}\n                        {{ log(\"PIID : \" ~ node['columns'][col]['meta']['contains_pii'], info=True) }}\n                        {% set masked_column = col %}\n                        {% set table_name = node['name'] %}\n                        {% set column_mask_name = node['columns'][col]['meta']['masking_policy_name'].upper() %}\n\n                        {{ log(\"\\n ... In table \" ~ table_name ~ \" column \" ~ col ~ \" has masking policy \" ~ column_mask_name , info=True) }}\n\n                        {% set apply_q = \"USE DATABASE \" ~ target_database ~ \";\n                                        USE SCHEMA \" ~ target_schema ~ \";\n                                        ALTER TABLE \" ~ table_name ~ \"\n                                        MODIFY COLUMN \" ~ masked_column ~\n                                        \" UNSET MASKING POLICY;\n                                        ALTER TABLE \" ~ table_name ~ \"\n                                        MODIFY COLUMN \" ~ masked_column ~\n                                        \" SET MASKING POLICY \" ~ column_mask_name ~ \";\" %}\n                        {{ log(\"\\n ... APPLY Q , \" ~ apply_q, info=True)}}\n                        {% do run_query(apply_q) %}\n                    {% endif %}\n                {% endif %}\n            {% endfor %}\n            \n        {% endif %}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_query_results_as_dict",
          "macro.dbt_utils.replace",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1460702
    },
    "macro.idw_package.append_timezone": {
      "unique_id": "macro.idw_package.append_timezone",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/timestamp.sql",
      "original_file_path": "macros/timestamp.sql",
      "name": "append_timezone",
      "macro_sql": "{% macro append_timezone(timestamp_column, time_zone_name) -%}\nTIMESTAMP_TZ_FROM_PARTS(\n  date_part(\"year\", {{ timestamp_column }}::timestamp_ntz),\n  date_part(\"month\", {{ timestamp_column }}::timestamp_ntz),\n  date_part(\"day\", {{ timestamp_column }}::timestamp_ntz),\n  date_part(\"hour\", {{ timestamp_column }}::timestamp_ntz),\n  date_part(\"minute\", {{ timestamp_column }}::timestamp_ntz),\n  date_part(\"second\", {{ timestamp_column }}::timestamp_ntz),\n  date_part(\"ns\", {{ timestamp_column }}::timestamp_ntz),\n  '{{ time_zone_name }}'\n)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1469657
    },
    "macro.idw_package.tag_fields_snowflake": {
      "unique_id": "macro.idw_package.tag_fields_snowflake",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/tag_fields_snowflake.sql",
      "original_file_path": "macros/tag_fields_snowflake.sql",
      "name": "tag_fields_snowflake",
      "macro_sql": "{% macro tag_fields_snowflake() %}\n    {% if execute %}\n        {{ idw_package.apply_tag_fields_snowflake(model) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.apply_tag_fields_snowflake"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1493044
    },
    "macro.idw_package.apply_tag_fields_snowflake": {
      "unique_id": "macro.idw_package.apply_tag_fields_snowflake",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/tag_fields_snowflake.sql",
      "original_file_path": "macros/tag_fields_snowflake.sql",
      "name": "apply_tag_fields_snowflake",
      "macro_sql": "{% macro apply_tag_fields_snowflake(node) %}\n    {% set table_name = node['name'] %}\n    {% set target_schema = node['schema'] %}\n    {% set target_database = target.database %}\n    {% set show_tag_q = \"USE DATABASE \" ~ target.database ~ \";\n                    USE SCHEMA \" ~ target_schema ~ \";\n                    SHOW TAGS;\"%}\n    {% set tag_references_q = \"SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.TAG_REFERENCES\n                    WHERE OBJECT_DATABASE = '\" ~ target.database ~ \"'\n                    AND OBJECT_SCHEMA = '\" ~ target_schema ~ \"'\n                    AND OBJECT_NAME = '\" ~ table_name.upper() ~ \"';\" %}\n    {% set tag_results = dbt_utils.get_query_results_as_dict(show_tag_q) %}\n    {% set tag_references_results = dbt_utils.get_query_results_as_dict(tag_references_q) %}\n    {% set existing_tag_list = tag_results.name %}\n\n    {% for col in node['columns'].keys() %}\n        {% if 'snowflake_tags' in node['columns'][col]['meta'] %}\n\n            {% set tags = node['columns'][col]['meta']['snowflake_tags'] %}\n            {{ log(\"TAGS : \" ~ tags, info=True) }}\n\n            {# Removing unnecessary tags from the column #}\n            {% for old_tag in existing_tag_list %}\n                {% if old_tag not in tags %}\n                    {% set remove_tag_q = \"USE DATABASE \" ~ target.database ~ \";\n                        USE SCHEMA \" ~ target_schema ~ \";\n                        ALTER TABLE \" ~ table_name ~ \" MODIFY COLUMN \" ~ col ~\n                        \" UNSET TAG \" ~ old_tag ~ \"; \" %}\n                    {% do run_query(remove_tag_q) %}\n                    {{ log(\"\\n remove_tag_q ... \" ~ remove_tag_q, info=True) }}\n                {% endif %}\n            {% endfor %}\n\n            {% for key, value in tags.items() %}\n                {% set create_tag_q = \"USE DATABASE \" ~ target.database ~ \";\n                    USE SCHEMA \" ~ target_schema ~ \";\n                    CREATE TAG IF NOT EXISTS \" ~ key ~ \";\" %}\n                {% do run_query(create_tag_q) %}\n                {{ log(\"\\n create_tag_q .... \" ~ create_tag_q, info=True) }}\n                {% set apply_tag_q = \"USE DATABASE \" ~ target.database ~ \";\n                    USE SCHEMA \" ~ target_schema ~ \";\n                    ALTER TABLE \" ~ table_name ~ \" MODIFY COLUMN \" ~ col ~\n                    \" SET TAG \" ~ key ~ \" = '\" ~ value ~ \"'; \"%}\n                {{ log(\"\\n ... APPLY TAG Q , \" ~ apply_tag_q, info=True)}}\n                {% do run_query(apply_tag_q) %}\n                {{ log(\"\\n ... In table \" ~ table_name ~ \" column \" ~ col ~ \" will be tagged \" ~ key ~ \" = '\" ~ value ~ \"'\" , info=True) }}\n            {% endfor %}\n        {% elif col.upper() in tag_references_results.COLUMN_NAME %}\n            {% for existing_column in tag_references_results.COLUMN_NAME %}\n                {% if existing_column == col.upper() %}\n                    {% set tag_to_remove = tag_references_results.TAG_NAME[loop.index] %}\n                    {{ log(\"\\n tag_to_remove ... \" ~ tag_to_remove, info=True) }}\n                    {% set remove_tag_q = \"USE DATABASE \" ~ target.database ~ \";\n                        USE SCHEMA \" ~ target_schema ~ \";\n                        ALTER TABLE \" ~ table_name ~ \" MODIFY COLUMN \" ~ col ~\n                        \" UNSET TAG \" ~ tag_to_remove ~ \"; \" %}\n                    {{ log(\"\\n remove_tag_q ... \" ~ remove_tag_q, info=True)}}\n                    {% do run_query(remove_tag_q) %}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_query_results_as_dict",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1543355
    },
    "macro.idw_package.scd2_from_events": {
      "unique_id": "macro.idw_package.scd2_from_events",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/scd2.sql",
      "original_file_path": "macros/scd2.sql",
      "name": "scd2_from_events",
      "macro_sql": "{% macro scd2_from_events(\n    source_relation,\n    identity_columns,\n    attribute_columns,\n    event_timestamp_column=\"timestamp_effective\",\n    alpha_timestamp_expression=None,\n    subtract_ns=True) -%}\n\n{% set alpha_timestamp_expression = alpha_timestamp_expression or event_timestamp_column %}\n\nWITH distinct_events AS (\n\n  SELECT {{ identity_columns|join(\"\\n, \")|indent(4) }}\n    , {{ attribute_columns|join(\"\\n, \")|indent(4) }}\n    , {{ event_timestamp_column }} AS _timestamp_effective\n    , HASH({{ identity_columns|join(\"\\n, \")|indent(6) }}) AS identity_hash\n    , HASH({{ attribute_columns|join(\"\\n, \")|indent(6) }}) AS values_hash\n    , row_number() OVER (PARTITION BY identity_hash ORDER BY _timestamp_effective) = 1 AS _is_first_scd_row\n    , {{ alpha_timestamp_expression }} AS _alpha_timestamp\n  FROM {{ source_relation }}\n  QUALIFY LAG(values_hash) OVER (\n      PARTITION BY identity_hash\n      ORDER BY _timestamp_effective\n    ) IS DISTINCT FROM values_hash\n)\n\nSELECT {{ identity_columns|join(\"\\n, \")|indent(2) }}\n  , {{ attribute_columns|join(\"\\n, \")|indent(2) }}\n  , iff(_is_first_scd_row, _alpha_timestamp, _timestamp_effective) AS timestamp_effective\n  , LEAD(timestamp_effective{{ \" - INTERVAL '1 ns'\" if subtract_ns else \"\" }}, 1, '9999-12-31'::TIMESTAMP_TZ) OVER (\n      PARTITION BY identity_hash\n      ORDER BY _timestamp_effective, values_hash\n    ) AS timestamp_expired\nFROM distinct_events\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1587777
    },
    "macro.idw_package.scd2_from_events_with_cleanup": {
      "unique_id": "macro.idw_package.scd2_from_events_with_cleanup",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/scd2.sql",
      "original_file_path": "macros/scd2.sql",
      "name": "scd2_from_events_with_cleanup",
      "macro_sql": "{% macro scd2_from_events_with_cleanup(\n    source_relation,\n    identity_columns,\n    attribute_columns,\n    event_timestamp_column=\"timestamp_effective\",\n    subtract_ns=True,\n    cleanup=False) -%}\n{% set scd2_query = scd2_from_events(\n    source_relation=source_relation,\n    identity_columns=identity_columns,\n    attribute_columns=attribute_columns,\n    event_timestamp_column=event_timestamp_column,\n    subtract_ns=subtract_ns) -%}\n{%- if not cleanup %}\n{{ scd2_query }}\n{%- else %}\n{%- set key_columns_quoted = identity_columns %}\n{%- set data_columns = attribute_columns %}\n{%- set target_from_date = event_timestamp_column %}\nWITH dbt_SCD2__result AS (\n  {{ scd2_query }}\n)\n, dbt_SCD2__result_all AS (\n\n    SELECT\n        {% for col in key_columns_quoted%}\n          current_dim.{{ col }},\n        {% endfor %}\n        {% for col in data_columns%}\n          current_dim.{{ col }},\n        {% endfor %}\n        current_dim.{{ target_from_date }}\n    FROM {{ this }} current_dim\n    join dbt_SCD2__result scd2_result on\n                                {% for col in key_columns_quoted%}\n                                  current_dim.{{ col }} = scd2_result.{{ col }}\n                                {% if not loop.last %}AND{% endif %}\n                                {% endfor %}\n\n    UNION\n\n    SELECT\n        {{ key_columns_quoted|join(\",\") }},\n        {{ data_columns|join(\",\") }},\n        {{ target_from_date }}\n    FROM dbt_SCD2__result\n), dbt_SCD2__result_all_clean AS (\n\n    SELECT\n        {{ key_columns_quoted|join(\",\") }},\n        {{ data_columns|join(\",\") }},\n        {{ target_from_date }},\n        COALESCE(\n          LEAD({{ target_from_date}}) OVER (\n                PARTITION BY\n                    {{ key_columns_quoted|join(\",\") }}\n                ORDER BY\n                    {{ target_from_date }}\n          ){% if subtract_ns %}\n              - INTERVAL '1 nanosecond'\n          {% endif %}\n        , '9999-12-31') as timestamp_expired\n    FROM\n        dbt_SCD2__result_all\n\n)\n\nselect * from dbt_SCD2__result_all_clean\nwhere timestamp_effective < timestamp_expired\n\n{%- endif %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.scd2_from_events"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1610181
    },
    "macro.idw_package._key_part": {
      "unique_id": "macro.idw_package._key_part",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "_key_part",
      "macro_sql": "{% macro _key_part(expression) -%}\nTO_CHAR(({{ expression }})::NUMBER, 'FMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1631835
    },
    "macro.idw_package._text_to_number": {
      "unique_id": "macro.idw_package._text_to_number",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "_text_to_number",
      "macro_sql": "{% macro _text_to_number(expression) -%}\nHASH({{ expression }}) + POW(2, 64)::NUMBER\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1633668
    },
    "macro.idw_package._timestamp_to_epoch": {
      "unique_id": "macro.idw_package._timestamp_to_epoch",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "_timestamp_to_epoch",
      "macro_sql": "{% macro _timestamp_to_epoch(expression) -%}\nGREATEST(0, DATE_PART(epoch, {{ expression }}))\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1635423
    },
    "macro.idw_package._timestamp_nanoseconds": {
      "unique_id": "macro.idw_package._timestamp_nanoseconds",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "_timestamp_nanoseconds",
      "macro_sql": "{% macro _timestamp_nanoseconds(expression) -%}\nEXTRACT(nanosecond, {{ expression }})\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1637146
    },
    "macro.idw_package._infer_column_sort": {
      "unique_id": "macro.idw_package._infer_column_sort",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "_infer_column_sort",
      "macro_sql": "{% macro _infer_column_sort(column_name) %}\n{%- if column_name.lower().endswith(\"_id\") -%}\nNUMBER\n{%- elif column_name.lower().endswith(\"_key\") -%}\nKEY\n{%- elif \"timestamp\" in column_name.lower() -%}\nTIMESTAMP\n{%- else -%}\nTEXT\n{%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1642764
    },
    "macro.idw_package._build_key": {
      "unique_id": "macro.idw_package._build_key",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "_build_key",
      "macro_sql": "{% macro _build_key(column_name, sort_as) -%}\n{%- if sort_as == \"NUMBER\" %}\n    , {{ idw_package._key_part(column_name) }}\n{%- elif sort_as == \"KEY\" %}\n    , {{ column_name }}\n{%- elif sort_as == \"TIMESTAMP\" %}\n    , {{ idw_package._key_part(idw_package._timestamp_to_epoch(column_name)) }}\n    , {{ idw_package._key_part(idw_package._timestamp_nanoseconds(column_name)) }}\n{%- elif sort_as == \"DATE\" %}\n    , {{ idw_package._key_part(idw_package._timestamp_to_epoch(column_name)) }}\n{%- elif sort_as == \"TEXT\" %}\n    , {{ idw_package._key_part(idw_package._text_to_number(column_name)) }}\n{%- elif sort_as is defined -%}\n    {{ exceptions.raise_compiler_error(\"Unregistered column sort type: \" ~ sort_as) }}\n{%- else -%}\n    {{ exceptions.raise_compiler_error(\"_build_key error. Called with column_name: \" ~ column_name ~ \" sort_as: \" ~ sort_as) }}\n{%- endif %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package._key_part",
          "macro.idw_package._timestamp_to_epoch",
          "macro.idw_package._timestamp_nanoseconds",
          "macro.idw_package._text_to_number"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.165766
    },
    "macro.idw_package.ordered_key_typed": {
      "unique_id": "macro.idw_package.ordered_key_typed",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "ordered_key_typed",
      "macro_sql": "{% macro ordered_key_typed(columns) -%}\nCONCAT_WS('.'\n{%- for col_name, col_sort in columns -%}\n{{ idw_package._build_key(col_name, col_sort) }}\n{%- endfor %}\n)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package._build_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1661375
    },
    "macro.idw_package.ordered_key": {
      "unique_id": "macro.idw_package.ordered_key",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/ordered_key.sql",
      "original_file_path": "macros/ordered_key.sql",
      "name": "ordered_key",
      "macro_sql": "{% macro ordered_key() -%}\nCONCAT_WS('.'\n{%- for col_name in varargs %}\n  {%- set col_sort -%}\n    {%- if kwargs.sort_as is defined and col_name in kwargs.sort_as -%}\n      {{ kwargs.sort_as[col_name] }}\n    {%- else -%}\n      {{ idw_package._infer_column_sort(col_name) }}\n    {%- endif -%}\n  {%- endset -%}\n{{ idw_package._build_key(col_name, col_sort) }}\n{%- endfor %}\n)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package._infer_column_sort",
          "macro.idw_package._build_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1668572
    },
    "macro.idw_package.select_star_and_op_cols": {
      "unique_id": "macro.idw_package.select_star_and_op_cols",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/select_star_and_op_cols.sql",
      "original_file_path": "macros/select_star_and_op_cols.sql",
      "name": "select_star_and_op_cols",
      "macro_sql": "{% macro select_star_and_op_cols(ref_name) %}\n    {% set query = \"SELECT *, '\" ~ ref_name.identifier ~ \"' AS etl_source_name \" ~\n         \" FROM \" ~ ref_name.database ~ \".\" ~ ref_name.schema ~ \".\" ~ ref_name.identifier %}\n    {{ return(query) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1675763
    },
    "macro.idw_package.static_source": {
      "unique_id": "macro.idw_package.static_source",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/static_source.sql",
      "original_file_path": "macros/dynamic_source/static_source.sql",
      "name": "static_source",
      "macro_sql": "{% macro static_source(source_name, table_name, environment, branch=env_var('GIT_BRANCH','')) %}\n\n{% set rel = builtins.source(source_name, table_name) %}\n\n{% if execute %}\n    {% if target.name in ('dev', 'qa') %}\n        {% if env_var('SCHEMA_SUFFIX', '').startswith('_TEST') %}\n        -- Use test source\n            {% set rel = idw_package.test_source(source_name, table_name) %}\n        {% elif env_var('SCHEMA_SUFFIX', '').startswith('_QA') %}\n        -- Use limited specific environment source\n            {% set rel = idw_package.limited_source(source_name, table_name, original_path=idw_package.dynamic_relation(rel, environment, branch)) %}\n        {% else %}\n            {% set rel = idw_package.dynamic_relation(rel, environment, branch) %}\n            {% if env_var('LIMIT_DATA', 'off') != 'off' %}\n                {% set rel = idw_package.limited_source(source_name, table_name, original_path=rel) %}\n            {% endif %}\n        {% endif %}\n    {% else %}\n    -- Use specific environment source\n        {% set rel = idw_package.dynamic_relation(rel, environment, branch) %}\n    {% endif %}\n{% endif %}\n\n{{ return(rel) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.test_source",
          "macro.idw_package.limited_source",
          "macro.idw_package.dynamic_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1704323
    },
    "macro.idw_package.get_custom_schema": {
      "unique_id": "macro.idw_package.get_custom_schema",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/get_custom_schema.sql",
      "original_file_path": "macros/dynamic_source/get_custom_schema.sql",
      "name": "get_custom_schema",
      "macro_sql": "{% macro get_custom_schema(schema_name, environment, branch=env_var('GIT_BRANCH',''), schema_suffix=env_var('SCHEMA_SUFFIX', '')) %}\n    {%- set schema_prefix = branch + '_' if branch != '' else '' -%}\n    {%- set environment = environment or target.name -%}\n    {% if environment in ('dev', 'qa') %}\n        {% set custom_schema = schema_prefix ~ schema_name ~ schema_suffix %}\n    {% else %}\n        {% set custom_schema = schema_name %}\n    {% endif %}\n    {{ return(custom_schema) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1718147
    },
    "macro.idw_package.test_source": {
      "unique_id": "macro.idw_package.test_source",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/test_source.sql",
      "original_file_path": "macros/dynamic_source/test_source.sql",
      "name": "test_source",
      "macro_sql": "{% macro test_source(source_name, table_name) %}\n\n{% set relation_path = builtins.source(source_name, table_name) %}\n{% if idw_package.is_target_database(relation_path.database) %}\n    {% set db = relation_path.database %}\n    {% set schema = relation_path.schema %}\n{% else %}\n    {% set db = idw_package.default_target_database() %}\n    {% set schema = relation_path.database + '_' + relation_path.schema %}\n{% endif %}\n\n{% set rel = relation_path.replace_path(database=idw_package.database_env_map(db,target.name), schema=idw_package.get_custom_schema(schema)) %}\n\n{{ return(rel) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.is_target_database",
          "macro.idw_package.default_target_database",
          "macro.idw_package.database_env_map",
          "macro.idw_package.get_custom_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1734178
    },
    "macro.idw_package.dynamic_source": {
      "unique_id": "macro.idw_package.dynamic_source",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/dynamic_source.sql",
      "original_file_path": "macros/dynamic_source/dynamic_source.sql",
      "name": "dynamic_source",
      "macro_sql": "{% macro dynamic_source(source_name, table_name, environment='prod', branch=env_var('GIT_BRANCH','')) %}\n\n{% set rel = builtins.source(source_name, table_name) %}\n\n{% if execute %}\n    {% if target.name in ('dev', 'qa') %}\n        {% if env_var('SCHEMA_SUFFIX', '').startswith('_TEST') %}\n        -- Use test source\n            {% set rel = idw_package.test_source(source_name, table_name) %}\n        {% elif env_var('SCHEMA_SUFFIX', '').startswith('_QA') %}\n        -- Use limited prod source\n            {% set rel = idw_package.limited_source(source_name, table_name) %}\n        {% else %}\n            {% set rel = idw_package.dynamic_relation(rel, environment, branch) %}\n            {% if var('date_filter', 'off') != 'off' %}\n                {% set rel = idw_package.limited_source(source_name, table_name, original_path=rel, filter='date') %}\n            {% endif %}\n        {% endif %}\n    {% else %}\n    -- Use target environment source\n        {% set rel = idw_package.dynamic_relation(rel, target.name, branch) %}\n    {% endif %}\n{% endif %}\n\n{{ return(rel) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.test_source",
          "macro.idw_package.limited_source",
          "macro.idw_package.dynamic_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1764536
    },
    "macro.idw_package.get_relative_date_filter_expression": {
      "unique_id": "macro.idw_package.get_relative_date_filter_expression",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/get_date_filter_expression.sql",
      "original_file_path": "macros/dynamic_source/get_date_filter_expression.sql",
      "name": "get_relative_date_filter_expression",
      "macro_sql": "{% macro get_relative_date_filter_expression(date_filter_column,date_filter_relative_days) %}\n    {% set limited_data_query_expression %}\n        WHERE {{ date_filter_column }} >= TO_CHAR(current_date() - {{date_filter_relative_days}},'yyyy-mm-dd')\n    {% endset %}\n    {{ return(limited_data_query_expression) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1772366
    },
    "macro.idw_package.get_absolute_date_filter_expression": {
      "unique_id": "macro.idw_package.get_absolute_date_filter_expression",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/get_date_filter_expression.sql",
      "original_file_path": "macros/dynamic_source/get_date_filter_expression.sql",
      "name": "get_absolute_date_filter_expression",
      "macro_sql": "{% macro get_absolute_date_filter_expression(date_filter_column,date_filter_absolute_start,date_filter_absolute_end) %}\n    {% set limited_data_query_expression %}\n        WHERE {{ date_filter_column }} >= '{{ date_filter_absolute_start }}' AND {{ date_filter_column }} < '{{ date_filter_absolute_end }}'\n    {% endset %}\n    {{ return(limited_data_query_expression) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1777048
    },
    "macro.idw_package.filter_source_table": {
      "unique_id": "macro.idw_package.filter_source_table",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/filter_source_table.sql",
      "original_file_path": "macros/dynamic_source/filter_source_table.sql",
      "name": "filter_source_table",
      "macro_sql": "{% macro filter_source_table(original_path, target_path, filter_expression) %}\n\n    {% set limited_data_query %}\n        CREATE SCHEMA IF NOT EXISTS {{ target_path.database }}.{{target_path.schema}};\n        CREATE TRANSIENT TABLE IF NOT EXISTS {{ target_path }} AS (SELECT * FROM {{ original_path }} {{ filter_expression }});\n    {% endset %}\n    {{ return(run_query(limited_data_query)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1785324
    },
    "macro.idw_package.limited_source": {
      "unique_id": "macro.idw_package.limited_source",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/limited_source.sql",
      "original_file_path": "macros/dynamic_source/limited_source.sql",
      "name": "limited_source",
      "macro_sql": "{% macro limited_source(source_name, table_name, original_path, filter='expression') %}\n{% set target_path = idw_package.test_source(source_name, table_name) %}\n{% set target_path = target_path.replace_path(identifier=target_path.identifier ~ '_limited') %}\n{% if execute %}\n    {% set relation_path = builtins.source(source_name, table_name) %}\n    {% set source_key = [\"source\", project_name, source_name, table_name]|join(\".\")  %}\n    {% set source_node = graph.sources[source_key] %}\n    {% set filter_expression = source_node['meta']['filter_expression'] or var('filter_expression', '') %}\n    {% set date_filter_column = source_node['meta']['date_filter_column'] %}\n    {% set original_path = original_path or idw_package.dynamic_relation(relation_path, 'prod') %}\n\n    {% if filter == 'expression' and filter_expression %}\n        {% set result = idw_package.filter_source_table(original_path, target_path, filter_expression) %}\n    {% elif filter == 'date' and date_filter_column %}\n        {% set date_filter = var('date_filter','off') %}\n        {% if date_filter == 'absolute' %}\n            {% set date_filter_absolute_start = var('date_filter_absolute_start') %}\n            {% set date_filter_absolute_end = var('date_filter_absolute_end') %}\n            {% if date_filter_absolute_start and date_filter_absolute_end %}\n                {% set filter_expression = idw_package.get_absolute_date_filter_expression(date_filter_column,\n                                                            date_filter_absolute_start=date_filter_absolute_start,\n                                                            date_filter_absolute_end=date_filter_absolute_end) %}\n            {% else %}\n                {{ dbt_utils.log_info(\"date_filter_absolute_start and date_filter_absolute_end are required\") }}\n                {{ return(original_path) }}\n            {% endif %}\n        {% elif date_filter == 'relative' %}\n            {% set date_filter_relative_days = var('date_filter_relative_days',90) %}\n            {% set filter_expression = idw_package.get_relative_date_filter_expression(date_filter_column,\n                                                        date_filter_relative_days=date_filter_relative_days) %}\n        {% else %}\n            {{ dbt_utils.log_info(\"date_filter must be set to either 'absolute' or 'relative', got : \" ~ date_filter) }}\n            {{ return(original_path) }}\n        {% endif %}\n        {% set result = idw_package.filter_source_table(original_path, target_path, filter_expression) %}\n    {% else %}\n        {% set target_path = original_path %}\n    {% endif %}\n{% endif %}\n{{ return(target_path) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.test_source",
          "macro.idw_package.dynamic_relation",
          "macro.idw_package.filter_source_table",
          "macro.idw_package.get_absolute_date_filter_expression",
          "macro.dbt_utils.log_info",
          "macro.idw_package.get_relative_date_filter_expression"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1843092
    },
    "macro.idw_package.dynamic_relation": {
      "unique_id": "macro.idw_package.dynamic_relation",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/dynamic_relation.sql",
      "original_file_path": "macros/dynamic_source/dynamic_relation.sql",
      "name": "dynamic_relation",
      "macro_sql": "{% macro dynamic_relation(rel, environment, branch) %}\n    {% set database = idw_package.database_env_map(rel.database, environment) %}\n    {% if idw_package.is_target_database(rel.database) and environment in (\"dev\", \"qa\") %}\n        {% set schema = idw_package.get_custom_schema(rel.schema, environment, branch) %}\n        {{ return(rel.replace_path(database=database, schema=schema)) }}\n    {% else %}\n        {{ return(rel.replace_path(database=database)) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.idw_package.database_env_map",
          "macro.idw_package.is_target_database",
          "macro.idw_package.get_custom_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1856725
    },
    "macro.idw_package.database_env_map": {
      "unique_id": "macro.idw_package.database_env_map",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/database_env_map.sql",
      "original_file_path": "macros/dynamic_source/database_env_map.sql",
      "name": "database_env_map",
      "macro_sql": "{% macro database_env_map(database, env) %}\n\n{% set database_dict = var('database_environment_map', {}) %}\n\n{% if database.upper() in database_dict %}\n    {{ return(database_dict[database.upper()][env]) }}\n{% else %}\n    {{ return(database)  }}\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1867106
    },
    "macro.idw_package.is_target_database": {
      "unique_id": "macro.idw_package.is_target_database",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/database_env_map.sql",
      "original_file_path": "macros/dynamic_source/database_env_map.sql",
      "name": "is_target_database",
      "macro_sql": "{% macro is_target_database(database) %}\n\n{% set target_database = var('target_databases') %}\n\n{{ return(database.upper() in target_database) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1870875
    },
    "macro.idw_package.default_target_database": {
      "unique_id": "macro.idw_package.default_target_database",
      "package_name": "idw_package",
      "root_path": "/dbt-deps/idw_package",
      "path": "macros/dynamic_source/database_env_map.sql",
      "original_file_path": "macros/dynamic_source/database_env_map.sql",
      "name": "default_target_database",
      "macro_sql": "{% macro default_target_database() %}\n\n{{ return(var('target_databases')[0]) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1873586
    },
    "macro.dbt_expectations.regexp_instr": {
      "unique_id": "macro.dbt_expectations.regexp_instr",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "name": "regexp_instr",
      "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__regexp_instr"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1883225
    },
    "macro.dbt_expectations.default__regexp_instr": {
      "unique_id": "macro.dbt_expectations.default__regexp_instr",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "name": "default__regexp_instr",
      "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.188651
    },
    "macro.dbt_expectations.redshift__regexp_instr": {
      "unique_id": "macro.dbt_expectations.redshift__regexp_instr",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "name": "redshift__regexp_instr",
      "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1889741
    },
    "macro.dbt_expectations.postgres__regexp_instr": {
      "unique_id": "macro.dbt_expectations.postgres__regexp_instr",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "name": "postgres__regexp_instr",
      "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1892288
    },
    "macro.dbt_expectations.spark__regexp_instr": {
      "unique_id": "macro.dbt_expectations.spark__regexp_instr",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "name": "spark__regexp_instr",
      "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1894786
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
      "name": "test_expect_column_values_to_be_decreasing",
      "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1913328
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
      "name": "test_expect_column_values_to_be_increasing",
      "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1934369
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
      "name": "test_expect_column_values_to_be_of_type",
      "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.193925
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_null": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
      "name": "test_expect_column_values_to_be_null",
      "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.194676
    },
    "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
      "name": "test_expect_column_values_to_have_consistent_casing",
      "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1954029
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
      "name": "test_expect_column_values_to_not_be_in_set",
      "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1969166
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_unique": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
      "name": "test_expect_column_values_to_be_unique",
      "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.19745
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
      "name": "test_expect_column_values_to_be_in_type_list",
      "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1991656
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
      "name": "test_expect_column_values_to_not_be_null",
      "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.1999385
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
      "name": "test_expect_column_values_to_be_between",
      "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.201048
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
      "name": "test_expect_column_values_to_be_in_set",
      "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2024925
    },
    "macro.dbt_expectations.test_expression_is_true": {
      "unique_id": "macro.dbt_expectations.test_expression_is_true",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "name": "test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2038085
    },
    "macro.dbt_expectations.expression_is_true": {
      "unique_id": "macro.dbt_expectations.expression_is_true",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "name": "expression_is_true",
      "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2043178
    },
    "macro.dbt_expectations.default__expression_is_true": {
      "unique_id": "macro.dbt_expectations.default__expression_is_true",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "name": "default__expression_is_true",
      "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.truth_expression"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2054055
    },
    "macro.dbt_expectations.test_expression_between": {
      "unique_id": "macro.dbt_expectations.test_expression_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_between.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
      "name": "test_expression_between",
      "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2068567
    },
    "macro.dbt_expectations.expression_between": {
      "unique_id": "macro.dbt_expectations.expression_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_between.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
      "name": "expression_between",
      "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.20815
    },
    "macro.dbt_expectations.truth_expression": {
      "unique_id": "macro.dbt_expectations.truth_expression",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "name": "truth_expression",
      "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__truth_expression"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2086535
    },
    "macro.dbt_expectations.default__truth_expression": {
      "unique_id": "macro.dbt_expectations.default__truth_expression",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "name": "default__truth_expression",
      "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2088308
    },
    "macro.dbt_expectations.get_select": {
      "unique_id": "macro.dbt_expectations.get_select",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "name": "get_select",
      "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__get_select"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2137952
    },
    "macro.dbt_expectations.default__get_select": {
      "unique_id": "macro.dbt_expectations.default__get_select",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "name": "default__get_select",
      "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.214794
    },
    "macro.dbt_expectations.test_equal_expression": {
      "unique_id": "macro.dbt_expectations.test_equal_expression",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "name": "test_equal_expression",
      "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_equal_expression"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2156167
    },
    "macro.dbt_expectations.default__test_equal_expression": {
      "unique_id": "macro.dbt_expectations.default__test_equal_expression",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "name": "default__test_equal_expression",
      "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.get_select"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2179422
    },
    "macro.dbt_expectations._get_metric_expression": {
      "unique_id": "macro.dbt_expectations._get_metric_expression",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "name": "_get_metric_expression",
      "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.log_natural"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2215412
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "name": "test_expect_column_values_to_be_within_n_moving_stdevs",
      "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2224333
    },
    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {
      "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs",
      "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc",
          "macro.dbt_expectations._get_metric_expression",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.now",
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.224378
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "name": "test_expect_column_values_to_be_within_n_stdevs",
      "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.225656
    },
    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {
      "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "name": "default__test_expect_column_values_to_be_within_n_stdevs",
      "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.226599
    },
    "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {
      "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
      "name": "test_expect_row_values_to_have_data_for_every_n_datepart",
      "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_date.get_base_dates",
          "macro.dbt_utils.datediff",
          "macro.dbt_utils.type_int",
          "macro.dbt_utils.date_trunc",
          "macro.dbt_expectations.type_datetime",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2326918
    },
    "macro.dbt_expectations.test_expect_column_min_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
      "name": "test_expect_column_min_to_be_between",
      "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.233888
    },
    "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
      "name": "test_expect_column_distinct_values_to_contain_set",
      "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2353425
    },
    "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
      "name": "test_expect_column_distinct_count_to_be_greater_than",
      "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2363415
    },
    "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
      "name": "test_expect_column_unique_value_count_to_be_between",
      "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.237512
    },
    "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
      "name": "test_expect_column_proportion_of_unique_values_to_be_between",
      "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.238788
    },
    "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
      "name": "test_expect_column_distinct_values_to_equal_set",
      "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2402182
    },
    "macro.dbt_expectations.test_expect_column_median_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
      "name": "test_expect_column_median_to_be_between",
      "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.median",
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.241438
    },
    "macro.dbt_expectations.test_expect_column_mean_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
      "name": "test_expect_column_mean_to_be_between",
      "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2426007
    },
    "macro.dbt_expectations.test_expect_column_sum_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
      "name": "test_expect_column_sum_to_be_between",
      "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2437742
    },
    "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
      "name": "test_expect_column_distinct_values_to_be_in_set",
      "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.245193
    },
    "macro.dbt_expectations.test_expect_column_max_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
      "name": "test_expect_column_max_to_be_between",
      "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2463298
    },
    "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
      "name": "test_expect_column_distinct_count_to_equal_other_table",
      "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_equal_expression"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2476053
    },
    "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {
      "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "name": "test_expect_column_most_common_value_to_be_in_set",
      "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2496166
    },
    "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {
      "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "name": "default__test_expect_column_most_common_value_to_be_in_set",
      "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2509785
    },
    "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
      "name": "test_expect_column_distinct_count_to_equal",
      "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2519763
    },
    "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
      "name": "test_expect_column_quantile_values_to_be_between",
      "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.percentile_cont",
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2532463
    },
    "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "name": "test_expect_column_stdev_to_be_between",
      "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.254748
    },
    "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {
      "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "name": "default__test_expect_column_stdev_to_be_between",
      "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2555017
    },
    "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {
      "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
      "name": "test_expect_multicolumn_sum_to_equal",
      "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2567976
    },
    "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {
      "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
      "name": "test_expect_compound_columns_to_be_unique",
      "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set row_condition_ext %}\n\n{% if row_condition  %}\n    {{ row_condition }} and\n{% endif %}\n\n{% if ignore_row_if == \"all_values_are_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} and {% endif %}\n        {%- endfor %}\n    )\n{% elif ignore_row_if == \"any_value_is_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} or {% endif %}\n        {%- endfor %}\n    )\n{% endif %}\n{% endset %}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2605646
    },
    "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {
      "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
      "name": "test_expect_column_pair_values_to_be_in_set",
      "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2625425
    },
    "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {
      "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
      "name": "test_expect_column_pair_values_A_to_be_greater_than_B",
      "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.263629
    },
    "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {
      "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
      "name": "test_expect_column_pair_values_to_be_equal",
      "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2645738
    },
    "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {
      "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "name": "test_expect_select_column_values_to_be_unique_within_record",
      "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2668033
    },
    "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {
      "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "name": "default__test_expect_select_column_values_to_be_unique_within_record",
      "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2691305
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
      "name": "test_expect_column_values_to_not_match_regex",
      "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2700913
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_regex": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
      "name": "test_expect_column_values_to_match_regex",
      "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.271022
    },
    "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
      "name": "test_expect_column_value_lengths_to_be_between",
      "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.length",
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.272187
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
      "name": "test_expect_column_values_to_match_like_pattern",
      "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2730463
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
      "name": "test_expect_column_values_to_match_like_pattern_list",
      "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2745361
    },
    "macro.dbt_expectations._get_like_pattern_expression": {
      "unique_id": "macro.dbt_expectations._get_like_pattern_expression",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
      "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
      "name": "_get_like_pattern_expression",
      "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2750642
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
      "name": "test_expect_column_values_to_match_regex_list",
      "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2765381
    },
    "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {
      "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
      "name": "test_expect_column_value_lengths_to_equal",
      "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.length",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2773948
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
      "name": "test_expect_column_values_to_not_match_like_pattern",
      "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2782478
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
      "name": "test_expect_column_values_to_not_match_regex_list",
      "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2797759
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
      "name": "test_expect_column_values_to_not_match_like_pattern_list",
      "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2812722
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
      "name": "test_expect_table_row_count_to_be_between",
      "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2823453
    },
    "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
      "name": "test_expect_table_columns_to_not_contain_set",
      "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.284232
    },
    "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {
      "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "name": "test_expect_row_values_to_have_recent_data",
      "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2856188
    },
    "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {
      "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "name": "default__test_expect_row_values_to_have_recent_data",
      "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_date.now",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.286702
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_equal": {
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "name": "test_expect_table_row_count_to_equal",
      "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_table_row_count_to_equal"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2878733
    },
    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {
      "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "name": "default__test_expect_table_row_count_to_equal",
      "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.288365
    },
    "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {
      "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "name": "test_expect_grouped_row_values_to_have_recent_data",
      "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2902162
    },
    "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {
      "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "name": "default__test_expect_grouped_row_values_to_have_recent_data",
      "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.group_by",
          "macro.dbt_utils.dateadd",
          "macro.dbt_date.now"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2911475
    },
    "macro.dbt_expectations._get_column_list": {
      "unique_id": "macro.dbt_expectations._get_column_list",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/_get_column_list.sql",
      "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql",
      "name": "_get_column_list",
      "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.291891
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
      "name": "test_expect_table_row_count_to_equal_other_table_times_factor",
      "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2925088
    },
    "macro.dbt_expectations.test_expect_column_to_exist": {
      "unique_id": "macro.dbt_expectations.test_expect_column_to_exist",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
      "name": "test_expect_column_to_exist",
      "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2944214
    },
    "macro.dbt_expectations.test_expect_table_columns_to_match_set": {
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
      "name": "test_expect_table_columns_to_match_set",
      "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2964103
    },
    "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
      "name": "test_expect_table_columns_to_contain_set",
      "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.2983024
    },
    "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
      "name": "test_expect_table_columns_to_match_ordered_list",
      "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3005514
    },
    "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {
      "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
      "name": "test_expect_table_column_count_to_equal_other_table",
      "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3014152
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
      "name": "test_expect_table_row_count_to_equal_other_table",
      "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_equal_expression"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3021483
    },
    "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {
      "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
      "name": "test_expect_table_column_count_to_be_between",
      "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3038387
    },
    "macro.dbt_expectations._list_intersect": {
      "unique_id": "macro.dbt_expectations._list_intersect",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/_list_intersect.sql",
      "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql",
      "name": "_list_intersect",
      "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.30463
    },
    "macro.dbt_expectations.test_expect_table_column_count_to_equal": {
      "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
      "name": "test_expect_table_column_count_to_equal",
      "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3053145
    },
    "macro.dbt_expectations.rand": {
      "unique_id": "macro.dbt_expectations.rand",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "name": "rand",
      "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.snowflake__rand"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3058732
    },
    "macro.dbt_expectations.default__rand": {
      "unique_id": "macro.dbt_expectations.default__rand",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "name": "default__rand",
      "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3060014
    },
    "macro.dbt_expectations.bigquery__rand": {
      "unique_id": "macro.dbt_expectations.bigquery__rand",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "name": "bigquery__rand",
      "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3061228
    },
    "macro.dbt_expectations.snowflake__rand": {
      "unique_id": "macro.dbt_expectations.snowflake__rand",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "name": "snowflake__rand",
      "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3062575
    },
    "macro.dbt_expectations.postgres__rand": {
      "unique_id": "macro.dbt_expectations.postgres__rand",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "name": "postgres__rand",
      "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3063765
    },
    "macro.dbt_expectations.redshift__rand": {
      "unique_id": "macro.dbt_expectations.redshift__rand",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "name": "redshift__rand",
      "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.306495
    },
    "macro.dbt_expectations.median": {
      "unique_id": "macro.dbt_expectations.median",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/median.sql",
      "original_file_path": "macros/math/median.sql",
      "name": "median",
      "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.percentile_cont"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3069131
    },
    "macro.dbt_expectations.percentile_cont": {
      "unique_id": "macro.dbt_expectations.percentile_cont",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/percentile_cont.sql",
      "original_file_path": "macros/math/percentile_cont.sql",
      "name": "percentile_cont",
      "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__quantile"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3076644
    },
    "macro.dbt_expectations.default__quantile": {
      "unique_id": "macro.dbt_expectations.default__quantile",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/percentile_cont.sql",
      "original_file_path": "macros/math/percentile_cont.sql",
      "name": "default__quantile",
      "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.308025
    },
    "macro.dbt_expectations.bigquery__quantile": {
      "unique_id": "macro.dbt_expectations.bigquery__quantile",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/percentile_cont.sql",
      "original_file_path": "macros/math/percentile_cont.sql",
      "name": "bigquery__quantile",
      "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.30838
    },
    "macro.dbt_expectations.log_natural": {
      "unique_id": "macro.dbt_expectations.log_natural",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "name": "log_natural",
      "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.snowflake__log_natural"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3089266
    },
    "macro.dbt_expectations.default__log_natural": {
      "unique_id": "macro.dbt_expectations.default__log_natural",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "name": "default__log_natural",
      "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3091006
    },
    "macro.dbt_expectations.bigquery__log_natural": {
      "unique_id": "macro.dbt_expectations.bigquery__log_natural",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "name": "bigquery__log_natural",
      "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3092682
    },
    "macro.dbt_expectations.snowflake__log_natural": {
      "unique_id": "macro.dbt_expectations.snowflake__log_natural",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "name": "snowflake__log_natural",
      "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3094347
    },
    "macro.dbt_expectations.type_timestamp": {
      "unique_id": "macro.dbt_expectations.type_timestamp",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "type_timestamp",
      "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.snowflake__type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.310084
    },
    "macro.dbt_expectations.default__type_timestamp": {
      "unique_id": "macro.dbt_expectations.default__type_timestamp",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3102136
    },
    "macro.dbt_expectations.snowflake__type_timestamp": {
      "unique_id": "macro.dbt_expectations.snowflake__type_timestamp",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "snowflake__type_timestamp",
      "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3103352
    },
    "macro.dbt_expectations.postgres__type_timestamp": {
      "unique_id": "macro.dbt_expectations.postgres__type_timestamp",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "postgres__type_timestamp",
      "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3105297
    },
    "macro.dbt_expectations.type_datetime": {
      "unique_id": "macro.dbt_expectations.type_datetime",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "type_datetime",
      "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.snowflake__type_datetime"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3107972
    },
    "macro.dbt_expectations.default__type_datetime": {
      "unique_id": "macro.dbt_expectations.default__type_datetime",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "default__type_datetime",
      "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3109167
    },
    "macro.dbt_expectations.snowflake__type_datetime": {
      "unique_id": "macro.dbt_expectations.snowflake__type_datetime",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "snowflake__type_datetime",
      "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.311033
    },
    "macro.dbt_expectations.postgres__type_datetime": {
      "unique_id": "macro.dbt_expectations.postgres__type_datetime",
      "package_name": "dbt_expectations",
      "root_path": "/dbt-deps/dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "postgres__type_datetime",
      "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1650312442.3111508
    }
  },
  "docs": {
    "dbt.__overview__": {
      "unique_id": "dbt.__overview__",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project",
      "path": "overview.md",
      "original_file_path": "docs/overview.md",
      "name": "__overview__",
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
    }
  },
  "exposures": {},
  "metrics": {},
  "selectors": {},
  "disabled": {
    "model.logging.stg_dbt_model_deployments": [
      {
        "raw_sql": "with events as (\n\n    select * from {{ ref('stg_dbt_audit_log') }}\n\n),\n\naggregated as (\n\n    select\n\n        {{ dbt_utils.surrogate_key([\n            'event_model',\n            'invocation_id'\n        ]) }} as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name like '%model%'\n\n    {{ dbt_utils.group_by(n=6) }}\n\n)\n\nselect * from aggregated",
        "resource_type": "model",
        "depends_on": {
          "macros": [
            "macro.dbt_utils.surrogate_key",
            "macro.dbt_utils.group_by"
          ],
          "nodes": []
        },
        "config": {
          "enabled": false,
          "alias": null,
          "schema": "meta",
          "database": null,
          "tags": [],
          "meta": {},
          "materialized": "view",
          "persist_docs": {},
          "quoting": {},
          "column_types": {},
          "full_refresh": null,
          "on_schema_change": "ignore",
          "transient": false,
          "post-hook": [],
          "pre-hook": []
        },
        "database": "HR_SOURCE_DEV",
        "schema": "DEVHRDM_177_meta",
        "fqn": [
          "logging",
          "bigquery",
          "stg_dbt_model_deployments"
        ],
        "unique_id": "model.logging.stg_dbt_model_deployments",
        "package_name": "logging",
        "root_path": "/dbt-deps/logging",
        "path": "bigquery/stg_dbt_model_deployments.sql",
        "original_file_path": "models/bigquery/stg_dbt_model_deployments.sql",
        "name": "stg_dbt_model_deployments",
        "alias": "stg_dbt_model_deployments",
        "checksum": {
          "name": "sha256",
          "checksum": "13b5aa5d104d233d4c114847477c4ffdd9b2bedc5b1555a8b5a39db38b6302cc"
        },
        "tags": [],
        "refs": [
          [
            "stg_dbt_audit_log"
          ]
        ],
        "sources": [],
        "description": "",
        "columns": {},
        "meta": {},
        "docs": {
          "show": true
        },
        "patch_path": null,
        "compiled_path": null,
        "build_path": null,
        "deferred": false,
        "unrendered_config": {
          "schema": "meta",
          "enabled": "{{ target.type == \"bigquery\" | as_bool }}",
          "transient": false
        },
        "created_at": 1650312443.1065774
      }
    ],
    "model.logging.stg_dbt_deployments": [
      {
        "raw_sql": "with events as (\n\n    select * from {{ref('stg_dbt_audit_log')}}\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name like '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    {{ dbt_utils.group_by(n=3) }}\n\n)\n\nselect * from aggregated",
        "resource_type": "model",
        "depends_on": {
          "macros": [
            "macro.dbt_utils.group_by"
          ],
          "nodes": []
        },
        "config": {
          "enabled": false,
          "alias": null,
          "schema": "meta",
          "database": null,
          "tags": [],
          "meta": {},
          "materialized": "view",
          "persist_docs": {},
          "quoting": {},
          "column_types": {},
          "full_refresh": null,
          "on_schema_change": "ignore",
          "transient": false,
          "post-hook": [],
          "pre-hook": []
        },
        "database": "HR_SOURCE_DEV",
        "schema": "DEVHRDM_177_meta",
        "fqn": [
          "logging",
          "bigquery",
          "stg_dbt_deployments"
        ],
        "unique_id": "model.logging.stg_dbt_deployments",
        "package_name": "logging",
        "root_path": "/dbt-deps/logging",
        "path": "bigquery/stg_dbt_deployments.sql",
        "original_file_path": "models/bigquery/stg_dbt_deployments.sql",
        "name": "stg_dbt_deployments",
        "alias": "stg_dbt_deployments",
        "checksum": {
          "name": "sha256",
          "checksum": "dd9808de59dab792ee5f753091f917659ada0e3c48f68bed10d1c8a922b216cf"
        },
        "tags": [],
        "refs": [
          [
            "stg_dbt_audit_log"
          ]
        ],
        "sources": [],
        "description": "",
        "columns": {},
        "meta": {},
        "docs": {
          "show": true
        },
        "patch_path": null,
        "compiled_path": null,
        "build_path": null,
        "deferred": false,
        "unrendered_config": {
          "schema": "meta",
          "enabled": "{{ target.type == \"bigquery\" | as_bool }}",
          "transient": false
        },
        "created_at": 1650312443.1141884
      }
    ]
  },
  "parent_map": {
    "model.hrdm_ingest.submittal": [
      "source.hrdm_ingest.icims_raw.submittal"
    ],
    "model.hrdm_ingest.sourceworkflow": [
      "source.hrdm_ingest.icims_raw.sourceworkflow"
    ],
    "model.hrdm_ingest.room": [
      "source.hrdm_ingest.icims_raw.room"
    ],
    "model.hrdm_ingest.icims_code_generator": [],
    "model.hrdm_ingest.talentpool": [
      "source.hrdm_ingest.icims_raw.talentpool"
    ],
    "model.hrdm_ingest.connecteventworkflow": [
      "source.hrdm_ingest.icims_raw.connecteventworkflow"
    ],
    "model.hrdm_ingest.company": [
      "source.hrdm_ingest.icims_raw.company"
    ],
    "model.hrdm_ingest.connecteventworkflowsource": [
      "source.hrdm_ingest.icims_raw.connecteventworkflowsource"
    ],
    "model.hrdm_ingest.connectevent": [
      "source.hrdm_ingest.icims_raw.connectevent"
    ],
    "model.hrdm_ingest.feedback_dimension": [
      "source.hrdm_ingest.feedback_raw.ckapp_dimension_history"
    ],
    "model.hrdm_ingest.feedback_rubric": [
      "source.hrdm_ingest.feedback_raw.ckapp_rubric_history"
    ],
    "model.hrdm_ingest.feedback_form_builder_form": [
      "source.hrdm_ingest.feedback_raw.form_builder_form_history"
    ],
    "model.hrdm_ingest.feedback_function": [
      "source.hrdm_ingest.feedback_raw.ckapp_function_history"
    ],
    "model.hrdm_ingest.feedback_round": [
      "source.hrdm_ingest.feedback_raw.feedback_round_history"
    ],
    "model.hrdm_ingest.feedback_employee_ptl_snapshot": [
      "source.hrdm_ingest.feedback_raw.feedback_employeeptlsnapshot_history"
    ],
    "model.hrdm_ingest.feedback_level": [
      "source.hrdm_ingest.feedback_raw.ckapp_level_history"
    ],
    "model.hrdm_ingest.feedback_role": [
      "source.hrdm_ingest.feedback_raw.ckapp_role_history"
    ],
    "model.hrdm_ingest.feedback_organization": [
      "source.hrdm_ingest.feedback_raw.ckapp_organization_history"
    ],
    "model.hrdm_ingest.workday_companies": [
      "source.hrdm_ingest.workday_raw.workday_companies"
    ],
    "model.hrdm_ingest.workday_supervisory_organizations": [
      "source.hrdm_ingest.workday_raw.workday_supervisory_organizations"
    ],
    "model.hrdm_ingest.workday_custom_organizations": [
      "source.hrdm_ingest.workday_raw.workday_custom_organizations"
    ],
    "model.hrdm_ingest.workday_suppliers": [
      "source.hrdm_ingest.workday_raw.workday_suppliers"
    ],
    "model.hrdm_ingest.workday_locations": [
      "source.hrdm_ingest.workday_raw.workday_locations"
    ],
    "model.hrdm_ingest.workday_cost_centers": [
      "source.hrdm_ingest.workday_raw.workday_cost_centers"
    ],
    "model.hrdm_ingest.workday_locations_hierarchy": [
      "source.hrdm_ingest.workday_raw.workday_locations_hierarchy"
    ],
    "model.hrdm_ingest.workday_transactions": [
      "source.hrdm_ingest.workday_raw.workday_transactions"
    ],
    "model.hrdm_ingest.workday_job_profiles": [
      "source.hrdm_ingest.workday_raw.workday_job_profiles"
    ],
    "model.logging.stg_dbt_audit_log": [],
    "model.logging.stg_dbt_model_deployments": [
      "model.logging.stg_dbt_audit_log"
    ],
    "model.logging.stg_dbt_deployments": [
      "model.logging.stg_dbt_audit_log"
    ],
    "analysis.logging.models_out_of_sla": [
      "model.logging.stg_dbt_model_deployments"
    ],
    "analysis.logging.models": [
      "model.logging.stg_dbt_model_deployments"
    ],
    "analysis.logging.deployments": [
      "model.logging.stg_dbt_deployments"
    ],
    "analysis.logging.models_summary": [
      "model.logging.stg_dbt_model_deployments"
    ],
    "operation.logging.logging-on-run-start-0": [],
    "operation.logging.logging-on-run-start-1": [],
    "operation.logging.logging-on-run-start-2": [],
    "operation.logging.logging-on-run-end-0": [],
    "source.hrdm_ingest.icims_raw.talentpool": [],
    "source.hrdm_ingest.icims_raw.connectevent": [],
    "source.hrdm_ingest.icims_raw.person": [],
    "source.hrdm_ingest.icims_raw.room": [],
    "source.hrdm_ingest.icims_raw.connecteventworkflow": [],
    "source.hrdm_ingest.icims_raw.connecteventworkflowsource": [],
    "source.hrdm_ingest.icims_raw.company": [],
    "source.hrdm_ingest.icims_raw.sourceworkflow": [],
    "source.hrdm_ingest.icims_raw.submittal": [],
    "source.hrdm_ingest.feedback_raw.ckapp_dimension_history": [],
    "source.hrdm_ingest.feedback_raw.ckapp_function_history": [],
    "source.hrdm_ingest.feedback_raw.ckapp_level_history": [],
    "source.hrdm_ingest.feedback_raw.ckapp_organization_history": [],
    "source.hrdm_ingest.feedback_raw.ckapp_role_history": [],
    "source.hrdm_ingest.feedback_raw.ckapp_rubric_history": [],
    "source.hrdm_ingest.feedback_raw.feedback_employeeptlsnapshot_history": [],
    "source.hrdm_ingest.feedback_raw.feedback_round_history": [],
    "source.hrdm_ingest.feedback_raw.form_builder_form_history": [],
    "source.hrdm_ingest.workday_raw.workday_locations": [],
    "source.hrdm_ingest.workday_raw.workday_locations_hierarchy": [],
    "source.hrdm_ingest.workday_raw.workday_cost_centers": [],
    "source.hrdm_ingest.workday_raw.workday_supervisory_organizations": [],
    "source.hrdm_ingest.workday_raw.workday_companies": [],
    "source.hrdm_ingest.workday_raw.workday_custom_organizations": [],
    "source.hrdm_ingest.workday_raw.workday_job_profiles": [],
    "source.hrdm_ingest.workday_raw.workday_transactions": [],
    "source.hrdm_ingest.workday_raw.workday_suppliers": []
  },
  "child_map": {
    "model.hrdm_ingest.submittal": [],
    "model.hrdm_ingest.sourceworkflow": [],
    "model.hrdm_ingest.room": [],
    "model.hrdm_ingest.icims_code_generator": [],
    "model.hrdm_ingest.talentpool": [],
    "model.hrdm_ingest.connecteventworkflow": [],
    "model.hrdm_ingest.company": [],
    "model.hrdm_ingest.connecteventworkflowsource": [],
    "model.hrdm_ingest.connectevent": [],
    "model.hrdm_ingest.feedback_dimension": [],
    "model.hrdm_ingest.feedback_rubric": [],
    "model.hrdm_ingest.feedback_form_builder_form": [],
    "model.hrdm_ingest.feedback_function": [],
    "model.hrdm_ingest.feedback_round": [],
    "model.hrdm_ingest.feedback_employee_ptl_snapshot": [],
    "model.hrdm_ingest.feedback_level": [],
    "model.hrdm_ingest.feedback_role": [],
    "model.hrdm_ingest.feedback_organization": [],
    "model.hrdm_ingest.workday_companies": [],
    "model.hrdm_ingest.workday_supervisory_organizations": [],
    "model.hrdm_ingest.workday_custom_organizations": [],
    "model.hrdm_ingest.workday_suppliers": [],
    "model.hrdm_ingest.workday_locations": [],
    "model.hrdm_ingest.workday_cost_centers": [],
    "model.hrdm_ingest.workday_locations_hierarchy": [],
    "model.hrdm_ingest.workday_transactions": [],
    "model.hrdm_ingest.workday_job_profiles": [],
    "model.logging.stg_dbt_audit_log": [
      "model.logging.stg_dbt_deployments",
      "model.logging.stg_dbt_model_deployments"
    ],
    "model.logging.stg_dbt_model_deployments": [
      "analysis.logging.models",
      "analysis.logging.models_out_of_sla",
      "analysis.logging.models_summary"
    ],
    "model.logging.stg_dbt_deployments": [
      "analysis.logging.deployments"
    ],
    "analysis.logging.models_out_of_sla": [],
    "analysis.logging.models": [],
    "analysis.logging.deployments": [],
    "analysis.logging.models_summary": [],
    "operation.logging.logging-on-run-start-0": [],
    "operation.logging.logging-on-run-start-1": [],
    "operation.logging.logging-on-run-start-2": [],
    "operation.logging.logging-on-run-end-0": [],
    "source.hrdm_ingest.icims_raw.talentpool": [
      "model.hrdm_ingest.talentpool"
    ],
    "source.hrdm_ingest.icims_raw.connectevent": [
      "model.hrdm_ingest.connectevent"
    ],
    "source.hrdm_ingest.icims_raw.person": [],
    "source.hrdm_ingest.icims_raw.room": [
      "model.hrdm_ingest.room"
    ],
    "source.hrdm_ingest.icims_raw.connecteventworkflow": [
      "model.hrdm_ingest.connecteventworkflow"
    ],
    "source.hrdm_ingest.icims_raw.connecteventworkflowsource": [
      "model.hrdm_ingest.connecteventworkflowsource"
    ],
    "source.hrdm_ingest.icims_raw.company": [
      "model.hrdm_ingest.company"
    ],
    "source.hrdm_ingest.icims_raw.sourceworkflow": [
      "model.hrdm_ingest.sourceworkflow"
    ],
    "source.hrdm_ingest.icims_raw.submittal": [
      "model.hrdm_ingest.submittal"
    ],
    "source.hrdm_ingest.feedback_raw.ckapp_dimension_history": [
      "model.hrdm_ingest.feedback_dimension"
    ],
    "source.hrdm_ingest.feedback_raw.ckapp_function_history": [
      "model.hrdm_ingest.feedback_function"
    ],
    "source.hrdm_ingest.feedback_raw.ckapp_level_history": [
      "model.hrdm_ingest.feedback_level"
    ],
    "source.hrdm_ingest.feedback_raw.ckapp_organization_history": [
      "model.hrdm_ingest.feedback_organization"
    ],
    "source.hrdm_ingest.feedback_raw.ckapp_role_history": [
      "model.hrdm_ingest.feedback_role"
    ],
    "source.hrdm_ingest.feedback_raw.ckapp_rubric_history": [
      "model.hrdm_ingest.feedback_rubric"
    ],
    "source.hrdm_ingest.feedback_raw.feedback_employeeptlsnapshot_history": [
      "model.hrdm_ingest.feedback_employee_ptl_snapshot"
    ],
    "source.hrdm_ingest.feedback_raw.feedback_round_history": [
      "model.hrdm_ingest.feedback_round"
    ],
    "source.hrdm_ingest.feedback_raw.form_builder_form_history": [
      "model.hrdm_ingest.feedback_form_builder_form"
    ],
    "source.hrdm_ingest.workday_raw.workday_locations": [
      "model.hrdm_ingest.workday_locations"
    ],
    "source.hrdm_ingest.workday_raw.workday_locations_hierarchy": [
      "model.hrdm_ingest.workday_locations_hierarchy"
    ],
    "source.hrdm_ingest.workday_raw.workday_cost_centers": [
      "model.hrdm_ingest.workday_cost_centers"
    ],
    "source.hrdm_ingest.workday_raw.workday_supervisory_organizations": [
      "model.hrdm_ingest.workday_supervisory_organizations"
    ],
    "source.hrdm_ingest.workday_raw.workday_companies": [
      "model.hrdm_ingest.workday_companies"
    ],
    "source.hrdm_ingest.workday_raw.workday_custom_organizations": [
      "model.hrdm_ingest.workday_custom_organizations"
    ],
    "source.hrdm_ingest.workday_raw.workday_job_profiles": [
      "model.hrdm_ingest.workday_job_profiles"
    ],
    "source.hrdm_ingest.workday_raw.workday_transactions": [
      "model.hrdm_ingest.workday_transactions"
    ],
    "source.hrdm_ingest.workday_raw.workday_suppliers": [
      "model.hrdm_ingest.workday_suppliers"
    ]
  }
}